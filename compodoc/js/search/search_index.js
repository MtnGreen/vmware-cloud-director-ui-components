var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionDisplayConfig.html",[0,0.058,1,3.086]],["body/interfaces/ActionDisplayConfig.html",[0,0.09,1,4.74,2,1.024,3,0.114,4,0.091,5,0.08,6,3.665,7,3.665,8,0.312,9,1.885,10,7.343,11,5.966,12,0.209,13,0.493,14,0.758,15,3.304,16,6.378,17,4.74,18,0.306,19,0.009,20,1.607,21,4.059,22,3.158,23,6.991,24,6.131,25,2.057,26,0.183,27,2.375,28,5.6,29,4.613,30,1.963,31,2.274,32,4.613,33,5.052,34,1.313,35,1.493,36,1.575,37,5.443,38,3.344,39,2.679,40,2.419,41,3.142,42,3.923,43,3.129,44,5.443,45,2.779,46,4.613,47,1.646,48,3.665,49,4.209,50,0.599,51,3.907,52,0.937,53,5.443,54,4.209,55,2.833,56,6.613,57,1.993,58,1.821,59,0.549,60,1.399,61,1.493,62,1.869,63,2.844,64,2.077,65,2.621,66,1.539,67,2.988,68,4.209,69,4.74,70,4.613,71,1.756,72,0.763,73,2.831,74,4.613,75,0.432,76,1.821,77,0.08,78,2.144,79,2.084,80,1.39,81,3.464,82,1.53,83,2.909,84,0.687,85,3.583,86,2.027,87,2.941,88,5.966,89,1.919,90,1.606,91,4.613,92,2.345,93,4.209,94,1.011,95,3.907,96,2.905,97,0.908,98,2.355,99,1.567,100,1.775,101,4.209,102,4.613,103,4.613,104,4.613,105,4.613,106,1.775,107,0.743,108,4.613,109,2.026,110,2.42,111,2.42,112,1.295,113,0.709,114,4.613,115,4.209,116,1.458,117,2.934,118,3.18,119,4.613,120,4.613,121,4.613,122,1.687,123,2.55,124,1.53,125,2.779,126,0.53,127,1.869,128,2.621,129,0.669,130,3.907,131,3.032,132,2.274,133,2.779,134,1.493,135,2.084,136,2.779,137,2.55,138,1.821,139,3.464,140,2.55,141,2.779,142,2.345,143,2.779,144,1.099,145,0.005,146,0.007,147,0.005]],["title/interfaces/ActionItem.html",[0,0.058,69,3.086]],["body/interfaces/ActionItem.html",[0,0.084,1,3.335,2,0.932,3,0.104,4,0.083,5,0.073,6,3.335,7,3.335,8,0.284,9,1.326,10,7.269,11,4.198,12,0.19,13,0.463,14,0.872,15,3.088,16,3.83,18,0.317,19,0.009,20,1.566,21,3.255,22,2.533,23,5.607,24,5.347,25,1.858,26,0.179,27,2.289,28,6.347,29,4.198,30,2.028,31,2.069,32,4.198,33,4.748,34,1.283,35,1.359,36,1.504,37,5.116,38,3.143,39,2.731,40,2.465,41,2.859,42,3.997,43,2.941,44,5.116,45,2.528,46,4.198,47,1.498,48,3.335,49,3.83,50,0.545,51,3.555,52,1.158,53,6.148,54,3.83,55,2.845,56,7.377,57,2.177,58,1.657,59,0.499,60,1.529,61,1.815,62,2.272,63,2.911,64,2.198,65,2.96,66,1.681,67,3.277,68,5.116,69,5.579,70,5.607,71,1.983,72,0.927,73,2.921,74,6.739,75,0.481,76,2.214,77,0.097,78,2.606,79,2.533,80,1.69,81,4.211,82,1.859,83,3.118,84,0.625,85,3.422,86,1.905,87,2.764,88,5.607,89,1.747,90,1.461,91,4.198,92,2.133,93,6.148,94,0.966,95,4.748,96,3.292,97,1.104,98,2.66,99,1.905,100,2.157,101,5.116,102,5.607,103,5.607,104,5.607,105,5.607,106,2.157,107,0.904,108,5.607,109,2.463,110,2.941,111,2.941,112,1.574,113,0.751,114,5.607,115,5.116,116,1.772,117,3.075,118,3.173,119,5.607,120,5.607,121,6.739,122,1.535,123,2.397,124,1.392,125,2.528,126,0.498,127,1.701,128,2.463,129,0.609,130,3.555,131,2.85,132,2.069,133,2.528,134,1.359,135,1.896,136,2.528,137,2.397,138,1.657,139,3.255,140,2.397,141,2.528,142,2.133,143,2.528,144,1,145,0.005,146,0.006,147,0.005]],["title/components/ActionMenuComponent.html",[148,0.309,149,1.805]],["body/components/ActionMenuComponent.html",[1,6.006,3,0.076,4,0.061,5,0.053,8,0.36,9,1.684,10,7.335,12,0.139,13,0.372,14,0.751,15,3.231,16,5.704,18,0.314,19,0.009,20,1.597,24,4.514,25,1.84,26,0.076,28,5.984,30,1.944,34,0.927,36,1.072,39,1.824,40,2.695,41,3.065,42,3.992,45,2.711,50,0.917,51,3.811,52,0.837,54,5.704,55,3.015,57,1.356,59,0.698,60,1.128,61,1.457,63,2.78,65,1.977,66,1.455,67,1.923,68,4.106,69,6.349,72,0.881,73,1.688,75,0.387,77,0.041,83,1.872,84,0.67,92,3.591,93,5.356,94,1.127,96,2.746,107,1.116,113,0.803,117,1.824,118,1.977,123,2.793,126,0.473,128,1.977,129,0.979,130,4.972,136,3.936,137,1.311,140,2.509,145,0.003,146,0.005,147,0.003,148,0.497,149,2.728,150,1.124,151,1.042,152,2.09,153,1.068,154,1.386,155,7.216,156,7.216,157,3.068,158,5.099,159,5.099,160,5.099,161,2.935,162,5.099,163,3.576,164,1.977,165,1.386,166,1.705,167,1.806,168,1.977,169,6.039,170,1.492,171,5.099,172,1.568,173,7.404,174,6.039,175,3.21,176,3.21,177,3.21,178,0.744,179,5.099,180,5.099,181,5.099,182,5.099,183,5.099,184,5.099,185,1.606,186,6.039,187,6.039,188,2.218,189,7.084,190,6.039,191,6.039,192,0.91,193,5.099,194,2.073,195,1.902,196,1.809,197,5.099,198,0.578,199,3.476,200,1.606,201,2.613,202,5.099,203,3.476,204,5.099,205,2.439,206,3.476,207,3.476,208,3.768,209,7.404,210,3.476,211,5.099,212,3.476,213,1.108,214,1.611,215,0.911,216,2.091,217,5.099,218,3.476,219,3.828,220,3.536,221,2.894,222,2.318,223,5.099,224,3.476,225,2.033,226,5.099,227,1.923,228,4.5,229,2.711,230,5.099,231,3.476,232,5.099,233,3.476,234,2.523,235,5.099,236,3.476,237,4.5,238,4.106,239,5.099,240,2.153,241,1.072,242,3.536,243,3.476,244,3.476,245,0.93,246,1.824,247,3.476,248,2.148,249,3.476,250,3.476,251,5.099,252,2.218,253,3.476,254,3.476,255,3.476,256,3.476,257,3.476,258,3.476,259,3.476,260,3.476,261,3.536,262,6.653,263,3.476,264,3.476,265,6.653,266,3.476,267,3.476,268,2.613,269,5.099,270,0.317,271,0.354,272,3.068,273,3.476,274,5.099,275,3.476,276,7.651,277,3.476,278,0.601,279,3.476,280,5.099,281,3.476,282,5.099,283,3.476,284,0.754,285,3.476,286,3.476,287,3.21,288,3.476,289,3.476,290,3.476,291,3.476,292,3.476,293,3.476,294,5.099,295,5.099,296,6.039,297,3.476,298,3.476,299,3.476,300,3.476,301,3.476,302,3.476,303,3.476,304,3.476,305,5.099,306,3.476,307,5.099,308,3.476,309,3.476,310,3.476,311,3.476,312,3.476,313,3.476,314,1.276,315,5.099,316,3.476,317,3.476,318,3.476,319,1.151,320,1.15,321,1.206,322,1.18,323,3.079,324,1.609,325,1.609,326,1.068,327,1.122,328,1.422,329,2.361,330,1.042,331,1.468,332,1.609,333,1.348,334,1.609,335,0.924,336,1.609,337,1.276,338,1.812,339,1.311,340,3.079,341,1.211,342,1.311,343,1.348,344,0.882,345,1.211,346,1.426,347,0.803,348,1.609,349,1.468,350,1.348,351,2.275,352,1.609,353,1.348,354,2.361,355,1.311,356,1.609,357,1.426,358,1.095,359,1.609,360,1.276,361,1.684,362,1.468,363,1.068,364,1.122,365,1.426,366,1.243,367,0.803,368,1.017,369,0.97,370,1.609,371,1.311,372,1.559,373,1.609,374,1.276,375,1.512,376,1.609]],["title/classes/ActivityPromiseResolver.html",[77,0.052,377,2.645]],["body/classes/ActivityPromiseResolver.html",[0,0.09,3,0.116,4,0.093,5,0.081,8,0.45,12,0.212,14,0.653,18,0.303,19,0.009,26,0.165,34,1.047,50,0.781,57,1.813,58,3.24,60,0.989,66,1.635,75,0.474,77,0.09,81,4.998,84,1.083,122,2.434,145,0.008,146,0.007,147,0.005,178,0.995,192,0.694,195,2.507,208,2.453,213,0.896,214,1.4,215,0.737,216,2.797,225,3.006,245,0.966,278,0.659,328,2.532,347,1.902,377,4.786,378,1.588,379,4.533,380,4.533,381,3.959,382,5.49,383,4.782,384,5.49,385,4.248,386,2.806,387,3.625,388,5.096,389,3.939,390,4.782,391,2.797,392,2.879,393,5.46,394,5.288,395,6.072,396,1.038,397,6.072,398,6.819,399,5.298,400,5.867,401,5.298,402,3.571,403,2.879,404,6.411,405,5.951,406,4.998,407,5.614,408,2.117,409,6.411,410,6.633,411,3.362,412,5.277,413,6.633,414,6.411,415,5.49,416,5.298,417,5.277,418,5.277,419,5.288,420,6.072,421,6.072,422,4.782,423,4.266,424,4.266,425,1.858,426,4.266,427,5.49,428,5.49,429,4.266,430,4.266]],["title/classes/ActivityReporter.html",[77,0.052,431,2.037]],["body/classes/ActivityReporter.html",[3,0.112,4,0.09,5,0.079,8,0.443,12,0.205,14,0.801,18,0.308,19,0.009,26,0.112,34,1.208,39,2.813,50,0.851,57,1.975,58,3.207,59,0.877,62,2.389,64,1.576,65,3.162,72,0.975,75,0.476,77,0.061,84,0.878,106,2.268,109,3.241,122,2.156,145,0.005,146,0.007,147,0.005,178,0.975,192,0.867,208,3.092,213,1.173,214,1.792,215,0.904,216,2.104,270,0.319,278,0.573,284,0.879,328,2.332,347,1.883,358,2.103,377,5.118,378,1.538,379,5.189,380,5.189,385,3.641,386,2.539,389,4.035,400,5.722,405,4.992,406,3.401,407,4.955,408,2.169,417,4.427,418,3.401,431,3.092,432,4.528,433,6.679,434,6.679,435,3.194,436,2.589,437,6.249,438,4.992,439,2.003,440,3.304,441,6.679,442,6.679,443,6.523,444,5.378,445,5.378,446,5.378,447,3.51,448,5.378,449,5.378,450,6.333,451,0.958,452,4.528,453,5.131,454,2.389,455,3.092,456,8.156,457,2.103,458,6.679,459,5.895,460,5.378,461,5.378,462,5.131,463,6.732,464,5.378,465,6.333,466,5.378,467,5.131,468,5.378,469,5.131,470,5.378,471,5.378,472,5.131,473,4.335,474,6.567,475,4.684,476,4.992,477,5.378,478,5.131,479,5.131,480,1.788,481,4.131,482,7.426,483,7.426,484,5.979,485,6.679,486,6.679,487,6.679,488,6.679,489,6.679,490,5.131,491,6.554,492,5.131,493,5.131,494,5.131,495,5.131,496,5.131,497,5.131]],["title/interfaces/ActivityResponse.html",[0,0.058,422,3.086]],["body/interfaces/ActivityResponse.html",[0,0.094,2,1.11,3,0.124,4,0.099,5,0.087,8,0.338,12,0.226,13,0.519,14,0.781,18,0.297,19,0.009,26,0.17,34,0.87,50,0.815,57,1.893,58,3.165,60,1.058,66,1.462,75,0.481,77,0.085,81,4.717,84,1.105,122,2.298,145,0.008,146,0.007,147,0.006,195,2.241,208,2.623,225,3.102,245,1.298,278,0.652,328,2.523,347,2.067,377,4.278,379,3.406,380,3.406,381,4.235,382,4.563,383,3.974,384,4.563,385,4.265,386,2.812,387,3.012,388,4.235,389,3.521,390,3.974,391,2.324,392,2.393,393,5.157,394,4.991,395,5.73,397,4.563,400,5.688,402,3.192,403,2.393,404,5.73,405,5.319,406,4.717,407,5.637,408,1.893,409,5.73,410,6.571,411,3.005,412,4.717,413,6.571,414,5.73,415,4.563,417,5.157,418,5.157,419,4.991,420,5.73,421,5.73,422,5.456,423,5.73,424,4.563,425,1.897,426,4.563,427,5.73,428,5.73,429,4.563,430,4.563,498,5.667]],["title/components/BannerActivityReporterComponent.html",[148,0.309,326,1.352]],["body/components/BannerActivityReporterComponent.html",[3,0.093,4,0.075,5,0.066,8,0.404,12,0.171,13,0.431,14,0.793,18,0.312,19,0.009,21,4.065,26,0.093,30,1.966,34,0.908,39,2.116,57,1.802,58,3.044,59,0.928,60,0.8,63,1.348,65,2.293,72,0.863,75,0.487,77,0.051,84,0.961,94,0.578,97,0.744,99,2.3,106,2.857,107,0.841,109,2.627,111,1.982,122,1.382,126,0.531,129,0.867,145,0.004,146,0.006,147,0.004,148,0.476,149,1.756,150,1.304,151,1.284,153,1.316,154,1.707,165,1.707,166,1.74,167,1.85,170,1.731,172,0.839,178,0.863,185,1.863,192,0.908,194,2.322,198,0.514,208,1.982,213,1.162,214,1.766,215,0.944,216,1.756,245,1.333,270,0.477,271,0.436,319,1.418,320,1.334,321,1.399,322,1.454,323,3.384,324,1.982,325,1.982,326,2.246,327,2.777,328,2.532,329,2.738,330,1.284,331,1.808,332,1.982,333,1.66,334,1.982,335,1.139,336,1.982,337,1.572,338,1.991,339,1.615,340,3.384,341,1.492,342,1.615,343,1.66,344,1.086,345,1.492,346,1.756,347,1.772,348,1.982,349,1.808,350,1.66,351,2.438,352,1.982,353,1.66,354,2.738,355,1.615,356,1.982,357,1.756,358,2.416,359,1.982,360,1.572,361,1.89,362,1.808,363,1.316,364,1.382,365,1.756,366,1.531,367,0.989,368,1.253,369,1.194,370,1.982,371,1.615,372,1.921,373,1.982,374,1.572,375,1.863,376,1.982,377,4.394,379,5.214,386,2.625,389,2.926,400,5.826,406,2.838,407,4.269,408,1.573,417,3.921,418,2.838,431,3.894,437,4.421,443,5.929,444,4.763,445,4.763,446,4.763,447,3.163,448,5.886,449,5.886,450,6.548,451,1.105,455,3.138,460,5.457,461,3.448,463,5.457,464,3.448,465,4.763,466,3.448,468,3.448,470,3.448,471,5.457,473,3.145,474,4.763,475,5.971,476,3.2,477,5.457,499,6.984,500,3.448,501,5.221,502,2.088,503,0.955,504,5.221,505,4.269,506,7.311,507,7.311,508,3.794,509,7.672,510,3.779,511,3.451,512,5.916,513,3.669,514,5.916,515,3.405,516,4.282,517,7.311,518,4.282,519,4.282,520,4.282,521,4.282,522,4.282,523,5.221,524,1.611,525,2.653,526,3.254,527,3.779,528,3.779,529,3.779,530,3.779,531,3.779,532,3.779,533,4.282,534,4.282,535,3.779,536,3.448,537,1.958,538,4.282,539,3.779,540,6.452,541,7.311,542,6.452,543,2.194]],["title/classes/BannerActivityReporterWidgetObject.html",[77,0.052,544,3.544]],["body/classes/BannerActivityReporterWidgetObject.html",[3,0.108,4,0.087,5,0.076,8,0.481,12,0.198,13,0.475,14,0.82,18,0.316,19,0.009,25,1.894,26,0.108,34,0.759,35,1.413,57,1.315,59,0.814,66,1.498,71,1.894,72,1.065,75,0.504,77,0.059,80,1.734,94,0.668,107,0.703,124,2.269,126,0.511,129,1.096,134,1.863,142,2.218,145,0.005,146,0.008,147,0.005,148,0.566,153,2.003,166,1.395,167,1.339,178,0.952,188,2.836,192,0.92,198,0.766,200,1.557,201,3.341,213,1.159,214,1.759,215,0.926,216,2.992,245,0.902,270,0.406,278,0.587,321,2.12,326,1.52,327,2.105,328,2.389,367,1.911,378,1.483,391,3.18,396,0.969,411,2.088,425,1.116,455,3.377,475,5.115,499,6.664,503,1.052,505,4.595,526,3.588,544,5.25,545,6.664,546,3.982,547,4.415,548,3.877,549,1.541,550,2.992,551,4.122,552,2.828,553,3.877,554,4.107,555,4.107,556,3.877,557,4.107,558,4.107,559,4.107,560,7.295,561,7.295,562,4.946,563,2.629,564,3.278,565,2.365,566,1.679,567,2.629,568,1.557,569,2.629,570,2.447,571,2.629,572,2.629,573,3.397,574,4.804,575,3.278,576,2.534,577,3.466,578,1.908,579,3.466,580,2.528,581,4.486,582,3.836,583,3.738,584,2.609,585,2.629,586,2.866,587,4.4,588,3.278,589,2.629,590,3.278,591,2.218,592,2.702,593,2.925,594,3.341,595,2.629,596,3.278,597,2.836,598,2.447,599,2.629,600,3.278,601,2.629,602,2.629,603,3.278,604,1.769,605,1.637,606,2.629,607,2.629,608,3.278,609,2.629,610,2.629,611,3.278,612,2.629,613,3.341,614,2.534,615,2.629,616,2.365,617,2.447,618,2.629,619,1.557,620,3.466,621,2.629,622,3.278,623,1.347,624,2.629,625,4.365,626,4.946,627,4.365,628,4.946,629,4.946,630,4.946,631,4.946,632,4.365,633,2.365,634,4.365,635,4.365,636,4.946,637,4.946,638,4.946]],["title/classes/BaseFormControl.html",[77,0.052,639,2.772]],["body/classes/BaseFormControl.html",[3,0.1,4,0.08,5,0.071,8,0.483,12,0.184,13,0.452,14,0.753,18,0.317,19,0.009,26,0.1,45,3.301,52,1.044,59,0.906,62,2.221,75,0.475,77,0.055,82,2.204,83,2.28,94,1.153,96,3.049,97,1.079,98,2.164,99,2.43,107,1.228,113,0.652,126,0.487,129,1.006,132,3.604,145,0.005,146,0.006,147,0.005,148,0.436,178,0.906,185,1.955,188,2.701,192,0.922,198,0.72,213,1.065,214,1.615,215,0.896,270,0.469,271,0.468,278,0.549,284,0.468,322,2.752,347,1.872,351,2.833,378,2.108,438,4.641,451,0.858,524,1.691,550,2.328,639,3.911,640,7.307,641,3.701,642,3.431,643,3.072,644,6.21,645,6.21,646,3.859,647,6.21,648,2.005,649,2.28,650,4.969,651,6.21,652,1.651,653,7.032,654,5.255,655,5.255,656,2.899,657,5.255,658,5.878,659,5.255,660,4.641,661,4.641,662,4.641,663,4.641,664,5.255,665,4.931,666,5.255,667,3.645,668,7.032,669,7.032,670,5.48,671,6.107,672,6.21,673,4.597,674,4.597,675,5.628,676,4.597,677,2.97,678,4.354,679,3.431,680,4.641,681,2.056,682,4.597,683,2.701,684,5.628,685,4.597,686,4.641,687,4.641,688,5.684,689,4.968,690,4.597,691,4.641,692,4.597,693,4.641,694,4.354,695,4.597,696,4.354,697,4.641,698,4.597,699,2.355,700,5.628,701,4.597,702,5.628,703,2.475,704,4.641,705,2.97,706,4.597,707,3.732,708,3.574,709,3.574,710,4.597,711,2.97,712,4.597,713,1.503,714,4.597,715,4.641,716,2.005,717,4.057,718,4.597,719,6.21,720,4.597,721,4.597,722,4.597,723,4.597,724,5.48,725,1.522,726,3.431,727,3.223,728,2.763,729,3.047,730,4.597,731,2.895,732,4.597,733,1.105,734,4.057,735,4.597,736,4.597,737,3.223,738,4.597,739,6.21,740,4.597,741,4.597,742,4.597,743,4.597,744,4.597,745,4.597,746,4.597,747,4.597,748,4.597,749,3.435]],["title/components/BoldTextRendererComponent.html",[148,0.309,330,1.32]],["body/components/BoldTextRendererComponent.html",[0,0.073,3,0.119,4,0.096,5,0.084,8,0.327,12,0.219,18,0.27,19,0.009,26,0.167,30,1.357,50,0.923,52,0.759,55,1.958,60,1.023,63,1.724,72,1.32,75,0.418,77,0.065,89,2.812,107,0.991,113,0.731,126,0.6,145,0.005,146,0.007,147,0.005,148,0.606,149,2.246,150,1.535,151,2.417,153,1.682,154,2.183,165,2.183,166,1.774,167,1.894,185,2.193,192,0.558,196,1.811,215,0.9,248,2.249,270,0.477,271,0.558,278,0.508,319,1.813,320,1.571,321,1.647,322,1.86,323,3.731,324,2.535,325,2.535,326,1.682,327,1.768,328,1.942,329,3.224,330,2.623,331,3.649,332,2.535,333,2.123,334,2.535,335,1.456,336,2.535,337,2.011,338,2.195,339,2.066,340,3.731,341,1.908,342,2.066,343,2.123,344,1.389,345,1.908,346,2.246,347,1.265,348,2.535,349,2.312,350,2.123,351,2.614,352,2.535,353,2.123,354,3.224,355,2.066,356,2.535,357,2.246,358,1.724,359,2.535,360,2.011,361,2.136,362,2.312,363,1.682,364,1.768,365,2.246,366,1.958,367,1.265,368,1.602,369,1.527,370,2.535,371,2.066,372,2.456,373,2.535,374,2.011,375,2.382,376,2.535,396,1.579,454,1.958,652,1.852,750,4.884,751,4.093,752,3.413,753,3.141,754,1.989,755,2.776,756,2.038,757,6.49,758,2.249,759,1.99,760,2.856,761,2.889,762,4.387,763,6.147,764,6.759,765,3.988,766,5.476,767,2.456,768,1.958,769,5.205,770,2.536,771,2.806,772,2.806,773,4.093,774,4.833,775,4.833,776,4.093,777,4.409,778,4.833,779,4.833]],["title/interfaces/BoldTextRendererConfig.html",[0,0.058,765,2.177]],["body/interfaces/BoldTextRendererConfig.html",[0,0.083,2,1.23,3,0.137,4,0.11,5,0.097,8,0.375,12,0.251,13,0.553,18,0.299,19,0.009,26,0.178,30,1.879,50,0.969,52,0.871,55,2.246,72,1.338,75,0.462,77,0.075,89,2.785,107,1.079,113,0.659,145,0.006,146,0.008,147,0.006,148,0.594,151,2.274,166,1.201,167,1.29,196,1.485,248,2.028,270,0.507,271,0.64,278,0.553,330,2.596,331,3.656,396,1.485,454,2.246,652,1.671,750,4.405,751,4.695,752,3.341,753,3.11,754,1.97,755,2.504,756,1.838,757,6.106,758,2.028,759,1.794,760,2.576,761,2.766,762,3.957,763,5.544,764,5.544,765,4.185,767,2.818,768,2.246,769,5.668,770,2.697,771,3.219,772,3.219,773,5.668,774,6.693,775,6.693,776,4.695,777,5.058,778,5.544,779,5.544]],["title/classes/BoldTextRendererWidgetObject.html",[77,0.052,780,3.544]],["body/classes/BoldTextRendererWidgetObject.html",[3,0.106,4,0.085,5,0.075,8,0.492,12,0.195,13,0.471,14,0.818,18,0.317,19,0.009,25,1.882,26,0.141,34,0.749,35,1.393,50,0.74,52,0.676,57,1.297,59,0.809,66,1.488,71,1.882,72,1.306,75,0.503,77,0.077,80,1.718,107,0.694,124,2.257,126,0.605,129,1.093,134,1.846,142,2.188,145,0.005,146,0.008,147,0.005,148,0.563,153,1.985,166,1.386,167,1.327,178,0.943,188,2.811,192,0.907,198,0.764,200,1.536,201,3.311,213,1.156,214,1.754,215,0.923,216,2.971,245,0.889,270,0.48,271,0.497,278,0.562,284,0.497,321,2.116,330,1.937,331,3.388,367,1.904,378,1.463,391,3.163,396,0.955,411,2.06,425,1.634,503,1.169,526,3.579,547,4.406,548,3.851,549,1.527,550,2.987,551,4.1,552,2.809,553,3.851,554,4.07,555,4.07,556,4.1,557,4.07,558,4.07,559,4.07,563,2.593,564,3.233,565,2.333,566,1.656,567,2.593,568,1.536,569,2.593,570,2.413,571,2.593,572,2.593,573,3.391,574,4.797,575,3.233,576,2.499,577,3.435,578,1.891,579,3.435,580,2.505,581,4.471,582,3.815,583,3.712,584,2.591,585,2.593,586,2.856,587,4.383,588,3.233,589,2.593,590,3.233,591,2.188,592,2.796,593,2.898,594,3.311,595,2.593,596,3.233,597,2.811,598,2.413,599,2.593,600,3.233,601,2.593,602,2.593,603,3.233,604,1.744,605,1.615,606,2.593,607,2.593,608,3.233,609,2.593,610,2.593,611,3.233,612,2.593,613,3.311,614,2.499,615,2.593,616,2.333,617,2.413,618,2.593,619,1.536,620,3.435,621,2.593,622,3.233,623,1.328,624,2.593,716,1.575,731,3.073,750,5.08,754,1.678,761,2.619,780,5.202,781,3.928,782,4.878,783,4.878,784,3.646,785,4.878,786,3.928,787,4.305,788,4.305,789,3.928,790,3.42,791,3.42,792,1.656,793,3.928,794,4.878,795,4.878,796,4.878,797,2.333,798,4.878,799,6.461,800,4.878,801,4.878,802,4.878]],["title/interfaces/Button.html",[0,0.058,73,1.457]],["body/interfaces/Button.html",[0,0.111,2,0.764,3,0.085,4,0.068,5,0.06,8,0.233,9,2.148,12,0.156,13,0.511,14,0.531,15,2.647,18,0.312,19,0.009,20,1.06,21,3.596,22,2.955,26,0.186,27,2.104,30,2.041,34,0.99,35,1.114,36,1.355,38,1.93,39,2.946,40,2.614,43,1.806,47,2.03,50,0.943,52,1.221,55,2.754,57,1.038,58,1.931,59,0.582,60,0.729,61,1.114,64,1.199,65,2.149,66,1.324,67,2.796,72,1.124,73,2.986,75,0.481,76,1.931,77,0.094,78,1.6,79,1.555,82,1.622,84,1.012,89,2.909,90,1.199,94,0.947,97,0.678,98,1.359,100,2.383,110,1.806,112,1.963,113,0.778,116,1.088,117,2.51,118,3.071,122,1.26,123,3.324,124,1.622,125,2.074,126,0.505,127,2.895,128,2.149,129,0.709,131,1.75,132,3.225,133,2.074,134,1.841,135,1.555,136,2.074,137,2.091,139,1.999,141,2.946,143,2.074,145,0.004,146,0.006,147,0.004,148,0.568,150,0.86,161,2.245,192,0.564,194,1.142,195,1.229,196,1.821,198,0.56,200,1.229,208,3.249,219,3.19,222,1.931,225,1.555,234,3.189,240,1.647,246,1.982,270,0.437,278,0.404,284,0.564,320,1.672,330,1.17,367,0.901,369,1.088,386,1.26,396,1.263,408,1.038,425,1.672,439,2.104,451,0.729,454,1.395,502,1.114,503,1.04,515,3.19,524,1.755,566,1.325,619,1.229,643,1.93,648,1.789,681,1.292,703,1.555,713,0.944,752,1.6,754,2.324,755,2.569,756,1.142,758,2.081,759,2.005,760,2.273,761,2.749,765,1.93,768,1.395,770,2.454,792,1.325,803,2.074,804,2.074,805,3.331,806,2.156,807,3.13,808,2.986,809,3.875,810,3.04,811,3.561,812,4.039,813,2.84,814,2.34,815,3.731,816,1.647,817,1.647,818,3.303,819,1.555,820,1.199,821,1.512,822,1.433,823,1.931,824,1.6,825,1.474,826,1.931,827,2.134,828,2.273,829,3.878,830,3.875,831,3.71,832,2.84,833,1.433,834,2.445,835,2.651,836,2.499,837,3.875,838,3.472,839,4.219,840,3.062,841,2.345,842,2.209,843,2.273,844,2.21,845,2.345,846,2.569,847,2.345,848,2.345,849,1.647,850,1.647,851,1.999,852,1.555,853,1.647,854,2.245,855,2.84,856,1.745,857,2.345,858,2.155,859,2.273,860,2.721,861,1.292,862,2.431,863,1.359,864,1.647,865,2.345,866,2.035,867,3.875,868,3.331,869,3.331,870,3.331,871,1.509,872,2.345,873,2.345,874,2.134,875,2.345,876,3.062,877,1.745,878,1.647,879,1.325,880,1.93,881,1.806,882,2.345,883,2.155,884,2.345,885,2.155,886,1.229,887,1.395,888,2.345,889,1.292,890,2.345,891,2.074,892,1.555,893,2.245,894,2.345,895,2.345,896,1.512,897,1.697,898,2.245,899,2.155,900,2.345,901,1.512,902,2.245,903,2.345,904,3.062,905,1.114,906,1.395,907,1.999,908,2.074,909,3.331,910,2.345,911,1.866,912,1.806,913,1.6,914,2.245,915,1.6,916,1.999,917,1.6,918,1.647,919,1.6,920,1.697,921,1.93,922,1.999,923,1.93,924,1.999,925,1.999,926,1.697,927,2.245]],["title/interfaces/ButtonConfig.html",[0,0.058,852,1.754]],["body/interfaces/ButtonConfig.html",[0,0.109,2,0.77,3,0.086,4,0.069,5,0.06,8,0.234,9,2.214,12,0.157,13,0.513,14,0.674,15,2.656,18,0.311,19,0.009,20,1.065,21,3.607,22,2.963,26,0.186,27,2.111,30,1.967,34,0.994,35,1.122,36,1.36,38,1.944,39,3.026,40,2.701,43,1.819,47,2.038,50,0.945,52,1.173,55,2.761,57,1.045,58,1.941,59,0.585,60,0.734,61,1.122,64,1.207,65,2.159,66,1.329,67,2.101,72,1.085,73,2.92,75,0.47,76,1.369,77,0.077,78,1.611,79,1.566,82,1.63,84,1.015,89,2.915,90,1.207,94,0.95,97,0.683,98,1.369,100,2.391,110,1.819,112,1.842,113,0.78,116,1.096,117,2.518,118,3.077,122,1.268,123,3.377,124,1.63,125,2.088,126,0.507,127,2.901,128,2.159,129,0.713,131,1.762,132,2.423,133,2.088,134,1.849,135,1.566,136,2.088,137,2.101,139,2.013,141,3.44,143,2.088,145,0.004,146,0.006,147,0.004,148,0.569,150,0.866,161,2.261,192,0.567,194,1.15,195,1.237,196,1.825,198,0.562,200,1.237,208,3.259,219,3.724,222,1.941,225,1.566,234,3.201,240,1.659,246,1.992,270,0.438,278,0.406,284,0.567,320,1.677,330,1.178,367,0.907,369,1.096,386,1.268,396,1.267,408,1.045,425,1.741,439,2.111,451,0.734,454,1.405,502,1.122,503,1.044,515,2.261,524,1.762,566,1.334,619,1.237,643,1.944,648,1.798,681,1.301,703,1.566,713,0.951,752,1.611,754,2.325,755,2.579,756,1.15,758,2.089,759,2.011,760,2.284,761,2.754,765,1.944,768,1.405,770,2.461,792,1.334,803,2.088,804,2.088,805,2.362,806,2.163,807,3.138,808,2.509,809,3.348,810,3.048,811,3.575,812,4.052,813,2.013,814,1.659,815,3.44,816,1.659,817,1.659,818,3.316,819,1.566,820,1.207,821,1.523,822,1.443,823,1.941,824,1.611,825,1.481,826,1.941,827,2.142,828,2.284,829,3.89,830,3.89,831,3.724,832,2.854,833,1.443,834,2.453,835,2.658,836,2.509,837,3.89,838,3.819,839,4.64,840,3.89,841,2.362,842,2.22,843,2.284,844,2.341,845,2.362,846,3.233,847,2.362,848,2.362,849,1.659,850,1.659,851,2.854,852,2.22,853,2.973,854,3.206,855,2.854,856,1.754,857,2.362,858,2.171,859,2.284,860,2.729,861,1.301,862,2.441,863,1.369,864,1.659,865,2.362,866,2.045,867,3.89,868,3.348,869,3.348,870,3.348,871,1.517,872,2.362,873,2.362,874,2.142,875,2.362,876,3.077,877,1.754,878,1.659,879,1.334,880,1.944,881,1.819,882,2.362,883,2.171,884,2.362,885,2.171,886,1.237,887,1.405,888,2.362,889,1.301,890,2.362,891,2.088,892,1.566,893,2.261,894,2.362,895,2.362,896,1.523,897,1.709,898,2.261,899,2.171,900,2.362,901,1.523,902,2.261,903,2.362,904,3.077,905,1.122,906,1.405,907,2.013,908,2.088,909,3.348,910,2.362,911,1.879,912,1.819,913,1.611,914,2.261,915,1.611,916,2.013,917,1.611,918,1.659,919,1.611,920,1.709,921,1.944,922,2.013,923,1.944,924,2.013,925,2.013,926,1.709,927,2.261]],["title/classes/Bytes.html",[77,0.052,928,3.544]],["body/classes/Bytes.html",[3,0.084,4,0.068,5,0.06,8,0.471,12,0.155,13,0.402,14,0.757,18,0.314,19,0.009,20,1.228,25,2.275,26,0.12,34,1.074,48,2.714,62,2.747,71,1.995,75,0.48,77,0.066,83,3.062,84,1.081,107,0.995,113,0.848,126,0.71,129,1.052,145,0.004,146,0.005,147,0.004,172,1.653,178,0.804,192,0.93,198,0.81,213,1.195,214,1.623,215,0.873,222,2.236,227,2.788,241,0.814,245,1.348,278,0.51,284,0.561,361,2.618,378,1.16,436,2.711,447,3.539,480,1.349,503,0.89,526,3.654,549,2.106,591,1.736,646,4.273,709,2.228,733,1.315,755,2.788,797,3.345,838,3.656,879,2.375,928,6.364,929,2.565,930,5.545,931,3.446,932,5.664,933,6.418,934,5.765,935,6.418,936,2.551,937,4.864,938,4.864,939,5.182,940,5.182,941,6.185,942,5.847,943,5.847,944,5.387,945,4.904,946,5.542,947,4.635,948,5.239,949,3.871,950,3.871,951,6.993,952,3.871,953,3.871,954,2.097,955,3.871,956,3.871,957,3.871,958,3.871,959,3.871,960,3.871,961,3.871,962,3.871,963,3.871,964,3.871,965,3.871,966,3.871,967,3.416,968,3.416,969,2.893,970,2.893,971,3.871,972,3.871,973,3.871,974,5.182,975,5.695,976,3.416,977,2.551,978,5.413,979,3.221,980,4.433,981,4.464,982,4.05,983,3.864,984,3.864,985,2.551,986,3.864,987,5.182,988,3.416,989,3.416,990,2.632,991,4.5,992,3.416,993,3.416,994,4.5,995,5.449,996,3.416,997,3.416,998,3.416,999,3.242,1000,5.091,1001,5.091,1002,5.387,1003,4.5,1004,3.416,1005,4.254,1006,2.632,1007,2.893,1008,2.893,1009,2.893,1010,2.893,1011,2.893,1012,2.893,1013,2.893,1014,2.714,1015,1.792,1016,1.5,1017,3.864,1018,3.864,1019,3.864,1020,2.714,1021,2.714,1022,2.565,1023,2.714,1024,2.714,1025,2.714,1026,3.864,1027,3.864,1028,2.714]],["title/interfaces/CanBeReadOnly.html",[0,0.058,654,3.289]],["body/interfaces/CanBeReadOnly.html",[0,0.107,2,1.367,3,0.152,4,0.122,5,0.107,8,0.416,12,0.279,13,0.588,18,0.246,19,0.009,26,0.152,60,1.507,94,1.149,97,1.402,145,0.007,146,0.008,147,0.007,150,1.537,566,2.74,646,3.575,654,6.03,665,6.138,731,4.395,896,2.705,1029,6.158,1030,6.158,1031,4.015,1032,8.069,1033,5.082,1034,8.069,1035,7.121,1036,8.069,1037,6.497]],["title/interfaces/CliptextConfig.html",[0,0.058,818,2.255]],["body/interfaces/CliptextConfig.html",[0,0.055,2,0.807,3,0.09,4,0.072,5,0.063,8,0.246,9,1.607,12,0.165,13,0.42,14,0.751,18,0.254,19,0.009,25,1.07,26,0.157,27,1.727,30,1.875,36,0.867,38,2.039,50,0.472,52,0.92,59,0.927,72,0.969,77,0.049,80,1.532,82,1.206,84,0.757,86,1.236,94,0.971,96,3.12,97,0.716,99,1.991,100,2.255,106,1.4,107,0.586,113,0.433,116,1.149,126,0.614,144,1.211,145,0.004,146,0.006,147,0.004,152,2.477,153,1.266,164,1.598,166,0.788,167,0.846,172,1.301,194,2.441,195,1.298,196,1.57,200,2.264,221,1.793,227,1.555,241,1.648,252,3.903,270,0.256,271,0.42,278,0.616,284,0.82,320,0.93,321,1.789,322,2.662,374,2.115,375,1.793,439,1.236,457,1.298,480,1.436,524,1.569,549,0.974,584,2.06,586,1.4,598,2.039,601,2.191,605,1.364,648,1.331,652,1.096,713,0.997,749,5.655,755,2.296,792,1.956,818,3.403,820,2.325,832,2.952,844,2.383,859,2.363,866,2.115,874,1.364,886,1.298,887,1.474,904,4.331,905,1.646,906,2.878,907,2.112,908,4.167,954,2.269,982,2.112,1038,2.277,1039,2.596,1040,2.173,1041,3.669,1042,5.347,1043,3.609,1044,2.584,1045,2.296,1046,2.115,1047,4.402,1048,5.374,1049,4.017,1050,5.655,1051,4.181,1052,5.655,1053,4.322,1054,5.655,1055,3.08,1056,3.319,1057,3.08,1058,3.319,1059,3.319,1060,3.319,1061,2.296,1062,3.08,1063,3.08,1064,3.319,1065,3.319,1066,2.477,1067,5.334,1068,3.319,1069,3.319,1070,1.849,1071,4.638,1072,3.319,1073,3.285,1074,5.347,1075,3.319,1076,4.04,1077,2.636,1078,3.319,1079,3.319,1080,3.319,1081,3.08,1082,3.319,1083,3.08,1084,3.319,1085,5.655,1086,3.319,1087,4.638,1088,3.319,1089,2.755,1090,3.319,1091,5.347,1092,4.638,1093,3.319,1094,4.638,1095,3.319,1096,4.638,1097,2.732,1098,3.319,1099,5.347,1100,3.319,1101,3.319,1102,3.319,1103,4.638,1104,4.638,1105,3.319,1106,3.319,1107,4.04,1108,3.319,1109,3.319,1110,3.319,1111,3.319,1112,3.319,1113,5.347,1114,3.319,1115,3.319,1116,3.319,1117,5.79,1118,3.319,1119,4.638,1120,4.638,1121,3.319,1122,5.347,1123,3.319,1124,3.319,1125,3.319,1126,3.319,1127,3.319,1128,2.667,1129,3.319,1130,3.319,1131,4.638,1132,3.319,1133,4.638,1134,5.79,1135,4.638,1136,4.402,1137,4.638,1138,1.971,1139,4.638,1140,3.319,1141,3.08,1142,3.319,1143,2.89,1144,4.638,1145,3.319,1146,3.319,1147,3.319,1148,3.319,1149,2.732,1150,3.319,1151,2.89,1152,3.08,1153,3.319,1154,3.319,1155,3.319,1156,4.638,1157,5.347,1158,3.319,1159,3.319,1160,3.319,1161,3.319,1162,3.319,1163,4.638,1164,5.79,1165,2.89,1166,2.89,1167,2.89,1168,2.89,1169,6.092,1170,4.638,1171,5.084,1172,3.319,1173,5.79,1174,3.638,1175,3.638,1176,3.319,1177,3.638,1178,3.638,1179,3.319,1180,4.305,1181,3.319,1182,3.638,1183,3.319,1184,3.08,1185,3.638,1186,3.638,1187,3.638,1188,3.638,1189,5.084,1190,3.638,1191,5.084,1192,5.861,1193,3.638,1194,5.084,1195,5.084,1196,3.638,1197,3.638,1198,3.638,1199,3.638,1200,3.638,1201,1.555,1202,3.638,1203,5.861,1204,3.638,1205,3.638,1206,5.084,1207,5.084,1208,2.372,1209,5.084,1210,3.638,1211,3.638,1212,3.638,1213,3.638,1214,3.638,1215,3.638,1216,1.74,1217,3.08,1218,3.638,1219,3.638,1220,3.638,1221,3.638,1222,3.638,1223,5.084,1224,3.638,1225,3.638,1226,3.638,1227,3.319,1228,3.638,1229,3.638,1230,3.319,1231,2.732,1232,1.643,1233,3.319,1234,3.319]],["title/interfaces/ColumnConfigInternal.html",[0,0.058,1235,2.255]],["body/interfaces/ColumnConfigInternal.html",[0,0.094,2,0.415,3,0.046,4,0.037,5,0.033,8,0.126,9,1.567,12,0.29,13,0.371,14,0.61,15,1.663,18,0.25,19,0.009,20,0.664,22,0.845,25,0.551,26,0.164,27,1.041,30,1.705,31,0.923,34,1.113,36,1.649,39,0.758,40,1.814,42,1.014,47,0.668,50,0.876,52,0.611,55,2.91,59,0.761,60,1.127,61,1.82,62,0.758,63,0.668,64,1.854,66,0.713,67,1.31,71,0.902,72,0.507,73,2.673,75,0.428,76,1.21,77,0.052,79,0.845,80,0.923,82,0.621,83,2.064,84,0.67,85,3.291,86,1.809,87,0.923,89,2.808,90,0.652,92,3.477,94,1.046,96,1.346,97,0.885,98,0.739,99,2.123,100,0.72,106,1.908,107,1.173,109,2.179,112,0.525,113,0.722,116,1.229,117,1.242,118,2.339,122,0.685,123,2.596,124,1.016,126,0.683,127,1.242,128,0.822,129,0.815,134,1.455,135,0.845,137,1.663,138,2.22,140,2.12,144,1.447,145,0.003,146,0.003,147,0.002,148,0.509,150,0.765,151,1.527,164,1.346,166,0.406,167,0.713,168,0.822,170,0.621,172,1.568,175,1.127,176,1.127,177,1.127,178,0.643,185,1.093,192,0.216,195,2.23,196,1.427,198,0.383,205,1.014,213,0.739,215,0.476,220,1.127,221,1.51,222,0.739,227,0.8,229,2.708,241,1.398,242,1.845,245,1.413,246,0.758,248,1.423,252,0.923,261,1.127,268,1.087,270,0.451,271,0.216,278,0.641,284,0.85,287,2.708,314,1.275,320,1.149,321,0.821,326,0.652,327,0.685,328,1.229,335,0.564,338,0.578,344,0.538,347,0.802,358,0.668,363,0.652,364,0.685,368,1.016,385,1.607,386,0.685,392,0.895,396,0.68,402,0.951,403,3.229,408,0.923,425,1.149,431,1.607,435,2.108,439,1.685,440,2.52,451,0.396,455,1.607,457,1.388,502,0.992,503,0.56,511,1.917,513,1.66,524,1.643,525,2.285,537,0.702,543,1.087,549,1.042,552,1.346,568,1.093,573,1.31,578,1.766,580,1.346,584,0.758,586,1.497,604,2.378,605,1.998,619,0.668,623,0.945,633,1.014,648,1.121,649,0.779,652,0.564,656,0.758,677,1.014,681,0.702,683,0.923,705,1.014,711,1.014,713,0.513,716,1.121,733,1.26,753,1.808,754,1.839,756,0.621,758,2.389,759,2.022,767,0.951,768,0.758,770,1.86,771,1.779,772,1.779,792,2.258,806,2.518,807,1.466,810,1.424,814,0.895,816,0.895,817,0.895,819,0.845,820,0.652,821,0.822,824,0.87,825,0.564,826,1.536,827,1.459,828,1.808,833,2.339,834,2.733,835,1.242,836,2.179,842,1.384,843,1.808,844,1.388,846,0.845,849,0.895,850,2.151,852,2.24,853,0.895,856,0.668,861,1.459,862,2.508,863,1.536,864,0.895,866,0.779,871,0.945,874,0.702,877,1.388,879,1.497,886,1.093,892,0.845,896,1.975,901,0.822,905,2.371,906,2.532,915,1.424,919,1.808,931,1.557,936,2.601,977,1.607,985,2.358,990,1.808,999,1.424,1006,0.87,1015,0.982,1016,0.822,1040,1.31,1043,1.977,1044,1.557,1046,1.275,1070,0.951,1073,1.049,1089,2.108,1128,0.982,1138,3.291,1201,0.8,1232,0.845,1235,2.88,1236,1.049,1237,2.435,1238,1.917,1239,2.435,1240,2.815,1241,2.61,1242,2.815,1243,1.845,1244,2.343,1245,2.601,1246,1.172,1247,2.01,1248,1.918,1249,0.87,1250,1.845,1251,0.779,1252,2.435,1253,1.918,1254,0.591,1255,1.51,1256,0.951,1257,1.149,1258,3.348,1259,2.88,1260,1.127,1261,2.258,1262,1.087,1263,1.049,1264,1.717,1265,0.982,1266,1.845,1267,2.258,1268,1.087,1269,1.127,1270,0.87,1271,1.127,1272,2.61,1273,1.127,1274,4.214,1275,1.779,1276,1.127,1277,2.343,1278,1.779,1279,2.52,1280,1.917,1281,1.172,1282,1.66,1283,1.172,1284,1.717,1285,1.172,1286,2.815,1287,1.779,1288,1.172,1289,1.172,1290,1.918,1291,1.127,1292,2.708,1293,1.172,1294,2.04,1295,1.779,1296,1.918,1297,1.918,1298,1.918,1299,2.61,1300,2.435,1301,1.014,1302,0.982,1303,1.172,1304,1.172,1305,1.172,1306,0.951,1307,3.105,1308,4.006,1309,2.435,1310,0.87,1311,1.172,1312,1.172,1313,4.161,1314,1.087,1315,2.089,1316,3.52,1317,1.087,1318,1.172,1319,2.258,1320,1.049,1321,0.779,1322,1.172,1323,1.172,1324,2.987,1325,1.172,1326,1.384,1327,2.258,1328,0.822,1329,0.895,1330,2.435,1331,1.557,1332,1.172,1333,1.087,1334,1.918,1335,1.918,1336,1.172,1337,1.172,1338,1.717,1339,1.087,1340,1.172,1341,1.172,1342,1.172,1343,1.845,1344,2.435,1345,1.172,1346,1.172,1347,1.172,1348,1.918,1349,1.172,1350,1.918,1351,1.172,1352,2.435,1353,1.172,1354,1.087,1355,1.087,1356,1.172,1357,1.918,1358,1.172,1359,1.172,1360,1.172,1361,1.172,1362,1.172,1363,1.172,1364,1.127,1365,1.172,1366,1.918,1367,1.172,1368,1.127,1369,1.172,1370,1.808,1371,1.172,1372,2.435,1373,1.845,1374,1.172,1375,1.172,1376,3.334,1377,1.172,1378,1.918,1379,1.172,1380,1.172,1381,1.918,1382,2.435,1383,2.435,1384,1.918,1385,2.435,1386,2.815,1387,1.172,1388,1.918,1389,2.708,1390,1.172,1391,1.918,1392,1.172,1393,1.172,1394,1.172,1395,0.702,1396,1.172,1397,1.172,1398,1.172,1399,1.172,1400,1.172,1401,1.172,1402,1.918,1403,1.918,1404,1.918,1405,1.918,1406,2.435,1407,1.172,1408,1.172,1409,1.172,1410,1.172,1411,1.918,1412,1.918,1413,2.815,1414,1.172,1415,1.172,1416,1.172,1417,1.172,1418,1.918,1419,2.815,1420,2.815,1421,0.895,1422,1.172,1423,2.435,1424,1.172,1425,1.127,1426,1.845,1427,1.172,1428,1.172,1429,1.172,1430,1.172,1431,1.172,1432,1.172,1433,1.172,1434,1.172,1435,1.172,1436,1.172,1437,1.172,1438,1.127,1439,1.172,1440,1.172,1441,1.918,1442,1.172,1443,1.172,1444,1.172,1445,1.087,1446,1.172,1447,1.172,1448,1.172,1449,1.172,1450,1.049,1451,1.172,1452,1.087,1453,1.172,1454,1.172,1455,1.172,1456,1.172,1457,0.951,1458,1.172,1459,1.172,1460,1.172,1461,1.172,1462,1.172,1463,1.172,1464,1.172,1465,1.172,1466,1.172,1467,1.172,1468,1.172,1469,1.172,1470,1.918,1471,1.918,1472,1.918,1473,1.172,1474,2.435,1475,2.815,1476,1.918,1477,1.172,1478,1.172,1479,1.172,1480,1.172,1481,1.172,1482,1.172,1483,1.172,1484,1.087,1485,1.172,1486,1.172,1487,1.172,1488,0.702,1489,1.172,1490,1.172,1491,1.172,1492,1.172,1493,1.172,1494,1.172,1495,2.435,1496,0.982,1497,1.172,1498,1.172,1499,1.172,1500,1.172,1501,1.172,1502,1.172,1503,1.172,1504,1.172,1505,1.172,1506,2.52,1507,1.172,1508,1.172,1509,1.127,1510,1.172,1511,1.172,1512,1.172,1513,1.918,1514,1.172,1515,1.172,1516,1.172,1517,1.172,1518,1.918,1519,1.172,1520,1.172,1521,1.172,1522,1.172,1523,1.172,1524,1.172,1525,1.172,1526,1.172,1527,1.172,1528,1.172,1529,1.172,1530,1.172,1531,1.172,1532,1.172,1533,1.172,1534,1.172,1535,1.127,1536,1.127,1537,1.172,1538,1.172,1539,1.918,1540,1.918,1541,1.557,1542,1.918,1543,1.845,1544,1.172,1545,1.172,1546,1.918,1547,1.172,1548,1.918,1549,1.172,1550,1.172,1551,1.172,1552,1.172,1553,1.172,1554,1.172,1555,1.127,1556,1.172,1557,1.127,1558,1.172,1559,1.172,1560,1.172,1561,1.918,1562,1.172,1563,1.172,1564,1.172,1565,1.172,1566,1.172,1567,1.172,1568,1.172,1569,1.172,1570,1.172,1571,1.172,1572,2.815,1573,2.435,1574,1.172,1575,1.172,1576,1.172,1577,1.172,1578,1.918,1579,1.172,1580,1.172,1581,1.172,1582,1.172,1583,1.172,1584,1.172,1585,1.172,1586,1.918,1587,1.172,1588,1.172,1589,1.172,1590,0.982,1591,1.172,1592,1.172,1593,1.172,1594,1.172,1595,1.172,1596,1.172,1597,1.172,1598,1.172,1599,1.172,1600,1.172,1601,1.172,1602,1.172,1603,1.172,1604,2.815,1605,1.172,1606,1.172,1607,1.172,1608,1.172,1609,1.172,1610,1.172,1611,1.127,1612,1.172,1613,1.172,1614,1.918,1615,1.172,1616,1.918,1617,1.172,1618,1.172,1619,1.918,1620,1.172,1621,1.172,1622,1.172,1623,1.172,1624,1.172,1625,2.435,1626,1.172,1627,1.172,1628,1.172,1629,1.845,1630,1.172,1631,1.172,1632,1.172,1633,1.172,1634,1.172,1635,1.172,1636,1.172,1637,1.172,1638,1.172,1639,1.172,1640,0.982,1641,1.172,1642,1.172,1643,1.172,1644,0.982,1645,1.172,1646,1.172,1647,1.918,1648,3.105,1649,1.014,1650,1.172,1651,1.172,1652,1.172,1653,1.172,1654,1.172,1655,1.172,1656,1.918,1657,1.172,1658,1.172,1659,1.845,1660,1.172,1661,1.087,1662,1.172,1663,1.172,1664,1.172]],["title/interfaces/ColumnRendererSpec.html",[0,0.058,770,1.457]],["body/interfaces/ColumnRendererSpec.html",[0,0.11,2,0.777,3,0.087,4,0.069,5,0.061,8,0.237,9,2.268,12,0.159,13,0.515,15,2.667,18,0.309,19,0.009,20,1.073,21,3.623,22,2.974,26,0.187,27,2.12,30,1.972,34,0.999,35,1.133,36,1.368,38,1.962,39,2.957,40,2.625,43,1.836,47,2.048,50,0.947,52,1.204,55,2.769,57,1.055,58,1.954,59,0.589,60,0.741,61,1.602,64,1.219,65,2.174,66,1.336,67,2.115,72,1.089,73,2.924,75,0.471,76,1.382,77,0.077,78,1.627,79,1.581,82,1.641,84,1.018,89,2.923,90,1.219,94,0.954,97,0.689,98,1.382,100,2.401,110,1.836,112,1.848,113,0.813,116,1.106,117,2.529,118,3.086,122,1.281,123,3.332,124,1.641,125,2.109,126,0.51,127,2.847,128,2.174,129,0.718,131,1.779,132,2.439,133,2.109,134,1.858,135,1.581,136,2.109,137,2.115,139,2.033,141,2.981,143,2.109,145,0.004,146,0.006,147,0.004,148,0.595,150,0.874,161,2.283,192,0.571,194,1.161,195,1.249,196,1.982,198,0.565,200,1.249,208,3.273,219,3.227,222,1.954,225,1.581,234,3.218,240,1.675,246,2.006,270,0.44,278,0.409,284,0.571,320,1.683,330,1.189,367,0.916,369,1.564,386,1.281,396,1.274,408,1.055,425,1.747,439,2.12,451,0.741,454,2.006,502,1.133,503,1.141,515,2.283,524,1.771,566,1.347,619,1.249,643,1.962,648,1.81,681,1.313,703,1.581,713,0.96,752,1.627,754,2.341,755,2.818,756,1.161,758,2.1,759,2.02,760,2.3,761,2.808,765,1.962,768,1.419,770,2.564,792,1.347,803,2.109,804,2.109,805,2.384,806,1.999,807,2.368,808,2.522,809,3.371,810,2.668,811,3.098,812,3.744,813,2.033,814,1.675,815,3.458,816,1.675,817,1.675,818,3.333,819,1.581,820,1.219,821,1.538,822,1.457,823,1.954,824,1.627,825,1.491,826,1.954,827,2.341,828,2.3,829,3.906,830,3.91,831,3.744,832,2.873,833,1.457,834,2.464,835,2.847,836,2.522,837,3.91,838,3.498,839,4.25,840,3.098,841,2.384,842,2.235,843,2.3,844,2.227,845,2.384,846,2.593,847,2.384,848,2.384,849,1.675,850,1.675,851,2.033,852,1.581,853,1.675,854,2.283,855,3.333,856,2.048,857,2.384,858,2.192,859,2.3,860,2.741,861,1.313,862,2.454,863,1.382,864,1.675,865,2.384,866,2.059,867,3.91,868,3.371,869,3.371,870,3.371,871,1.527,872,2.384,873,2.384,874,2.154,875,2.384,876,3.098,877,1.766,878,1.675,879,1.347,880,1.962,881,1.836,882,2.384,883,2.192,884,2.384,885,2.192,886,1.249,887,1.419,888,2.384,889,1.313,890,2.384,891,2.109,892,1.581,893,2.283,894,2.384,895,2.384,896,1.538,897,1.726,898,2.283,899,2.192,900,2.384,901,1.538,902,2.283,903,2.384,904,3.098,905,1.133,906,1.419,907,2.033,908,2.109,909,3.371,910,2.384,911,1.897,912,1.836,913,1.627,914,2.283,915,1.627,916,2.033,917,1.627,918,1.675,919,1.627,920,1.726,921,1.962,922,2.033,923,1.962,924,2.033,925,2.033,926,1.726,927,2.283]],["title/classes/CommonUtil.html",[77,0.052,1665,3.289]],["body/classes/CommonUtil.html",[3,0.145,4,0.116,5,0.102,8,0.396,12,0.265,14,0.635,18,0.294,19,0.009,25,2.165,26,0.145,60,1.463,77,0.079,84,1.03,122,2.529,126,0.723,127,2.802,129,1.067,145,0.007,146,0.008,147,0.007,178,1.143,192,0.676,198,0.764,213,0.872,214,1.362,215,0.717,241,1.395,245,1.428,278,0.483,378,1.989,954,2.583,1170,6.308,1665,5.855,1666,6.914,1667,5.854,1668,7.835,1669,7.835,1670,7.863,1671,6.634,1672,7.835,1673,7.835,1674,8.614,1675,7.835,1676,6.914,1677,6.914,1678,6.634]],["title/interfaces/ComponentRenderer.html",[0,0.058,752,1.805]],["body/interfaces/ComponentRenderer.html",[0,0.102,2,1.259,3,0.14,4,0.112,5,0.099,8,0.383,12,0.257,13,0.56,18,0.318,19,0.009,26,0.18,50,1.013,52,0.891,57,2.188,64,1.974,87,2.795,107,0.914,113,0.863,145,0.006,146,0.008,147,0.006,148,0.627,150,1.694,151,2.305,196,2.091,213,0.845,248,2.482,270,0.4,271,0.654,320,1.734,369,1.792,391,2.636,402,2.882,425,1.966,451,1.436,570,3.179,689,3.698,752,3.374,770,2.127,773,5.746,826,2.679,827,2.127,835,3.049,856,2.024,858,3.55,860,2.98,861,2.127,912,2.975,1315,2.636,1644,3.946,1661,3.293,1679,4.803,1680,4.803,1681,6.785,1682,5.977,1683,5.672,1684,5.672,1685,6.785,1686,3.698,1687,5.672,1688,5.672,1689,3.55,1690,5.672]],["title/directives/ComponentRendererOutletDirective.html",[322,1.495,369,1.227]],["body/directives/ComponentRendererOutletDirective.html",[3,0.115,4,0.092,5,0.081,8,0.314,9,2.214,12,0.21,13,0.495,14,0.719,17,5.269,18,0.314,19,0.009,26,0.115,33,6.553,36,1.106,50,0.909,52,0.729,55,3.01,57,2.111,59,0.863,66,1.394,77,0.063,87,2.952,107,1.129,110,3.142,145,0.005,146,0.007,147,0.005,148,0.645,163,5.269,164,2.631,165,2.096,166,1.298,172,1.782,178,0.99,185,2.137,188,2.952,192,0.884,194,1.539,196,1.776,213,1.044,214,1.543,215,0.812,270,0.422,271,0.536,278,0.495,284,0.536,321,1.877,322,2.696,368,1.539,369,1.893,396,1.329,402,3.044,408,1.805,451,0.982,480,1.832,568,2.137,623,2.046,752,2.157,753,2.783,756,1.986,757,6.393,761,3.002,767,2.359,768,1.881,770,2.247,792,2.552,826,2.618,827,2.835,835,2.427,859,2.783,892,2.096,1077,2.984,1315,3.596,1339,4.068,1343,4.221,1426,2.795,1649,2.515,1691,7.738,1692,4.641,1693,6.787,1694,5.989,1695,6.787,1696,6.787,1697,6.787,1698,7.94,1699,4.079,1700,8.417,1701,8.678,1702,7.94,1703,6.787,1704,7.94,1705,7.94,1706,5.259,1707,8.417,1708,7.514,1709,7.94,1710,6.787,1711,6.787,1712,7.514,1713,6.05,1714,6.787,1715,5.259,1716,4.759,1717,5.259,1718,5.259,1719,5.259,1720,5.259,1721,5.259,1722,6.787,1723,6.787,1724,5.259,1725,5.259,1726,5.259,1727,7.94,1728,5.259,1729,5.259,1730,5.259,1731,5.259,1732,5.259,1733,5.259,1734,5.259,1735,5.259,1736,5.259,1737,5.259,1738,5.259]],["title/interfaces/ComponentRendererSpec.html",[0,0.058,827,1.457]],["body/interfaces/ComponentRendererSpec.html",[0,0.1,2,1.223,3,0.136,4,0.109,5,0.096,8,0.373,12,0.25,13,0.551,18,0.325,19,0.009,26,0.177,50,1.006,52,1.047,57,1.661,64,2.322,87,3.288,107,1.075,113,0.793,145,0.006,146,0.008,147,0.006,148,0.629,150,1.376,151,1.873,196,2.102,213,0.993,248,2.017,270,0.389,271,0.636,320,1.409,369,2.108,391,3.1,402,3.39,425,2.006,451,1.577,570,3.739,689,3.595,752,3.333,770,2.502,773,6.311,826,2.942,827,2.502,835,3.092,856,2.38,858,3.451,860,3.273,861,2.502,912,2.892,1315,3.1,1644,3.499,1661,3.872,1679,4.668,1680,4.668,1681,5.513,1682,6.063,1683,5.513,1684,6.67,1685,7.452,1686,4.35,1687,5.513,1688,6.67,1689,4.176,1690,5.513,1739,6.247]],["title/interfaces/ContextualButton.html",[0,0.058,842,1.754]],["body/interfaces/ContextualButton.html",[0,0.109,2,0.771,3,0.086,4,0.069,5,0.06,8,0.235,9,2.154,12,0.157,13,0.513,15,2.805,18,0.311,19,0.009,20,1.066,21,3.61,22,2.965,26,0.186,27,2.112,30,2.045,34,0.994,35,1.124,36,1.362,38,1.947,39,2.993,40,2.664,43,1.821,47,2.039,50,0.945,52,1.223,55,2.762,57,1.046,58,1.943,59,0.585,60,0.735,61,1.124,64,1.209,65,2.162,66,1.33,67,2.805,72,1.085,73,2.981,75,0.476,76,1.371,77,0.077,78,1.614,79,1.568,82,1.632,84,1.015,89,2.916,90,1.209,94,0.951,97,0.684,98,1.371,100,2.392,110,1.821,112,1.968,113,0.78,116,1.555,117,2.902,118,3.146,122,1.27,123,3.328,124,1.632,125,2.092,126,0.508,127,2.84,128,2.162,129,0.714,131,1.765,132,2.426,133,2.092,134,1.85,135,1.568,136,2.092,137,2.103,139,2.016,141,2.964,143,2.092,145,0.004,146,0.006,147,0.004,148,0.569,150,0.867,161,2.265,192,0.568,194,1.151,195,1.239,196,1.826,198,0.563,200,1.239,208,3.261,219,3.209,222,1.943,225,1.568,234,3.204,240,1.661,246,1.994,270,0.438,278,0.406,284,0.568,320,1.678,330,1.18,367,0.909,369,1.097,386,1.27,396,1.268,408,1.046,425,1.678,439,2.112,451,0.735,454,1.407,502,1.124,503,1.137,515,2.265,524,1.764,566,1.336,619,1.239,643,1.947,648,1.8,681,1.303,703,1.568,713,0.952,752,1.614,754,2.326,755,2.582,756,1.151,758,2.091,759,2.013,760,2.287,761,2.755,765,1.947,768,1.407,770,2.462,792,1.336,803,2.092,804,2.092,805,2.365,806,1.99,807,2.354,808,2.994,809,3.893,810,2.656,811,3.081,812,3.727,813,2.016,814,1.661,815,3.745,816,1.661,817,1.661,818,3.318,819,1.568,820,1.209,821,1.525,822,1.445,823,1.943,824,1.614,825,1.483,826,1.943,827,2.144,828,2.287,829,3.892,830,3.893,831,3.727,832,2.857,833,1.445,834,2.455,835,2.66,836,2.511,837,3.893,838,3.679,839,4.47,840,3.081,841,3.352,842,2.582,843,2.287,844,2.219,845,2.365,846,2.582,847,2.365,848,2.365,849,1.661,850,1.661,851,2.016,852,1.568,853,1.661,854,2.265,855,2.857,856,1.756,857,2.365,858,2.174,859,2.287,860,2.731,861,1.303,862,2.443,863,1.371,864,1.661,865,2.365,866,2.048,867,3.893,868,3.352,869,3.352,870,3.352,871,1.518,872,2.365,873,2.365,874,2.144,875,2.365,876,3.081,877,1.756,878,1.661,879,1.336,880,1.947,881,1.821,882,2.365,883,2.174,884,2.365,885,2.174,886,1.239,887,1.407,888,2.365,889,1.303,890,2.365,891,2.092,892,1.568,893,2.265,894,2.365,895,2.365,896,1.525,897,1.712,898,2.265,899,2.174,900,2.365,901,1.525,902,2.265,903,2.365,904,3.081,905,1.124,906,1.407,907,2.016,908,2.092,909,3.352,910,2.365,911,1.882,912,1.821,913,1.614,914,2.265,915,1.614,916,2.016,917,1.614,918,1.661,919,1.614,920,1.712,921,1.947,922,2.016,923,1.947,924,2.016,925,2.016,926,1.712,927,2.265]],["title/interfaces/ContextualButtonConfig.html",[0,0.058,846,1.754]],["body/interfaces/ContextualButtonConfig.html",[0,0.109,2,0.753,3,0.084,4,0.067,5,0.059,8,0.229,9,2.2,12,0.154,13,0.508,14,0.734,15,2.89,18,0.312,19,0.009,20,1.333,21,3.571,22,2.938,26,0.186,27,2.09,30,1.954,34,1.132,35,1.097,36,1.611,38,1.901,39,2.935,40,2.603,43,2.538,47,2.013,50,0.94,52,1.167,55,2.74,57,1.022,58,1.91,59,0.575,60,0.718,61,1.097,64,1.18,65,2.125,66,1.313,67,2.068,72,1.076,73,2.925,75,0.475,76,1.339,77,0.076,78,1.576,79,1.531,82,1.604,84,1.007,89,2.896,90,1.18,94,0.941,97,0.667,98,1.91,100,2.503,110,1.779,112,1.826,113,0.804,116,1.072,117,2.74,118,3.373,122,1.77,123,3.432,124,1.87,125,2.914,126,0.618,127,2.935,128,2.971,129,0.818,131,2.459,132,2.78,133,2.914,134,1.991,135,2.185,136,3.705,137,2.629,139,1.969,141,2.914,143,2.042,145,0.004,146,0.005,147,0.004,148,0.566,150,0.847,161,2.211,192,0.558,194,1.124,195,1.21,196,1.812,198,0.555,200,1.21,208,3.226,219,3.155,222,1.91,225,1.531,234,3.162,240,1.622,246,1.96,270,0.434,278,0.399,284,0.558,320,1.662,330,1.152,367,0.887,369,1.072,386,1.24,396,1.252,408,1.022,425,1.662,439,2.09,451,0.718,454,1.374,502,1.097,503,1.032,515,2.211,524,1.741,566,1.305,619,1.21,643,1.901,648,2.474,681,1.272,703,1.531,713,0.93,752,1.576,754,2.32,755,2.548,756,1.124,758,2.063,759,1.991,760,2.248,761,2.738,765,1.901,768,1.374,770,2.44,792,1.862,803,2.042,804,2.042,805,2.309,806,2.141,807,2.315,808,2.478,809,3.295,810,2.621,811,3.029,812,3.678,813,1.969,814,1.622,815,3.398,816,1.622,817,1.622,818,3.275,819,1.531,820,1.18,821,1.489,822,1.411,823,1.91,824,1.576,825,1.458,826,1.91,827,2.116,828,2.248,829,3.851,830,3.842,831,3.678,832,2.809,833,1.411,834,2.428,835,2.636,836,2.478,837,3.842,838,3.448,839,4.189,840,3.029,841,2.309,842,2.778,843,2.858,844,2.195,845,3.295,846,2.778,847,3.295,848,2.309,849,2.315,850,2.315,851,1.969,852,1.531,853,1.622,854,2.211,855,2.809,856,1.726,857,2.309,858,2.123,859,2.248,860,2.702,861,1.272,862,2.411,863,1.339,864,1.622,865,2.309,866,2.013,867,3.842,868,3.295,869,3.295,870,3.295,871,1.493,872,2.309,873,2.309,874,2.116,875,2.309,876,3.029,877,1.726,878,1.622,879,1.305,880,1.901,881,1.779,882,2.309,883,2.123,884,2.309,885,2.123,886,1.21,887,1.374,888,2.309,889,1.272,890,2.309,891,2.042,892,1.531,893,2.211,894,2.309,895,2.309,896,1.489,897,1.671,898,2.211,899,2.123,900,2.309,901,1.489,902,2.211,903,2.309,904,3.029,905,1.097,906,1.374,907,1.969,908,2.042,909,3.295,910,2.309,911,1.837,912,1.779,913,1.576,914,2.211,915,1.576,916,1.969,917,1.576,918,1.622,919,1.576,920,1.671,921,1.901,922,1.969,923,1.901,924,1.969,925,1.969,926,1.671,927,2.211,1740,3.842]],["title/injectables/CsvExporterService.html",[1741,2.533,1742,3.086]],["body/injectables/CsvExporterService.html",[3,0.11,4,0.088,5,0.125,8,0.439,12,0.202,14,0.705,18,0.276,19,0.009,20,0.965,26,0.161,35,2.232,36,1.061,50,0.578,52,1.083,57,1.342,59,0.693,60,1.554,75,0.498,77,0.06,82,2.155,84,1.144,94,1.095,99,2.208,100,1.713,113,0.693,129,0.646,142,3.304,144,1.061,145,0.008,146,0.007,147,0.005,178,0.964,192,0.75,194,1.476,198,0.64,213,1.066,214,1.513,215,0.877,241,1.061,245,0.92,270,0.314,271,0.514,278,0.627,284,0.826,387,3.511,454,2.362,481,5.93,549,2.057,594,2.585,617,2.496,650,4.318,689,4.239,733,1.176,755,3.115,834,2.9,856,2.08,866,1.852,878,2.13,879,2.654,883,2.787,886,2.08,1089,3.159,1279,3.866,1370,2.069,1649,2.413,1741,3.802,1742,4.632,1743,3.77,1744,4.498,1745,5.841,1746,3.77,1747,6.606,1748,6.606,1749,5.319,1750,6.606,1751,6.502,1752,5.045,1753,7.366,1754,6.61,1755,7.815,1756,6.292,1757,6.897,1758,7.484,1759,6.5,1760,6.5,1761,4.117,1762,7.592,1763,6.606,1764,6.701,1765,5.045,1766,3.971,1767,5.319,1768,5.319,1769,6.531,1770,6.606,1771,5.045,1772,6.5,1773,5.045,1774,5.045,1775,5.045,1776,5.83,1777,5.045,1778,5.045,1779,6.606,1780,5.045,1781,4.452,1782,5.045,1783,5.045,1784,2.903,1785,4.062,1786,5.045,1787,5.045,1788,5.045,1789,5.045,1790,6.606,1791,5.045,1792,5.045,1793,5.045,1794,5.045,1795,5.045,1796,5.045,1797,5.045,1798,4.062,1799,3.77,1800,4.452,1801,5.045,1802,5.045,1803,4.452,1804,4.452,1805,5.045,1806,5.045,1807,5.045,1808,4.452,1809,7.345,1810,5.83,1811,5.83,1812,4.452,1813,6.5,1814,3.178,1815,4.062,1816,5.319,1817,4.452,1818,6.606,1819,5.045,1820,3.344,1821,5.045,1822,5.045,1823,5.045,1824,5.045,1825,4.062,1826,5.045,1827,5.045,1828,5.045,1829,5.045,1830,5.045,1831,4.452,1832,4.452,1833,4.452,1834,4.452,1835,5.045]],["title/interfaces/DataExportRequestEvent.html",[0,0.058,1836,3.289]],["body/interfaces/DataExportRequestEvent.html",[0,0.074,2,0.767,3,0.141,4,0.069,5,0.108,8,0.234,12,0.157,13,0.405,18,0.228,19,0.009,20,1.236,26,0.177,27,1.174,30,1.911,34,0.853,35,1.119,36,1.169,40,2.397,50,0.74,52,0.974,58,2.45,59,0.809,60,1.608,62,1.401,66,1.141,72,1.246,73,2.553,75,0.384,77,0.047,82,1.146,84,0.731,85,3.551,94,1.071,95,2.927,97,1.29,99,2.472,106,2.387,107,1.265,111,3.255,112,1.742,113,0.411,126,0.582,132,2.418,140,2.097,144,1.358,145,0.004,146,0.006,147,0.004,148,0.39,166,0.749,167,0.804,168,1.518,170,1.146,172,1.587,198,0.611,205,1.873,215,0.601,216,2.279,225,1.561,238,3.154,241,1.358,245,0.714,270,0.48,271,0.399,278,0.648,284,0.785,333,1.518,344,1.639,347,0.905,386,2.616,390,2.747,412,2.596,425,1.254,435,2.658,436,1.518,457,1.75,480,1.365,502,1.119,511,2.81,513,4.217,525,2.898,537,1.297,578,1.146,605,1.297,623,1.067,649,1.438,652,1.042,667,3.349,679,3.884,683,2.418,703,2.216,713,0.948,716,2.27,725,1.297,733,1.533,754,2.003,758,2.616,760,1.606,790,2.747,792,1.887,834,1.365,861,2.139,862,1.478,877,1.75,897,1.704,981,3.071,990,1.606,1016,1.518,1033,2.467,1040,1.478,1045,2.216,1046,2.041,1061,1.561,1070,2.898,1076,2.747,1201,1.478,1216,1.654,1241,3.603,1245,2.991,1247,2.31,1249,1.606,1254,1.092,1265,1.813,1279,1.938,1355,2.848,1484,2.007,1699,2.355,1742,4.53,1744,2.254,1751,4.154,1754,5.764,1756,5.661,1764,3.154,1767,4.475,1768,3.154,1769,3.154,1799,4.154,1836,4.154,1837,2.467,1838,2.927,1839,4.475,1840,6.552,1841,6.806,1842,6.552,1843,5.702,1844,4.905,1845,4.905,1846,4.905,1847,4.905,1848,5.928,1849,5.702,1850,6.638,1851,2.927,1852,3.154,1853,4.905,1854,2.658,1855,2.596,1856,3.457,1857,3.457,1858,3.154,1859,3.457,1860,1.873,1861,3.154,1862,4.475,1863,4.475,1864,5.978,1865,3.154,1866,3.457,1867,3.457,1868,2.467,1869,3.457,1870,5.702,1871,2.747,1872,2.927,1873,3.154,1874,3.457,1875,3.457,1876,3.457,1877,3.457,1878,3.457,1879,3.457,1880,4.905,1881,5.702,1882,3.457,1883,3.457,1884,2.747,1885,3.457,1886,3.457,1887,3.457,1888,3.457,1889,3.154,1890,3.457,1891,3.457,1892,3.457,1893,3.457,1894,3.457,1895,3.457,1896,3.457,1897,3.457,1898,3.457,1899,3.457,1900,3.457,1901,3.457,1902,5.702,1903,4.261,1904,3.457,1905,3.457,1906,3.457,1907,3.457,1908,4.154,1909,3.457,1910,3.457,1911,3.457,1912,3.457,1913,3.457,1914,3.457,1915,3.457,1916,3.457,1917,3.457,1918,3.457,1919,3.457,1920,3.457,1921,3.457,1922,3.457,1923,4.828,1924,3.457,1925,4.475,1926,3.457,1927,4.475,1928,2.164,1929,3.457,1930,4.905,1931,3.154,1932,3.154,1933,4.905,1934,3.457,1935,3.457,1936,3.457,1937,5.702,1938,3.457,1939,4.905,1940,3.457,1941,3.457,1942,3.457,1943,3.457,1944,6.205,1945,3.457,1946,3.457,1947,3.457,1948,3.457,1949,4.905,1950,3.457,1951,3.457,1952,3.457,1953,3.457,1954,3.457,1955,3.457,1956,3.457,1957,3.457,1958,3.457,1959,3.457,1960,3.457,1961,3.457,1962,3.457,1963,5.702,1964,3.457,1965,3.457,1966,3.457,1967,3.457,1968,3.457,1969,3.457,1970,3.457,1971,3.457,1972,3.457,1973,3.457,1974,3.457,1975,1.938,1976,3.457,1977,3.457,1978,3.457,1979,3.457,1980,3.457,1981,4.475,1982,3.457,1983,3.457,1984,3.457,1985,3.457,1986,3.457,1987,3.457,1988,3.457,1989,3.457,1990,3.457,1991,3.457,1992,3.457,1993,3.457,1994,3.457,1995,3.457,1996,3.457,1997,3.457,1998,3.457,1999,3.457,2000,3.457,2001,3.457,2002,3.457,2003,3.457,2004,3.457]],["title/classes/DataExporterWidgetObject.html",[77,0.052,2005,3.544]],["body/classes/DataExporterWidgetObject.html",[3,0.094,4,0.076,5,0.066,8,0.495,12,0.337,13,0.434,14,0.817,18,0.314,19,0.009,25,1.768,26,0.149,34,0.663,35,1.234,50,0.495,57,1.149,59,0.924,60,1.272,66,1.398,71,1.768,72,0.994,73,2.699,75,0.499,77,0.051,80,1.583,82,1.742,83,2.694,84,0.782,94,0.803,107,0.847,117,1.545,124,2.147,126,0.651,129,1.063,132,1.879,134,1.7,140,2.245,142,1.938,144,1.251,145,0.004,146,0.007,147,0.004,148,0.54,153,1.829,166,1.302,167,1.222,178,0.869,188,2.589,192,0.918,198,0.749,200,1.36,201,3.05,205,2.846,213,1.182,214,1.752,215,0.922,216,2.793,221,3.192,241,1.543,245,1.242,270,0.37,278,0.535,321,2.081,333,2.64,358,1.874,367,1.837,378,1.295,391,3.009,396,0.846,411,1.824,425,1.536,439,1.784,503,0.961,525,2.67,526,3.498,547,4.328,548,3.62,549,1.407,550,2.943,551,4.229,552,2.64,553,3.62,554,3.749,555,3.749,556,3.62,557,3.749,558,3.749,559,3.749,563,2.296,564,2.863,565,2.066,566,1.467,567,2.296,568,1.36,569,2.296,570,2.137,571,2.296,572,2.296,573,3.338,574,4.726,575,2.863,576,4.319,577,3.164,578,1.742,579,3.164,580,2.307,581,4.333,582,3.63,583,3.489,584,2.435,585,2.296,586,2.768,587,4.229,588,2.863,589,2.296,590,2.863,591,1.938,592,2.372,593,2.67,594,3.05,595,2.296,596,2.863,597,2.589,598,2.137,599,2.296,600,2.863,601,2.296,602,2.296,603,2.863,604,1.545,605,1.43,606,2.296,607,2.296,608,2.863,609,2.296,610,2.296,611,2.863,612,2.296,613,3.05,614,2.213,615,2.296,616,2.066,617,2.137,618,2.296,619,1.36,620,3.164,621,2.296,622,2.863,623,1.176,624,2.296,716,1.921,754,2.286,787,3.812,893,3.425,1232,2.372,1270,1.772,1425,3.164,1744,4.909,1837,5.373,1850,5.908,1873,4.792,1889,4.792,1903,3.762,2005,4.792,2006,3.812,2007,3.164,2008,7.338,2009,5.952,2010,7.338,2011,7.338,2012,6.81,2013,6.81,2014,6.81,2015,4.32,2016,4.32,2017,5.952,2018,4.32,2019,4.32,2020,5.952,2021,5.952,2022,4.32,2023,5.952,2024,4.32,2025,4.32,2026,4.32,2027,5.952,2028,5.952,2029,4.32,2030,4.32,2031,7.338,2032,3.945,2033,4.32,2034,4.32,2035,4.173,2036,3.812,2037,4.32,2038,5.952,2039,5.952,2040,4.32,2041,5.952,2042,4.32,2043,4.32,2044,4.32,2045,4.32]],["title/classes/DatagridFilter.html",[77,0.052,1257,1.457]],["body/classes/DatagridFilter.html",[0,0.074,3,0.087,4,0.07,5,0.061,8,0.237,9,2.269,12,0.159,13,0.475,14,0.678,18,0.316,19,0.009,26,0.163,35,1.135,36,0.836,45,3.968,47,1.252,50,0.981,52,0.902,59,0.868,60,0.742,61,2.022,66,1.153,75,0.458,77,0.067,94,0.955,97,1.131,107,1.007,109,2.177,110,1.84,112,1.391,113,0.899,116,1.566,126,0.585,129,0.955,144,0.836,145,0.004,146,0.006,147,0.004,148,0.571,150,1.645,172,1.276,178,1.033,185,2.229,188,2.443,192,0.91,196,2.024,198,0.777,213,1.115,214,1.453,215,0.765,240,1.678,248,2.285,270,0.506,271,0.405,278,0.58,284,0.663,335,1.493,338,1.529,341,1.385,345,1.385,351,1.725,361,1.566,369,1.974,378,2.388,387,2.985,389,2.778,396,0.779,408,1.985,425,1.267,436,3.004,439,1.684,447,3.505,451,1.049,503,1.051,550,2.808,566,1.35,568,1.769,578,2.331,592,2.834,623,1.529,643,1.966,649,1.46,652,1.493,679,3.103,699,2.878,703,1.584,713,1.713,725,1.316,733,1.26,752,2.902,754,1.691,756,1.163,759,1.135,761,1.907,767,1.783,768,1.421,806,2.001,808,2.743,822,2.391,823,2.466,825,2.397,826,1.957,827,2.156,835,2.67,855,2.037,856,2.051,859,2.303,860,3.37,863,2.269,871,1.082,874,1.859,878,2.371,887,2.008,889,1.859,901,1.541,911,1.901,912,1.84,913,1.63,916,2.037,917,1.63,918,3.493,920,1.729,921,1.966,922,2.037,923,1.966,924,2.037,925,2.037,926,1.729,954,1.192,1040,2.118,1041,3.103,1045,2.596,1046,2.391,1061,2.239,1201,2.669,1208,2.288,1216,2.988,1238,2.443,1247,2.008,1251,2.599,1254,1.109,1255,1.729,1256,1.783,1257,2.156,1270,2.303,1301,1.901,1326,1.584,1328,2.894,1329,2.75,1331,1.783,1395,1.316,1421,2.371,1682,3.938,1686,3.232,1699,2.389,1766,3.914,1852,3.649,1854,3.57,1855,2.634,1860,2.686,1928,3.103,2046,3.76,2047,2.634,2048,4.522,2049,4.197,2050,4.522,2051,4.458,2052,6.239,2053,5.243,2054,4.102,2055,4.254,2056,3.501,2057,3.762,2058,3.94,2059,3.938,2060,3.537,2061,5.616,2062,2.113,2063,3.975,2064,3.376,2065,4.458,2066,3.975,2067,4.102,2068,3.975,2069,3.975,2070,3.537,2071,3.975,2072,3.376,2073,3.975,2074,3.537,2075,3.975,2076,3.232,2077,3.103,2078,3.975,2079,3.537,2080,3.537,2081,3.975,2082,3.975,2083,2.985,2084,3.975,2085,3.376,2086,3.537,2087,3.537,2088,4.458,2089,3.232,2090,3.975,2091,2.778,2092,5.616,2093,3.975,2094,3.975,2095,3.975,2096,3.975,2097,3.975,2098,3.2,2099,3.2,2100,3.2,2101,2.971,2102,2.971,2103,2.971,2104,3.938,2105,2.971,2106,3.2,2107,3.2,2108,3.2,2109,3.2,2110,3.2,2111,3.2,2112,5.243,2113,3.2,2114,3.2,2115,3.2,2116,3.2,2117,3.2,2118,3.2,2119,3.2,2120,3.2,2121,3.2,2122,3.2,2123,2.634,2124,2.6,2125,4.522,2126,3.2,2127,2.634,2128,2.971,2129,2.971,2130,2.634,2131,2.634,2132,2.971,2133,2.971]],["title/components/DatagridMultiSelectFilterComponent.html",[148,0.309,337,1.616]],["body/components/DatagridMultiSelectFilterComponent.html",[0,0.083,3,0.08,4,0.064,5,0.057,8,0.219,9,1.481,12,0.147,13,0.387,14,0.694,18,0.303,19,0.009,20,1.306,26,0.149,31,1.599,34,1.049,36,1.117,45,2.823,50,0.782,52,0.509,59,0.865,60,0.686,61,1.05,63,1.158,65,2.059,72,0.536,75,0.465,77,0.044,78,2.178,80,1.412,84,0.698,90,1.632,94,0.922,97,0.639,107,0.523,112,0.911,113,0.836,116,1.739,126,0.592,129,0.927,138,3.046,145,0.004,146,0.005,147,0.004,148,0.479,149,1.507,150,1.17,151,1.102,153,1.129,154,1.465,165,1.465,166,1.715,167,1.819,170,1.554,172,1.04,178,0.775,185,1.963,192,0.918,196,1.995,198,0.777,213,1.143,214,1.488,215,0.912,245,0.67,248,2.339,270,0.484,271,0.374,278,0.55,284,0.635,319,1.217,320,1.703,321,1.255,322,1.248,323,3.162,324,1.702,325,1.702,326,1.129,327,1.187,328,1.481,329,2.458,330,1.102,331,1.552,332,1.702,333,1.425,334,1.702,335,1.658,336,1.702,337,2.858,338,2.056,339,3.28,340,3.162,341,1.281,342,1.386,343,1.425,344,2.06,345,1.281,346,1.507,347,0.849,348,1.702,349,1.552,350,1.425,351,2.495,352,1.702,353,1.425,354,2.458,355,1.386,356,1.702,357,1.507,358,1.158,359,1.702,360,1.35,361,1.739,362,1.552,363,1.129,364,1.187,365,1.507,366,1.315,367,0.849,368,1.076,369,1.481,370,1.702,371,1.386,372,1.649,373,1.702,374,1.35,375,1.599,376,1.702,378,1.869,387,1.954,389,1.818,396,1.04,408,0.978,436,2.417,439,1.102,447,3.286,451,0.686,454,1.315,480,1.281,502,1.951,503,1.169,526,3.52,550,2.688,568,1.158,578,1.999,592,2.524,597,1.599,623,1.001,652,1.412,656,2.23,667,2.633,707,2.209,713,1.285,725,1.217,726,2.934,727,2.577,728,2.209,729,2.436,733,1.418,737,2.577,754,1.379,756,1.554,758,1.714,759,1.517,760,2.178,761,1.803,806,1.632,808,3.017,813,2.721,822,1.95,823,2.524,825,2.325,859,1.507,860,2.648,861,1.758,863,1.281,871,1.446,874,1.217,878,1.552,881,2.458,887,1.315,889,1.217,905,1.781,918,2.242,982,1.883,1016,2.417,1033,4.302,1040,1.386,1041,2.031,1045,2.485,1061,1.465,1077,1.281,1201,2.352,1216,3.286,1232,1.465,1238,1.599,1247,1.315,1251,2.508,1254,1.025,1257,2.908,1280,2.31,1310,3.096,1315,2.178,1321,1.35,1328,2.059,1329,1.552,1370,1.507,1395,1.217,1421,1.552,1488,1.217,1640,1.702,1686,2.115,1716,2.577,1766,2.209,1852,3.785,1854,2.982,1860,1.758,1903,3.773,1928,2.031,1975,1.818,2035,3.724,2046,3.481,2051,4.302,2054,3.345,2055,3.748,2056,3.851,2057,4.138,2058,3.942,2059,4.789,2060,2.315,2062,2.823,2064,2.209,2065,3.345,2067,3.345,2070,2.315,2072,2.209,2074,2.315,2076,2.115,2077,2.934,2079,2.315,2080,2.315,2083,3.314,2085,2.209,2086,2.315,2087,2.315,2088,3.345,2089,2.115,2091,1.818,2134,1.702,2135,3.379,2136,3.52,2137,3.969,2138,4.527,2139,3.969,2140,3.969,2141,2.934,2142,3.676,2143,2.747,2144,3.676,2145,3.676,2146,3.676,2147,3.676,2148,3.676,2149,4.527,2150,3.676,2151,3.969,2152,3.52,2153,3.244,2154,2.747,2155,2.747,2156,2.747,2157,2.747,2158,2.747,2159,2.747,2160,2.747,2161,2.747,2162,2.747,2163,4.133,2164,3.676,2165,3.969,2166,2.747,2167,2.747,2168,2.747,2169,2.747,2170,3.314,2171,2.315,2172,1.758,2173,2.031,2174,1.954,2175,4.527,2176,2.315,2177,2.747,2178,3.724,2179,2.747,2180,2.436,2181,2.031,2182,2.577,2183,2.747,2184,2.747,2185,2.747,2186,2.747,2187,2.747,2188,2.747,2189,2.747,2190,3.969,2191,2.747,2192,2.747,2193,2.747,2194,2.747,2195,2.747,2196,2.747,2197,2.747,2198,2.747,2199,2.747,2200,2.747,2201,2.747,2202,2.747,2203,2.747,2204,2.747,2205,2.436,2206,4.276,2207,5.499,2208,3.52]],["title/interfaces/DatagridMultiSelectFilterConfig.html",[0,0.058,2149,2.917]],["body/interfaces/DatagridMultiSelectFilterConfig.html",[0,0.099,2,1.018,3,0.113,4,0.091,5,0.08,12,0.208,13,0.491,18,0.264,19,0.009,20,1.512,26,0.172,31,2.26,34,1.034,36,1.092,50,0.905,52,0.72,59,0.784,65,2.014,75,0.458,77,0.062,78,2.762,80,1.382,84,0.885,90,1.596,94,0.701,107,0.739,113,0.829,116,1.449,126,0.407,129,0.665,138,3.166,145,0.005,146,0.007,147,0.005,148,0.472,166,0.994,167,1.067,170,1.52,192,0.529,196,1.936,198,0.772,215,0.562,245,0.947,248,2.174,270,0.531,271,0.529,278,0.597,284,0.761,320,1.685,335,1.382,337,2.743,338,1.415,339,2.981,344,2.166,351,2.069,396,1.018,454,1.858,480,1.81,502,1.924,503,1.322,550,1.72,592,1.81,597,2.26,652,1.382,656,2.672,667,2.843,707,3.123,713,1.257,725,1.72,726,3.72,727,3.643,728,3.123,729,3.444,733,1.493,737,3.643,754,1.349,756,1.52,758,1.677,759,1.484,760,2.131,761,1.764,806,1.596,808,2.014,813,2.662,822,2.743,823,2.754,825,2.302,861,1.72,871,1.415,881,2.405,905,1.924,982,2.662,1016,2.61,1033,4.706,1045,2.684,1077,1.81,1216,2.194,1232,2.071,1251,2.473,1254,1.449,1257,2.229,1280,2.929,1310,3.358,1315,2.131,1321,1.908,1370,2.131,1395,1.72,1488,1.72,1640,2.405,1716,3.643,1852,3.673,1903,4.128,1975,2.57,2035,3.643,2046,2.194,2056,2.57,2057,2.762,2058,2.57,2062,2.762,2083,2.762,2134,2.405,2135,3.696,2136,3.444,2137,3.883,2138,4.463,2139,3.883,2140,3.883,2141,2.871,2149,4.952,2151,3.883,2152,3.444,2163,4.463,2165,3.883,2170,3.971,2171,3.273,2172,2.485,2173,2.871,2174,2.762,2175,5.561,2176,3.273,2177,3.883,2178,4.722,2179,3.883,2180,3.444,2181,2.871,2182,3.643,2183,3.883,2184,3.883,2185,3.883,2186,3.883,2187,3.883,2188,3.883,2189,3.883,2190,5.033,2191,3.883,2192,3.883,2193,3.883,2194,3.883,2195,3.883,2196,3.883,2197,3.883,2198,3.883,2199,3.883,2200,3.883,2201,3.883,2202,3.883,2203,3.883,2204,3.883,2205,3.444]],["title/components/DatagridNumericFilterComponent.html",[148,0.309,341,1.533]],["body/components/DatagridNumericFilterComponent.html",[0,0.048,3,0.079,4,0.063,5,0.056,9,1.723,12,0.145,13,0.45,14,0.742,18,0.313,19,0.009,26,0.148,27,1.085,36,1.104,40,1.995,45,2.791,50,0.601,52,0.501,59,0.898,60,0.676,61,1.033,63,1.139,72,0.528,75,0.41,77,0.043,84,0.812,86,1.085,94,0.915,97,0.629,99,1.085,107,1.129,112,0.896,113,0.551,116,1.009,126,0.68,129,0.961,138,2.153,140,1.365,145,0.004,146,0.005,147,0.004,148,0.476,149,1.484,150,1.157,151,1.085,152,2.175,153,1.112,154,1.442,165,1.442,166,1.712,167,1.822,168,2.035,170,1.536,172,1.554,178,0.766,185,1.946,188,2.284,192,0.929,196,1.775,198,0.749,213,1.152,214,1.591,215,0.909,241,0.761,245,0.66,248,1.168,270,0.482,271,0.368,278,0.606,284,0.629,314,3.017,319,1.198,320,1.184,321,1.241,322,1.229,323,3.138,324,1.675,325,1.675,326,1.112,327,1.168,328,1.464,329,2.43,330,1.085,331,1.528,332,1.675,333,1.402,334,1.675,335,0.962,336,1.675,337,1.328,338,2.045,339,1.365,340,3.138,341,2.508,342,3.421,343,1.402,344,1.72,345,1.261,346,1.484,347,0.835,348,1.675,349,1.528,350,1.402,351,2.524,352,1.675,353,1.402,354,2.43,355,1.365,356,1.675,357,1.484,358,1.139,359,1.675,360,2.757,361,2.533,362,1.528,363,1.112,364,1.168,365,1.484,366,1.294,367,0.835,368,1.059,369,1.464,370,1.675,371,1.365,372,1.623,373,1.675,374,1.328,375,1.574,376,1.675,378,1.853,387,1.923,389,1.79,408,0.962,436,2.628,439,1.085,447,3.275,451,0.676,454,1.294,480,1.261,503,0.997,526,3.511,550,2.678,568,1.139,578,1.984,592,2.362,623,0.985,650,1.999,652,1.396,667,1.528,681,1.198,699,3.689,713,0.876,725,1.198,733,1.336,797,2.511,808,3.003,822,2.269,823,2.153,825,2.213,844,1.139,859,1.484,860,2.628,863,1.261,874,1.198,878,1.528,887,1.294,889,1.198,905,2.145,918,2.217,980,3.604,981,2.901,1040,1.365,1041,1.999,1045,2.463,1046,2.269,1061,1.442,1077,1.261,1201,2.331,1216,3.271,1238,1.574,1247,1.294,1249,1.484,1251,2.489,1254,1.009,1257,2.902,1270,2.153,1320,1.79,1321,1.328,1328,2.035,1329,1.528,1421,1.528,1686,2.082,1766,2.175,1852,3.559,1854,2.955,1860,1.73,1928,1.999,1975,1.79,2046,3.732,2051,4.27,2054,3.307,2055,3.714,2056,3.832,2057,3.285,2058,3.925,2059,4.754,2060,2.279,2062,2.791,2064,2.175,2065,3.307,2067,3.307,2070,2.279,2072,2.175,2074,2.279,2076,2.082,2077,3.414,2079,2.279,2080,2.279,2083,3.285,2085,2.175,2086,2.279,2087,2.279,2088,3.307,2089,2.082,2091,1.79,2134,1.675,2135,2.597,2141,2.901,2143,2.704,2152,3.48,2153,3.193,2154,2.704,2155,2.704,2156,2.704,2157,2.704,2158,2.704,2159,2.704,2160,2.704,2161,2.704,2162,2.704,2166,2.704,2167,2.704,2168,2.704,2169,2.704,2172,2.511,2173,1.999,2174,1.923,2181,1.999,2209,5.454,2210,5.454,2211,4.975,2212,5.454,2213,5.454,2214,5.454,2215,5.983,2216,6.045,2217,3.618,2218,4.633,2219,5.25,2220,3.618,2221,3.618,2222,3.618,2223,3.618,2224,5.048,2225,3.618,2226,5.796,2227,3.193,2228,3.618,2229,3.193,2230,4.227,2231,4.633,2232,3.193,2233,5.454,2234,3.618,2235,4.633,2236,3.618,2237,3.618,2238,3.618,2239,3.618,2240,3.618,2241,3.618,2242,3.618,2243,2.279,2244,2.537,2245,2.913,2246,3.193,2247,3.193,2248,4.227,2249,5.454,2250,4.975,2251,4.227,2252,4.227,2253,3.193,2254,5.454,2255,3.193,2256,4.633,2257,3.193,2258,3.193,2259,3.193,2260,2.913,2261,3.193,2262,3.193,2263,2.913,2264,3.193,2265,3.193,2266,2.398,2267,4.633,2268,4.633,2269,3.193,2270,3.193,2271,3.193,2272,3.193,2273,3.193,2274,2.704,2275,4.227,2276,4.633,2277,3.618,2278,2.913]],["title/interfaces/DatagridNumericFilterConfig.html",[0,0.058,2224,3.086]],["body/interfaces/DatagridNumericFilterConfig.html",[0,0.069,2,1.021,3,0.114,4,0.091,5,0.08,8,0.311,9,1.882,12,0.208,13,0.577,14,0.758,18,0.289,19,0.009,26,0.173,27,1.563,36,1.419,40,2.179,50,0.773,52,0.722,59,0.831,75,0.284,77,0.062,84,0.984,86,2.023,94,0.704,99,1.563,107,1.194,126,0.701,129,0.667,138,2.351,140,1.966,145,0.005,146,0.007,147,0.005,148,0.473,166,0.997,167,1.071,168,2.021,170,1.526,172,1.322,196,1.595,198,0.73,245,0.951,270,0.532,271,0.531,278,0.643,284,0.762,314,3.242,338,1.42,341,2.351,342,3.224,344,1.712,351,1.602,360,2.748,361,2.585,436,2.616,454,1.864,480,1.816,503,1.208,550,1.726,592,2.351,652,1.386,667,2.201,681,1.726,699,3.834,725,1.726,733,1.409,797,2.493,808,2.021,822,3.01,823,2.607,825,2.18,905,2.138,980,3.587,981,2.88,1045,2.69,1046,2.478,1077,1.816,1216,2.201,1249,2.138,1251,2.478,1254,1.454,1257,2.234,1320,2.579,1321,1.914,1852,3.356,1975,2.579,2046,2.201,2056,2.579,2058,2.579,2062,2.771,2077,2.88,2083,2.771,2134,2.413,2135,3.338,2141,2.88,2152,3.455,2172,3.227,2173,2.88,2174,2.771,2181,2.88,2209,4.601,2210,4.601,2211,4.197,2212,4.601,2213,4.601,2214,4.601,2215,4.601,2216,6.473,2224,5.549,2226,6.025,2231,4.601,2233,4.601,2235,4.601,2243,3.284,2244,3.655,2245,4.197,2246,5.956,2247,4.601,2248,5.434,2249,6.604,2250,6.025,2251,5.434,2252,5.434,2253,4.601,2254,6.604,2255,4.601,2256,5.956,2257,4.601,2258,4.601,2259,4.601,2260,4.197,2261,4.601,2262,4.601,2263,4.197,2264,4.601,2265,4.601,2266,3.455,2267,5.956,2268,5.956,2269,4.601,2270,4.601,2271,4.601,2272,4.601,2273,4.601,2274,3.896]],["title/components/DatagridSelectFilterComponent.html",[148,0.309,343,1.706]],["body/components/DatagridSelectFilterComponent.html",[0,0.051,3,0.083,4,0.067,5,0.059,8,0.228,9,1.523,12,0.153,13,0.398,14,0.666,18,0.303,19,0.009,20,1.219,26,0.139,30,1.353,34,1.174,35,1.56,36,1.148,45,2.903,50,0.796,52,0.53,59,0.845,60,0.714,61,1.092,63,1.203,65,2.117,66,0.785,72,0.558,75,0.454,77,0.045,80,1.452,84,0.838,94,1.033,97,0.949,107,0.906,112,0.947,113,0.772,116,1.777,126,0.652,129,0.979,138,2.897,145,0.004,146,0.005,147,0.004,148,0.488,149,1.567,150,1.203,151,1.146,153,1.174,154,1.523,165,1.523,166,1.722,167,1.827,170,1.598,172,1.248,178,0.797,185,2.007,192,0.914,196,1.862,198,0.792,213,1.143,214,1.428,215,0.886,234,2.702,241,0.803,245,0.697,248,1.234,270,0.476,271,0.389,278,0.574,284,0.556,319,1.265,320,1.232,321,1.291,322,1.298,323,3.219,324,1.769,325,1.769,326,1.174,327,1.234,328,1.523,329,2.528,330,1.146,331,1.613,332,1.769,333,1.481,334,1.769,335,1.695,336,1.769,337,1.403,338,2.083,339,1.441,340,3.219,341,1.331,342,1.441,343,3.053,344,2.278,345,1.331,346,1.567,347,0.882,348,1.769,349,1.613,350,1.481,351,2.419,352,1.769,353,1.481,354,2.528,355,1.441,356,1.769,357,1.567,358,1.203,359,1.769,360,1.403,361,1.777,362,1.613,363,1.174,364,1.234,365,1.567,366,1.367,367,0.882,368,1.118,369,1.523,370,1.769,371,1.441,372,1.714,373,1.769,374,1.403,375,1.662,376,1.769,378,1.911,387,2.031,389,1.89,396,1.07,408,1.016,436,2.47,439,1.146,447,3.315,451,0.714,454,1.367,480,1.331,503,1.029,526,3.543,550,2.713,566,1.298,568,1.203,578,2.035,592,2.562,623,1.041,652,1.452,667,2.306,681,1.265,713,0.925,725,1.265,733,1.309,754,1.418,756,1.598,758,1.763,759,1.56,760,2.24,761,1.854,806,1.678,808,3.053,822,2.005,823,2.562,825,2.357,859,1.567,860,2.695,863,1.331,874,1.265,878,1.613,881,2.528,887,1.367,889,1.265,905,1.82,918,2.306,1040,1.441,1041,2.111,1045,2.54,1046,2.34,1061,1.523,1077,1.331,1201,2.404,1216,3.325,1217,4.081,1238,1.662,1247,1.367,1251,2.553,1254,1.066,1257,2.923,1278,2.798,1310,3.016,1315,2.24,1321,1.403,1328,2.47,1329,1.613,1395,1.265,1421,1.613,1590,1.769,1686,2.199,1766,2.297,1852,3.612,1854,3.048,1860,1.828,1928,2.111,1975,2.702,2046,3.461,2051,4.379,2054,3.44,2055,3.83,2056,3.895,2057,4.186,2058,3.983,2059,3.829,2060,2.407,2062,2.903,2064,2.297,2065,3.44,2067,3.44,2070,2.407,2072,2.297,2074,2.407,2076,2.199,2077,2.111,2079,2.407,2080,2.407,2083,2.031,2085,2.297,2086,2.407,2087,2.407,2088,3.44,2089,3.667,2091,1.89,2134,1.769,2135,3.439,2141,3.017,2143,2.856,2154,2.856,2155,2.856,2156,2.856,2157,2.856,2158,2.856,2159,2.856,2160,2.856,2161,2.856,2162,2.856,2166,2.856,2167,2.856,2168,2.856,2169,2.856,2170,3.909,2171,2.407,2172,2.612,2173,2.111,2174,2.031,2181,2.111,2206,4.397,2207,5.598,2208,3.619,2218,3.372,2227,3.372,2243,4.379,2266,2.533,2279,5.196,2280,4.081,2281,4.82,2282,4.875,2283,4.82,2284,5.624,2285,4.763,2286,3.821,2287,3.372,2288,3.821,2289,3.821,2290,3.821,2291,3.821,2292,4.82,2293,2.856,2294,2.856,2295,3.372,2296,4.82,2297,5.598,2298,5.624,2299,3.077,2300,3.372,2301,3.077,2302,3.372,2303,3.077,2304,2.856,2305,3.372,2306,5.624,2307,2.856,2308,2.856,2309,2.856,2310,5.461]],["title/interfaces/DatagridSelectFilterConfig.html",[0,0.058,2293,3.289]],["body/interfaces/DatagridSelectFilterConfig.html",[0,0.071,2,1.048,3,0.117,4,0.094,5,0.082,8,0.319,12,0.214,13,0.5,14,0.657,18,0.282,19,0.009,20,1.58,26,0.165,30,1.325,34,1.163,35,1.528,36,1.442,50,0.915,52,0.741,59,0.72,65,2.073,66,1.409,75,0.413,77,0.064,80,1.422,84,0.996,94,1.115,97,0.929,107,0.976,113,0.795,116,1.492,126,0.594,129,0.684,138,3.155,145,0.005,146,0.007,147,0.005,148,0.481,166,1.023,167,1.098,170,1.565,172,1.048,196,1.791,198,0.794,234,3.747,241,1.125,245,0.975,270,0.526,271,0.545,278,0.616,284,0.699,335,1.422,338,1.457,343,3.098,344,2.277,396,1.048,454,1.913,480,1.864,503,1.223,550,1.771,566,1.816,592,1.864,652,1.422,667,2.897,681,2.271,725,1.771,733,1.348,754,1.389,756,1.565,758,1.727,759,1.528,760,2.194,761,1.816,806,1.643,808,2.073,822,2.782,823,2.784,825,2.374,881,2.476,905,1.96,1045,2.735,1046,2.519,1077,1.864,1216,2.258,1217,3.997,1251,2.519,1254,1.492,1257,2.271,1278,2.741,1310,3.107,1315,2.194,1321,1.964,1328,2.66,1395,1.771,1590,3.176,1852,3.398,1975,3.394,2046,2.258,2056,2.646,2057,2.843,2058,2.646,2062,2.843,2089,3.078,2134,2.476,2135,3.747,2141,2.955,2170,4.494,2171,3.369,2172,3.281,2173,2.955,2174,2.843,2181,2.955,2243,4.322,2266,3.545,2279,5.128,2280,3.997,2281,4.72,2282,4.811,2283,4.72,2284,4.72,2285,3.997,2292,4.72,2293,5.128,2294,5.128,2295,6.055,2296,6.055,2297,6.922,2298,6.685,2299,4.307,2300,4.72,2301,4.307,2302,4.72,2303,4.307,2304,3.997,2305,4.72,2306,6.685,2307,3.997,2308,3.997,2309,3.997]],["title/components/DatagridStringFilterComponent.html",[148,0.309,345,1.533]],["body/components/DatagridStringFilterComponent.html",[0,0.056,3,0.091,4,0.073,5,0.064,9,1.624,12,0.167,13,0.424,14,0.729,18,0.302,19,0.009,26,0.158,27,1.255,45,3.095,50,0.479,52,0.807,59,0.865,60,0.782,61,1.196,63,1.318,66,0.86,72,0.611,75,0.503,77,0.05,84,0.765,94,0.977,97,0.727,107,0.595,112,1.037,113,0.611,116,1.167,126,0.567,129,1.008,144,0.88,145,0.004,146,0.006,147,0.004,148,0.508,149,1.717,150,1.283,151,1.255,153,1.286,154,1.668,165,1.668,166,1.737,167,1.846,170,1.704,172,1.49,178,0.85,185,2.109,192,0.92,196,1.799,198,0.773,213,1.158,214,1.563,215,0.916,241,0.88,245,1.221,248,1.351,270,0.474,271,0.426,278,0.601,284,0.682,319,1.386,320,1.314,321,1.377,322,1.421,323,3.351,324,1.938,325,1.938,326,1.286,327,1.351,328,1.624,329,2.696,330,1.255,331,1.767,332,1.938,333,1.623,334,1.938,335,1.113,336,1.938,337,1.537,338,2.145,339,1.579,340,3.351,341,1.458,342,1.579,343,1.623,344,1.062,345,2.651,346,1.717,347,0.967,348,1.938,349,1.767,350,1.623,351,2.483,352,1.938,353,1.623,354,2.696,355,1.579,356,1.938,357,1.717,358,1.318,359,1.938,360,1.537,361,1.868,362,1.767,363,1.286,364,1.351,365,1.717,366,1.497,367,0.967,368,1.225,369,1.624,370,1.938,371,1.579,372,1.877,373,1.938,374,1.537,375,1.821,376,1.938,378,2.008,387,2.225,389,2.071,408,1.113,411,1.767,436,2.596,439,1.255,447,3.379,451,0.782,454,1.497,480,1.458,503,1.081,524,1.14,526,3.593,550,2.608,568,1.318,578,2.118,592,2.333,593,2.612,623,1.14,648,2.609,652,1.549,667,2.459,713,1.013,725,1.386,733,1.354,808,3.133,822,2.138,823,2.333,825,2.254,859,1.717,860,2.806,863,1.458,874,1.386,878,1.767,887,1.497,889,1.386,905,1.913,918,2.459,954,1.255,1040,1.579,1041,2.313,1045,2.669,1061,1.668,1077,1.458,1201,2.526,1216,3.412,1238,1.821,1247,2.395,1251,2.658,1254,1.167,1257,2.956,1282,2.002,1321,1.537,1328,2.806,1329,1.767,1421,1.767,1686,2.409,1766,2.516,1852,3.697,1854,3.203,1860,2.002,1928,2.313,1975,2.071,2046,3.48,2051,4.56,2054,3.668,2055,4.025,2056,3.998,2057,3.56,2058,4.077,2059,4.083,2060,2.636,2062,3.095,2064,2.516,2065,3.668,2067,3.668,2070,2.636,2072,2.516,2074,2.636,2076,2.409,2077,2.313,2079,2.636,2080,2.636,2083,2.225,2085,2.516,2086,2.636,2087,2.636,2088,3.668,2089,3.854,2091,2.071,2134,1.938,2135,2.881,2141,3.217,2143,3.128,2154,3.128,2155,3.128,2156,3.128,2157,3.128,2158,3.128,2159,3.128,2160,3.128,2161,3.128,2162,3.128,2166,3.128,2167,3.128,2168,3.128,2169,3.128,2172,2.785,2173,2.313,2174,2.225,2181,2.313,2229,3.694,2232,3.694,2243,2.636,2266,2.774,2287,3.694,2304,3.128,2307,3.128,2311,5.823,2312,4.186,2313,5.139,2314,6.059,2315,6.389,2316,4.186,2317,5.139,2318,5.91,2319,4.186,2320,4.186,2321,4.083,2322,3.128,2323,5.139,2324,4.352,2325,3.694,2326,3.128,2327,5.139,2328,5.139,2329,3.694,2330,5.139,2331,3.694,2332,5.139,2333,3.694,2334,3.37,2335,3.694,2336,5.139,2337,3.694,2338,3.128]],["title/interfaces/DatagridStringFilterConfig.html",[0,0.058,2326,3.289]],["body/interfaces/DatagridStringFilterConfig.html",[0,0.077,2,1.135,3,0.126,4,0.101,5,0.089,8,0.346,12,0.231,13,0.526,14,0.691,18,0.255,19,0.009,26,0.18,27,1.737,50,0.663,52,1,59,0.757,66,1.19,75,0.499,77,0.069,84,0.949,94,0.782,129,0.741,144,1.218,145,0.006,146,0.007,147,0.006,148,0.506,166,1.108,167,1.19,170,1.695,172,1.135,196,1.706,198,0.76,241,1.218,245,1.316,270,0.527,271,0.59,278,0.638,284,0.8,338,1.578,345,2.514,411,2.446,454,2.072,480,2.018,503,1.269,524,1.578,593,3.237,648,2.732,652,1.54,667,3.047,725,1.918,733,1.399,808,2.246,822,2.886,823,2.738,825,2.09,905,2.061,954,1.737,1045,2.876,1077,2.018,1216,2.446,1247,2.811,1251,2.65,1254,1.616,1257,2.389,1282,2.77,1321,2.127,1328,3.047,1852,3.525,1975,2.866,2046,2.446,2056,2.866,2058,2.866,2062,3.079,2089,3.334,2134,2.682,2135,3.57,2141,3.2,2172,3.451,2173,3.2,2174,3.079,2181,3.2,2243,3.649,2266,3.839,2304,4.329,2307,4.329,2313,5.112,2314,6.428,2315,6.368,2317,5.112,2318,6.368,2321,5.06,2322,4.329,2323,6.368,2324,5.393,2325,6.368,2326,5.393,2327,6.368,2328,6.368,2329,5.112,2330,6.368,2331,5.112,2332,6.368,2333,5.112,2334,4.664,2335,5.112,2336,6.368,2337,5.112,2338,4.329]],["title/interfaces/DetailPane.html",[0,0.058,1319,2.255]],["body/interfaces/DetailPane.html",[0,0.094,2,0.416,3,0.046,4,0.037,5,0.033,8,0.127,9,1.685,12,0.29,13,0.372,14,0.203,15,1.665,18,0.243,19,0.009,20,0.665,22,0.847,25,0.552,26,0.164,27,1.043,30,1.706,31,0.925,34,1.114,36,1.65,39,0.76,40,1.816,42,1.016,47,0.669,50,0.876,52,0.612,55,2.911,59,0.762,60,1.128,61,1.822,62,0.76,63,0.669,64,1.856,66,0.714,67,1.312,71,0.903,72,0.508,73,2.674,75,0.428,76,1.212,77,0.052,79,0.847,80,1.174,82,0.622,83,2.066,84,0.671,85,3.294,86,1.811,87,0.925,89,2.81,90,0.653,92,3.479,94,1.047,96,1.348,97,0.886,98,0.74,99,2.124,100,0.722,106,1.911,107,1.174,109,2.181,112,0.527,113,0.744,116,1.231,117,1.244,118,2.342,122,0.686,123,2.598,124,1.018,126,0.683,127,1.244,128,0.824,129,0.816,134,1.457,135,0.847,137,1.665,138,2.222,140,2.122,144,1.448,145,0.003,146,0.003,147,0.002,148,0.537,150,0.766,151,1.323,164,1.348,166,0.406,167,0.714,168,0.824,170,0.622,172,1.569,175,1.13,176,1.13,177,1.13,178,0.644,185,1.095,192,0.216,195,2.231,196,1.428,198,0.384,205,1.016,213,0.74,215,0.477,220,1.13,221,1.513,222,0.74,227,0.802,229,2.712,241,1.399,242,1.849,245,1.414,246,0.76,248,1.123,252,0.925,261,1.13,268,1.089,270,0.452,271,0.216,278,0.641,284,0.85,287,2.712,314,1.277,320,0.996,321,0.822,326,0.653,327,0.686,328,1.231,335,0.565,338,0.579,344,0.539,347,0.803,358,0.669,363,0.653,364,0.686,368,1.018,385,1.61,386,0.686,392,0.897,396,0.681,402,0.953,403,3.231,408,0.925,425,1.151,431,1.61,435,1.663,439,1.687,440,2.523,451,0.397,455,1.61,457,1.39,502,0.993,503,0.343,511,1.92,513,1.663,524,1.645,525,2.288,537,0.704,543,1.089,549,1.044,552,1.348,568,1.095,573,1.312,578,1.768,580,1.348,584,0.76,586,1.499,604,2.38,605,2,619,0.669,623,0.947,633,1.016,648,1.123,649,0.78,652,0.565,656,0.76,677,1.016,681,0.704,683,0.925,705,1.016,711,1.016,713,0.514,716,1.123,733,1.261,753,1.81,754,1.84,756,0.622,758,2.391,759,1.967,767,0.953,768,0.76,770,1.461,771,1.782,772,1.782,792,2.259,806,2.519,807,1.468,810,1.426,814,0.897,816,0.897,817,0.897,819,0.847,820,0.653,821,0.824,824,0.872,825,0.565,826,1.96,827,1.461,828,1.81,833,2.218,834,2.734,835,1.244,836,1.711,842,1.386,843,1.81,844,1.606,846,0.847,849,0.897,850,2.154,852,2.243,853,0.897,856,0.669,861,1.461,862,2.793,863,1.538,864,0.897,866,0.78,871,0.947,874,0.704,877,1.39,879,1.499,886,1.39,892,0.847,896,1.977,901,0.824,905,2.385,906,2.534,915,1.426,919,1.426,931,1.56,936,2.361,977,1.61,985,2.361,990,1.81,999,1.426,1006,0.872,1015,0.984,1016,0.824,1040,1.312,1043,1.98,1044,1.56,1046,1.277,1070,0.953,1073,1.051,1089,2.44,1128,0.984,1138,3.294,1201,0.802,1232,0.847,1235,2.614,1236,1.051,1237,1.921,1238,1.513,1239,1.921,1240,1.174,1241,1.089,1242,1.174,1243,1.849,1244,2.347,1245,2.604,1246,1.174,1247,2.012,1248,1.921,1249,0.872,1250,1.849,1251,0.78,1252,2.439,1253,1.921,1254,0.593,1255,1.513,1256,0.953,1257,1.151,1258,3.349,1259,2.883,1260,1.13,1261,2.262,1262,1.089,1263,1.051,1264,1.72,1265,0.984,1266,1.849,1267,2.262,1268,1.089,1269,1.13,1270,0.872,1271,1.13,1272,2.614,1273,1.13,1274,4.216,1275,1.782,1276,1.13,1277,2.347,1278,1.782,1279,2.523,1280,1.92,1281,1.174,1282,1.663,1283,1.174,1284,1.72,1285,1.174,1286,2.818,1287,1.782,1288,1.174,1289,1.174,1290,1.921,1291,1.13,1292,2.712,1293,1.174,1294,2.043,1295,1.782,1296,1.921,1297,1.921,1298,1.921,1299,2.614,1300,2.439,1301,1.016,1302,0.984,1303,1.174,1304,1.174,1305,1.174,1306,0.953,1307,3.108,1308,4.009,1309,2.439,1310,0.872,1311,1.174,1312,1.174,1313,4.336,1314,1.089,1315,2.092,1316,3.914,1317,1.089,1318,1.921,1319,2.614,1320,1.72,1321,1.277,1322,1.174,1323,1.174,1324,2.991,1325,1.174,1326,1.386,1327,2.262,1328,0.824,1329,0.897,1330,2.439,1331,1.56,1332,1.174,1333,1.089,1334,1.921,1335,1.921,1336,1.174,1337,1.174,1338,1.72,1339,1.089,1340,1.174,1341,1.174,1342,1.174,1343,1.849,1344,2.439,1345,1.174,1346,1.174,1347,1.174,1348,1.921,1349,1.174,1350,1.921,1351,1.174,1352,2.439,1353,1.174,1354,1.089,1355,1.089,1356,1.174,1357,1.921,1358,1.174,1359,1.174,1360,1.174,1361,1.174,1362,1.174,1363,1.174,1364,1.13,1365,1.174,1366,1.921,1367,1.174,1368,1.13,1369,1.174,1370,1.81,1371,1.174,1372,2.439,1373,1.849,1374,1.174,1375,1.174,1376,3.338,1377,1.174,1378,1.921,1379,1.174,1380,1.174,1381,1.921,1382,2.439,1383,2.439,1384,1.921,1385,2.439,1386,2.818,1387,1.174,1388,1.921,1389,2.712,1390,1.174,1391,1.921,1392,1.174,1393,1.174,1394,1.174,1395,0.704,1396,1.174,1397,1.174,1398,1.174,1399,1.174,1400,1.174,1401,1.174,1402,1.921,1403,1.921,1404,1.921,1405,1.921,1406,2.439,1407,1.174,1408,1.174,1409,1.174,1410,1.174,1411,1.921,1412,1.921,1413,2.818,1414,1.174,1415,1.174,1416,1.174,1417,1.174,1418,1.921,1419,2.818,1420,2.818,1421,0.897,1422,1.174,1423,2.439,1424,1.174,1425,1.13,1426,1.849,1427,1.174,1428,1.174,1429,1.174,1430,1.174,1431,1.174,1432,1.174,1433,1.174,1434,1.174,1435,1.174,1436,1.174,1437,1.174,1438,1.13,1439,1.174,1440,1.174,1441,1.921,1442,1.174,1443,1.174,1444,1.174,1445,1.089,1446,1.174,1447,1.174,1448,1.174,1449,1.174,1450,1.051,1451,1.174,1452,1.089,1453,1.174,1454,1.174,1455,1.174,1456,1.174,1457,0.953,1458,1.174,1459,1.174,1460,1.174,1461,1.174,1462,1.174,1463,1.174,1464,1.174,1465,1.174,1466,1.174,1467,1.174,1468,1.174,1469,1.174,1470,1.921,1471,1.921,1472,1.921,1473,1.174,1474,2.439,1475,2.818,1476,1.921,1477,1.174,1478,1.174,1479,1.174,1480,1.174,1481,1.174,1482,1.174,1483,1.174,1484,1.089,1485,1.174,1486,1.174,1487,1.174,1488,0.704,1489,1.174,1490,1.174,1491,1.174,1492,1.174,1493,1.174,1494,1.174,1495,2.439,1496,0.984,1497,1.174,1498,1.174,1499,1.174,1500,1.174,1501,1.174,1502,1.174,1503,1.174,1504,1.174,1505,1.174,1506,2.523,1507,1.174,1508,1.174,1509,1.13,1510,1.174,1511,1.174,1512,1.174,1513,1.921,1514,1.174,1515,1.174,1516,1.174,1517,1.174,1518,1.921,1519,1.174,1520,1.174,1521,1.174,1522,1.174,1523,1.174,1524,1.174,1525,1.174,1526,1.174,1527,1.174,1528,1.174,1529,1.174,1530,1.174,1531,1.174,1532,1.174,1533,1.174,1534,1.174,1535,1.13,1536,1.13,1537,1.174,1538,1.174,1539,1.921,1540,1.921,1541,1.56,1542,1.921,1543,1.849,1544,1.174,1545,1.174,1546,1.921,1547,1.174,1548,1.921,1549,1.174,1550,1.174,1551,1.174,1552,1.174,1553,1.174,1554,1.174,1555,1.13,1556,1.174,1557,1.13,1558,1.174,1559,1.174,1560,1.174,1561,1.921,1562,1.174,1563,1.174,1564,1.174,1565,1.174,1566,1.174,1567,1.174,1568,1.174,1569,1.174,1570,1.174,1571,1.174,1572,2.818,1573,2.439,1574,1.174,1575,1.174,1576,1.174,1577,1.174,1578,1.921,1579,1.174,1580,1.174,1581,1.174,1582,1.174,1583,1.174,1584,1.174,1585,1.174,1586,1.921,1587,1.174,1588,1.174,1589,1.174,1590,0.984,1591,1.174,1592,1.174,1593,1.174,1594,1.174,1595,1.174,1596,1.174,1597,1.174,1598,1.174,1599,1.174,1600,1.174,1601,1.174,1602,1.174,1603,1.174,1604,2.818,1605,1.174,1606,1.174,1607,1.174,1608,1.174,1609,1.174,1610,1.174,1611,1.13,1612,1.174,1613,1.174,1614,1.921,1615,1.174,1616,1.921,1617,1.174,1618,1.174,1619,1.921,1620,1.174,1621,1.174,1622,1.174,1623,1.174,1624,1.174,1625,2.439,1626,1.174,1627,1.174,1628,1.174,1629,1.849,1630,1.174,1631,1.174,1632,1.174,1633,1.174,1634,1.174,1635,1.174,1636,1.174,1637,1.174,1638,1.174,1639,1.174,1640,0.984,1641,1.174,1642,1.174,1643,1.174,1644,0.984,1645,1.174,1646,1.174,1647,1.921,1648,3.108,1649,1.016,1650,1.174,1651,1.174,1652,1.174,1653,1.174,1654,1.174,1655,1.174,1656,1.921,1657,1.174,1658,1.174,1659,1.849,1660,1.174,1661,1.089,1662,1.174,1663,1.174,1664,1.174]],["title/interfaces/DetailPaneConfig.html",[0,0.058,1317,2.255]],["body/interfaces/DetailPaneConfig.html",[0,0.094,2,0.418,3,0.047,4,0.037,5,0.033,8,0.127,9,1.688,12,0.29,13,0.373,14,0.204,15,1.669,18,0.235,19,0.009,20,0.667,22,0.85,25,0.554,26,0.165,27,1.046,30,1.709,31,0.928,34,1.115,36,1.652,39,0.763,40,1.82,42,1.02,47,0.672,50,0.877,52,0.613,55,2.953,59,0.762,60,1.13,61,1.824,62,0.763,63,0.672,64,1.859,66,0.909,67,1.316,71,0.906,72,0.509,73,2.676,75,0.418,76,1.216,77,0.053,79,0.85,80,0.928,82,0.624,83,2.07,84,0.672,85,3.298,86,1.814,87,0.928,89,2.943,90,0.655,92,3.482,94,1.048,96,1.352,97,0.888,98,0.743,99,2.127,100,0.724,106,1.914,107,1.175,109,2.185,112,0.529,113,0.724,116,1.234,117,1.248,118,2.346,122,0.689,123,2.601,124,1.021,126,0.684,127,1.248,128,0.827,129,0.817,134,1.461,135,0.85,137,1.669,138,2.225,140,2.127,144,1.45,145,0.003,146,0.003,147,0.002,148,0.52,150,0.769,151,1.327,164,1.352,166,0.408,167,0.716,168,0.827,170,0.624,172,1.57,175,1.134,176,1.134,177,1.134,178,0.646,185,1.099,192,0.217,195,2.234,196,1.431,198,0.385,205,1.02,213,0.741,215,0.478,220,1.134,221,1.518,222,0.743,227,0.805,229,2.718,241,1.401,242,1.854,245,1.415,246,0.763,248,1.126,252,0.928,261,1.134,268,1.093,270,0.452,271,0.217,278,0.641,284,0.851,287,2.718,314,1.281,320,0.998,321,0.825,326,0.655,327,0.689,328,1.234,335,0.567,338,0.581,344,0.541,347,0.806,358,0.672,363,0.655,364,0.689,368,1.021,385,1.615,386,0.689,392,0.901,396,0.683,402,0.957,403,3.234,408,0.928,425,1.272,431,1.615,435,1.669,439,1.69,440,2.529,451,0.398,455,1.615,457,1.394,502,0.997,503,0.344,511,1.925,513,1.669,524,1.648,525,2.293,537,0.706,543,1.093,549,1.046,552,1.352,568,1.099,573,1.316,578,1.771,580,1.352,584,0.763,586,1.503,604,2.383,605,2.003,619,0.672,623,0.95,633,1.02,648,1.126,649,0.783,652,0.567,656,0.763,677,1.02,681,0.706,683,0.928,705,1.02,711,1.02,713,0.516,716,1.126,733,1.263,753,1.815,754,1.842,756,0.624,758,2.393,759,1.97,767,0.957,768,0.763,770,1.465,771,1.788,772,1.788,792,2.263,806,2.521,807,1.473,810,1.431,814,0.901,816,0.901,817,0.901,819,0.85,820,0.655,821,0.827,824,0.875,825,0.567,826,1.542,827,1.465,828,1.815,833,2.222,834,2.737,835,1.248,836,1.716,842,1.391,843,1.815,844,1.394,846,0.85,849,0.901,850,2.159,852,2.247,853,0.901,856,0.672,861,1.465,862,2.514,863,1.542,864,0.901,866,0.783,871,0.95,874,0.706,877,1.394,879,1.503,886,1.099,892,0.85,896,1.982,901,0.827,905,2.373,906,2.537,915,1.431,919,1.431,931,1.565,936,2.367,977,1.615,985,2.367,990,1.815,999,1.431,1006,0.875,1015,0.988,1016,0.827,1040,1.316,1043,1.985,1044,1.565,1046,1.281,1070,0.957,1073,1.055,1089,2.117,1128,0.988,1138,3.298,1201,0.805,1232,0.85,1235,2.62,1236,1.055,1237,1.927,1238,1.518,1239,1.927,1240,1.179,1241,1.093,1242,1.179,1243,1.854,1244,2.353,1245,2.61,1246,1.179,1247,2.016,1248,1.927,1249,0.875,1250,1.854,1251,0.783,1252,2.445,1253,1.927,1254,0.595,1255,1.518,1256,0.957,1257,1.155,1258,3.352,1259,2.889,1260,1.134,1261,2.268,1262,1.093,1263,1.055,1264,1.726,1265,0.988,1266,1.854,1267,2.268,1268,1.093,1269,1.134,1270,0.875,1271,1.134,1272,2.62,1273,1.134,1274,4.22,1275,1.788,1276,1.134,1277,2.353,1278,1.788,1279,2.529,1280,1.925,1281,1.179,1282,1.669,1283,1.179,1284,1.726,1285,1.179,1286,2.825,1287,1.788,1288,1.179,1289,1.179,1290,1.927,1291,1.134,1292,2.718,1293,1.179,1294,2.049,1295,1.788,1296,1.927,1297,1.927,1298,1.927,1299,2.62,1300,2.445,1301,1.02,1302,0.988,1303,1.179,1304,1.179,1305,1.179,1306,0.957,1307,3.115,1308,4.014,1309,2.445,1310,0.875,1311,1.179,1312,1.179,1313,4.289,1314,1.093,1315,2.312,1316,3.81,1317,1.788,1318,1.179,1319,2.268,1320,1.055,1321,0.783,1322,1.179,1323,1.179,1324,2.997,1325,1.179,1326,1.391,1327,2.268,1328,0.827,1329,0.901,1330,2.445,1331,1.565,1332,1.179,1333,1.093,1334,1.927,1335,1.927,1336,1.179,1337,1.179,1338,1.726,1339,1.093,1340,1.179,1341,1.179,1342,1.179,1343,1.854,1344,2.445,1345,1.179,1346,1.179,1347,1.179,1348,1.927,1349,1.179,1350,1.927,1351,1.179,1352,2.445,1353,1.179,1354,1.093,1355,1.093,1356,1.179,1357,1.927,1358,1.179,1359,1.179,1360,1.179,1361,1.179,1362,1.179,1363,1.179,1364,1.134,1365,1.179,1366,1.927,1367,1.179,1368,1.134,1369,1.179,1370,1.815,1371,1.179,1372,2.445,1373,1.854,1374,1.179,1375,1.179,1376,3.344,1377,1.179,1378,1.927,1379,1.179,1380,1.179,1381,1.927,1382,2.445,1383,2.445,1384,1.927,1385,2.445,1386,2.825,1387,1.179,1388,1.927,1389,2.718,1390,1.179,1391,1.927,1392,1.179,1393,1.179,1394,1.179,1395,0.706,1396,1.179,1397,1.179,1398,1.179,1399,1.179,1400,1.179,1401,1.179,1402,1.927,1403,1.927,1404,1.927,1405,1.927,1406,2.445,1407,1.179,1408,1.179,1409,1.179,1410,1.179,1411,1.927,1412,1.927,1413,2.825,1414,1.179,1415,1.179,1416,1.179,1417,1.179,1418,1.927,1419,2.825,1420,2.825,1421,0.901,1422,1.179,1423,2.445,1424,1.179,1425,1.134,1426,1.854,1427,1.179,1428,1.179,1429,1.179,1430,1.179,1431,1.179,1432,1.179,1433,1.179,1434,1.179,1435,1.179,1436,1.179,1437,1.179,1438,1.134,1439,1.179,1440,1.179,1441,1.927,1442,1.179,1443,1.179,1444,1.179,1445,1.093,1446,1.179,1447,1.179,1448,1.179,1449,1.179,1450,1.055,1451,1.179,1452,1.093,1453,1.179,1454,1.179,1455,1.179,1456,1.179,1457,0.957,1458,1.179,1459,1.179,1460,1.179,1461,1.179,1462,1.179,1463,1.179,1464,1.179,1465,1.179,1466,1.179,1467,1.179,1468,1.179,1469,1.179,1470,1.927,1471,1.927,1472,1.927,1473,1.179,1474,2.445,1475,2.825,1476,1.927,1477,1.179,1478,1.179,1479,1.179,1480,1.179,1481,1.179,1482,1.179,1483,1.179,1484,1.093,1485,1.179,1486,1.179,1487,1.179,1488,0.706,1489,1.179,1490,1.179,1491,1.179,1492,1.179,1493,1.179,1494,1.179,1495,2.445,1496,0.988,1497,1.179,1498,1.179,1499,1.179,1500,1.179,1501,1.179,1502,1.179,1503,1.179,1504,1.179,1505,1.179,1506,2.529,1507,1.179,1508,1.179,1509,1.134,1510,1.179,1511,1.179,1512,1.179,1513,1.927,1514,1.179,1515,1.179,1516,1.179,1517,1.179,1518,1.927,1519,1.179,1520,1.179,1521,1.179,1522,1.179,1523,1.179,1524,1.179,1525,1.179,1526,1.179,1527,1.179,1528,1.179,1529,1.179,1530,1.179,1531,1.179,1532,1.179,1533,1.179,1534,1.179,1535,1.134,1536,1.134,1537,1.179,1538,1.179,1539,1.927,1540,1.927,1541,1.565,1542,1.927,1543,1.854,1544,1.179,1545,1.179,1546,1.927,1547,1.179,1548,1.927,1549,1.179,1550,1.179,1551,1.179,1552,1.179,1553,1.179,1554,1.179,1555,1.134,1556,1.179,1557,1.134,1558,1.179,1559,1.179,1560,1.179,1561,1.927,1562,1.179,1563,1.179,1564,1.179,1565,1.179,1566,1.179,1567,1.179,1568,1.179,1569,1.179,1570,1.179,1571,1.179,1572,2.825,1573,2.445,1574,1.179,1575,1.179,1576,1.179,1577,1.179,1578,1.927,1579,1.179,1580,1.179,1581,1.179,1582,1.179,1583,1.179,1584,1.179,1585,1.179,1586,1.927,1587,1.179,1588,1.179,1589,1.179,1590,0.988,1591,1.179,1592,1.179,1593,1.179,1594,1.179,1595,1.179,1596,1.179,1597,1.179,1598,1.179,1599,1.179,1600,1.179,1601,1.179,1602,1.179,1603,1.179,1604,2.825,1605,1.179,1606,1.179,1607,1.179,1608,1.179,1609,1.179,1610,1.179,1611,1.134,1612,1.179,1613,1.179,1614,1.927,1615,1.179,1616,1.927,1617,1.179,1618,1.179,1619,1.927,1620,1.179,1621,1.179,1622,1.179,1623,1.179,1624,1.179,1625,2.445,1626,1.179,1627,1.179,1628,1.179,1629,1.854,1630,1.179,1631,1.179,1632,1.179,1633,1.179,1634,1.179,1635,1.179,1636,1.179,1637,1.179,1638,1.179,1639,1.179,1640,0.988,1641,1.179,1642,1.179,1643,1.179,1644,0.988,1645,1.179,1646,1.179,1647,1.927,1648,3.115,1649,1.02,1650,1.179,1651,1.179,1652,1.179,1653,1.179,1654,1.179,1655,1.179,1656,1.927,1657,1.179,1658,1.179,1659,1.854,1660,1.179,1661,1.093,1662,1.179,1663,1.179,1664,1.179]],["title/interfaces/DetailRowConfig.html",[0,0.058,1314,2.255]],["body/interfaces/DetailRowConfig.html",[0,0.094,2,0.415,3,0.046,4,0.037,5,0.033,8,0.126,9,1.683,12,0.31,13,0.371,14,0.203,15,1.663,18,0.25,19,0.009,20,0.664,22,0.845,25,0.551,26,0.164,27,1.041,30,1.705,31,0.923,34,1.113,36,1.649,39,0.758,40,1.814,42,1.014,47,0.668,50,0.876,52,0.611,55,2.95,59,0.761,60,1.127,61,1.82,62,0.758,63,0.668,64,1.854,66,0.905,67,1.31,71,0.902,72,0.507,73,2.673,75,0.417,76,1.21,77,0.052,79,0.845,80,0.923,82,0.621,83,2.064,84,0.67,85,3.291,86,1.809,87,0.923,89,2.939,90,0.652,92,3.477,94,1.046,96,1.346,97,0.885,98,0.739,99,2.123,100,0.72,106,1.908,107,1.173,109,2.179,112,0.525,113,0.722,116,1.229,117,1.242,118,2.339,122,0.685,123,2.596,124,1.016,126,0.691,127,1.242,128,0.822,129,0.815,134,1.455,135,0.845,137,1.663,138,2.22,140,2.12,144,1.447,145,0.003,146,0.003,147,0.002,148,0.519,150,0.765,151,1.321,164,1.346,166,0.406,167,0.713,168,0.822,170,0.621,172,1.568,175,1.127,176,1.127,177,1.127,178,0.643,185,1.093,192,0.216,195,2.23,196,1.427,198,0.383,205,1.014,213,0.739,215,0.476,220,1.127,221,1.51,222,0.739,227,0.8,229,3.386,241,1.398,242,1.845,245,1.413,246,0.758,248,1.121,252,0.923,261,1.127,268,1.087,270,0.451,271,0.216,278,0.641,284,0.85,287,2.708,314,1.275,320,0.994,321,0.821,326,0.652,327,0.685,328,1.229,335,0.564,338,0.578,344,0.538,347,0.802,358,0.668,363,0.652,364,0.685,368,1.016,385,1.607,386,0.685,392,0.895,396,0.68,402,0.951,403,3.229,408,0.923,425,1.268,431,1.607,435,1.66,439,1.685,440,2.52,451,0.396,455,1.607,457,1.388,502,0.992,503,0.342,511,1.917,513,1.66,524,1.643,525,2.285,537,0.702,543,1.087,549,1.042,552,1.346,568,1.093,573,1.31,578,1.766,580,1.346,584,0.758,586,1.497,604,2.378,605,1.998,619,0.668,623,0.945,633,1.014,648,1.121,649,0.779,652,0.564,656,0.758,677,1.014,681,0.702,683,0.923,705,1.014,711,1.014,713,0.513,716,1.121,733,1.26,753,1.808,754,1.839,756,0.621,758,2.389,759,1.966,767,0.951,768,0.758,770,1.459,771,1.779,772,1.779,792,2.258,806,2.518,807,1.466,810,1.424,814,0.895,816,0.895,817,0.895,819,0.845,820,0.652,821,0.822,824,0.87,825,0.564,826,1.536,827,1.459,828,1.808,833,2.216,834,2.813,835,1.242,836,1.709,842,1.384,843,1.808,844,1.388,846,0.845,849,0.895,850,2.373,852,2.24,853,0.895,856,0.668,861,1.459,862,2.508,863,1.536,864,0.895,866,0.779,871,0.945,874,0.702,877,1.388,879,1.497,886,1.093,892,0.845,896,1.975,901,0.822,905,2.396,906,2.532,915,1.424,919,1.424,931,1.557,936,2.358,977,1.607,985,2.358,990,1.808,999,1.424,1006,0.87,1015,0.982,1016,0.822,1040,1.31,1043,1.977,1044,1.557,1046,1.275,1070,0.951,1073,1.049,1089,2.108,1128,0.982,1138,3.291,1201,0.8,1232,0.845,1235,2.61,1236,1.049,1237,1.918,1238,1.51,1239,1.918,1240,1.172,1241,1.087,1242,1.172,1243,1.845,1244,2.343,1245,2.601,1246,1.172,1247,2.01,1248,1.918,1249,0.87,1250,1.845,1251,0.779,1252,2.435,1253,1.918,1254,0.591,1255,1.51,1256,0.951,1257,1.149,1258,3.348,1259,2.88,1260,1.127,1261,2.258,1262,1.087,1263,1.049,1264,1.717,1265,0.982,1266,1.845,1267,2.258,1268,1.087,1269,1.127,1270,0.87,1271,1.127,1272,2.61,1273,1.127,1274,4.214,1275,1.779,1276,1.127,1277,2.343,1278,1.779,1279,2.78,1280,1.917,1281,1.172,1282,1.66,1283,1.172,1284,1.717,1285,1.172,1286,2.815,1287,1.779,1288,1.172,1289,1.172,1290,1.918,1291,1.127,1292,2.708,1293,1.172,1294,2.04,1295,1.779,1296,1.918,1297,1.918,1298,1.918,1299,2.61,1300,2.435,1301,1.014,1302,0.982,1303,1.172,1304,1.172,1305,1.172,1306,0.951,1307,3.105,1308,4.006,1309,2.435,1310,0.87,1311,1.172,1312,1.172,1313,4.334,1314,1.779,1315,2.305,1316,3.52,1317,1.087,1318,1.172,1319,2.258,1320,1.049,1321,0.779,1322,1.172,1323,1.172,1324,2.987,1325,1.172,1326,1.384,1327,2.258,1328,0.822,1329,0.895,1330,2.435,1331,1.557,1332,1.172,1333,1.087,1334,1.918,1335,1.918,1336,1.172,1337,1.172,1338,1.717,1339,1.087,1340,1.172,1341,1.172,1342,1.172,1343,1.845,1344,2.435,1345,1.172,1346,1.172,1347,1.172,1348,1.918,1349,1.172,1350,1.918,1351,1.172,1352,2.435,1353,1.172,1354,1.087,1355,1.087,1356,1.172,1357,1.918,1358,1.172,1359,1.172,1360,1.172,1361,1.172,1362,1.172,1363,1.172,1364,1.127,1365,1.172,1366,1.918,1367,1.172,1368,1.127,1369,1.172,1370,1.808,1371,1.172,1372,2.435,1373,1.845,1374,1.172,1375,1.172,1376,3.334,1377,1.172,1378,1.918,1379,1.172,1380,1.172,1381,1.918,1382,2.435,1383,2.435,1384,1.918,1385,2.435,1386,2.815,1387,1.172,1388,1.918,1389,2.708,1390,1.172,1391,1.918,1392,1.172,1393,1.172,1394,1.172,1395,0.702,1396,1.172,1397,1.172,1398,1.172,1399,1.172,1400,1.172,1401,1.172,1402,1.918,1403,1.918,1404,1.918,1405,1.918,1406,2.435,1407,1.172,1408,1.172,1409,1.172,1410,1.172,1411,1.918,1412,1.918,1413,2.815,1414,1.172,1415,1.172,1416,1.172,1417,1.172,1418,1.918,1419,2.815,1420,2.815,1421,0.895,1422,1.172,1423,2.435,1424,1.172,1425,1.127,1426,1.845,1427,1.172,1428,1.172,1429,1.172,1430,1.172,1431,1.172,1432,1.172,1433,1.172,1434,1.172,1435,1.172,1436,1.172,1437,1.172,1438,1.127,1439,1.172,1440,1.172,1441,1.918,1442,1.172,1443,1.172,1444,1.172,1445,1.087,1446,1.172,1447,1.172,1448,1.172,1449,1.172,1450,1.049,1451,1.172,1452,1.087,1453,1.172,1454,1.172,1455,1.172,1456,1.172,1457,0.951,1458,1.172,1459,1.172,1460,1.172,1461,1.172,1462,1.172,1463,1.172,1464,1.172,1465,1.172,1466,1.172,1467,1.172,1468,1.172,1469,1.172,1470,1.918,1471,1.918,1472,1.918,1473,1.172,1474,2.435,1475,2.815,1476,1.918,1477,1.172,1478,1.172,1479,1.172,1480,1.172,1481,1.172,1482,1.172,1483,1.172,1484,1.087,1485,1.172,1486,1.172,1487,1.172,1488,0.702,1489,1.172,1490,1.172,1491,1.172,1492,1.172,1493,1.172,1494,1.172,1495,2.435,1496,0.982,1497,1.172,1498,1.172,1499,1.172,1500,1.172,1501,1.172,1502,1.172,1503,1.172,1504,1.172,1505,1.172,1506,2.52,1507,1.172,1508,1.172,1509,1.127,1510,1.172,1511,1.172,1512,1.172,1513,1.918,1514,1.172,1515,1.172,1516,1.172,1517,1.172,1518,1.918,1519,1.172,1520,1.172,1521,1.172,1522,1.172,1523,1.172,1524,1.172,1525,1.172,1526,1.172,1527,1.172,1528,1.172,1529,1.172,1530,1.172,1531,1.172,1532,1.172,1533,1.172,1534,1.172,1535,1.127,1536,1.127,1537,1.172,1538,1.172,1539,1.918,1540,1.918,1541,1.557,1542,1.918,1543,1.845,1544,1.172,1545,1.172,1546,1.918,1547,1.172,1548,1.918,1549,1.172,1550,1.172,1551,1.172,1552,1.172,1553,1.172,1554,1.172,1555,1.127,1556,1.172,1557,1.127,1558,1.172,1559,1.172,1560,1.172,1561,1.918,1562,1.172,1563,1.172,1564,1.172,1565,1.172,1566,1.172,1567,1.172,1568,1.172,1569,1.172,1570,1.172,1571,1.172,1572,2.815,1573,2.435,1574,1.172,1575,1.172,1576,1.172,1577,1.172,1578,1.918,1579,1.172,1580,1.172,1581,1.172,1582,1.172,1583,1.172,1584,1.172,1585,1.172,1586,1.918,1587,1.172,1588,1.172,1589,1.172,1590,0.982,1591,1.172,1592,1.172,1593,1.172,1594,1.172,1595,1.172,1596,1.172,1597,1.172,1598,1.172,1599,1.172,1600,1.172,1601,1.172,1602,1.172,1603,1.172,1604,2.815,1605,1.172,1606,1.172,1607,1.172,1608,1.172,1609,1.172,1610,1.172,1611,1.127,1612,1.172,1613,1.172,1614,1.918,1615,1.172,1616,1.918,1617,1.172,1618,1.172,1619,1.918,1620,1.172,1621,1.172,1622,1.172,1623,1.172,1624,1.172,1625,2.435,1626,1.172,1627,1.172,1628,1.172,1629,1.845,1630,1.172,1631,1.172,1632,1.172,1633,1.172,1634,1.172,1635,1.172,1636,1.172,1637,1.172,1638,1.172,1639,1.172,1640,0.982,1641,1.172,1642,1.172,1643,1.172,1644,0.982,1645,1.172,1646,1.172,1647,1.918,1648,3.105,1649,1.014,1650,1.172,1651,1.172,1652,1.172,1653,1.172,1654,1.172,1655,1.172,1656,1.918,1657,1.172,1658,1.172,1659,1.845,1660,1.172,1661,1.087,1662,1.172,1663,1.172,1664,1.172]],["title/components/ErrorBannerComponent.html",[148,0.309,346,1.805]],["body/components/ErrorBannerComponent.html",[3,0.159,4,0.086,5,0.076,8,0.293,12,0.196,13,0.473,14,0.621,18,0.311,19,0.009,26,0.107,30,1.608,36,1.033,59,0.763,60,0.917,63,1.547,66,1.333,72,0.717,75,0.46,77,0.058,94,1.086,97,1.344,98,2.261,106,2.204,107,1.1,126,0.57,129,0.99,145,0.005,146,0.006,147,0.005,148,0.564,149,2.014,150,1.43,151,1.473,152,2.952,153,1.509,154,1.958,165,1.958,166,1.76,167,1.875,168,2.516,170,1.899,172,1.424,178,0.947,185,2.044,188,2.823,192,0.881,198,0.672,213,0.853,214,1.333,215,0.911,270,0.306,271,0.5,278,0.358,319,1.626,320,1.464,321,1.534,322,1.668,323,3.58,324,2.274,325,2.274,326,1.509,327,2.72,328,1.81,329,3.005,330,1.473,331,2.074,332,2.274,333,1.904,334,2.274,335,1.306,336,2.274,337,1.804,338,2.106,339,1.853,340,3.58,341,1.711,342,1.853,343,1.904,344,1.246,345,1.711,346,3.172,347,2.109,348,2.274,349,2.074,350,1.904,351,2.538,352,2.274,353,1.904,354,3.005,355,1.853,356,2.274,357,2.014,358,1.547,359,2.274,360,1.804,361,2.027,362,2.074,363,1.509,364,1.586,365,2.014,366,1.757,367,1.134,368,1.437,369,1.37,370,2.274,371,1.853,372,2.203,373,2.274,374,1.804,375,2.137,376,2.274,386,2.761,407,4.088,411,2.74,459,5.728,476,6.53,586,2.204,623,2.106,699,3.725,733,1.155,811,3.586,954,1.473,1049,2.517,1051,2.714,1183,5.226,1245,3.723,1247,2.6,1270,3.298,1338,3.211,1421,3.265,1488,1.626,1543,3.45,1699,3.901,1784,2.827,2275,3.955,2276,4.335,2278,5.226,2339,7.035,2340,4.335,2341,8.807,2342,7.27,2343,6.491,2344,7.27,2345,8.261,2346,6.491,2347,7.27,2348,7.27,2349,8.042,2350,7.27,2351,4.912,2352,6.491,2353,6.491,2354,7.734,2355,6.491,2356,4.912,2357,4.912,2358,4.851,2359,6.491,2360,6.491,2361,6.491,2362,4.912,2363,4.912,2364,6.491,2365,4.912,2366,4.912,2367,4.912,2368,4.912,2369,4.912,2370,7.27,2371,4.912,2372,4.912,2373,4.912,2374,4.912,2375,2.517,2376,2.43,2377,2.517,2378,2.517,2379,2.517,2380,2.517,2381,2.517,2382,6.491]],["title/interfaces/ExportColumn.html",[0,0.058,1848,3.289]],["body/interfaces/ExportColumn.html",[0,0.074,2,0.774,3,0.142,4,0.069,5,0.108,8,0.236,12,0.158,13,0.407,18,0.197,19,0.009,20,1.35,26,0.177,27,1.185,30,1.916,34,0.859,35,1.129,36,1.176,40,2.279,50,0.743,58,2.459,59,0.812,60,1.582,62,1.413,66,0.811,72,1.248,73,2.56,75,0.443,77,0.047,82,1.156,84,0.735,85,3.375,94,1.073,95,2.953,97,1.294,99,2.477,106,2.397,107,1.266,111,2.589,112,1.608,113,0.415,126,0.584,132,2.433,140,2.109,144,1.365,145,0.004,146,0.006,147,0.004,148,0.392,166,0.756,167,0.811,168,1.532,170,1.156,172,1.591,198,0.564,205,1.889,215,0.702,216,2.293,225,2.229,238,3.181,241,1.365,245,0.72,270,0.481,271,0.402,278,0.649,284,0.788,333,1.532,344,1.79,347,0.912,386,2.622,390,2.77,412,2.619,425,1.261,435,2.674,436,1.532,457,1.761,480,1.377,502,1.129,511,2.823,513,4.222,525,2.508,537,1.308,578,1.156,605,1.308,623,1.076,649,1.451,652,1.051,667,3.357,679,4.115,683,2.433,703,2.229,713,0.956,716,2.279,725,1.308,733,1.522,754,2.065,758,2.622,760,2.895,790,2.77,792,1.342,834,1.377,861,1.851,862,1.49,877,1.761,897,1.719,981,3.586,990,1.62,1016,2.168,1033,2.488,1040,1.49,1045,2.229,1046,2.053,1061,1.575,1070,2.911,1076,2.77,1201,1.49,1216,1.668,1241,4.074,1245,3.005,1247,2.321,1249,1.62,1254,1.102,1265,2.589,1279,1.954,1355,2.024,1484,2.024,1699,2.375,1742,4.551,1744,2.274,1751,4.179,1754,5.567,1756,5.683,1764,3.181,1767,4.502,1768,3.181,1769,3.181,1799,4.179,1836,2.953,1837,2.488,1838,2.953,1839,3.181,1840,4.935,1841,5.728,1842,4.935,1843,4.935,1844,3.487,1845,3.487,1846,3.487,1847,3.487,1848,5.78,1849,4.935,1850,6.54,1851,2.953,1852,3.166,1853,4.935,1854,2.674,1855,2.619,1856,3.487,1857,4.935,1858,4.502,1859,4.935,1860,2.674,1861,3.181,1862,4.502,1863,4.502,1864,5.997,1865,3.181,1866,3.487,1867,3.487,1868,2.488,1869,3.487,1870,5.728,1871,2.77,1872,2.953,1873,3.181,1874,3.487,1875,3.487,1876,3.487,1877,3.487,1878,3.487,1879,3.487,1880,4.935,1881,5.728,1882,3.487,1883,3.487,1884,2.77,1885,3.487,1886,3.487,1887,3.487,1888,3.487,1889,3.181,1890,3.487,1891,3.487,1892,3.487,1893,3.487,1894,3.487,1895,3.487,1896,3.487,1897,3.487,1898,3.487,1899,3.487,1900,3.487,1901,3.487,1902,5.728,1903,4.273,1904,3.487,1905,3.487,1906,3.487,1907,3.487,1908,4.179,1909,3.487,1910,3.487,1911,3.487,1912,3.487,1913,3.487,1914,3.487,1915,3.487,1916,3.487,1917,3.487,1918,3.487,1919,3.487,1920,3.487,1921,3.487,1922,3.487,1923,4.851,1924,3.487,1925,4.502,1926,3.487,1927,4.502,1928,2.183,1929,3.487,1930,4.935,1931,3.181,1932,3.181,1933,4.935,1934,3.487,1935,3.487,1936,3.487,1937,5.728,1938,3.487,1939,4.935,1940,3.487,1941,3.487,1942,3.487,1943,3.487,1944,6.229,1945,3.487,1946,3.487,1947,3.487,1948,3.487,1949,4.935,1950,3.487,1951,3.487,1952,3.487,1953,3.487,1954,3.487,1955,3.487,1956,3.487,1957,3.487,1958,3.487,1959,3.487,1960,3.487,1961,3.487,1962,3.487,1963,5.728,1964,3.487,1965,3.487,1966,3.487,1967,3.487,1968,3.487,1969,3.487,1970,3.487,1971,3.487,1972,3.487,1973,3.487,1974,3.487,1975,1.954,1976,3.487,1977,3.487,1978,3.487,1979,3.487,1980,3.487,1981,4.502,1982,3.487,1983,3.487,1984,3.487,1985,3.487,1986,3.487,1987,3.487,1988,3.487,1989,3.487,1990,3.487,1991,3.487,1992,3.487,1993,3.487,1994,3.487,1995,3.487,1996,3.487,1997,3.487,1998,3.487,1999,3.487,2000,3.487,2001,3.487,2002,3.487,2003,3.487,2004,3.487]],["title/classes/FilterBuilder.html",[77,0.052,2172,2.105]],["body/classes/FilterBuilder.html",[3,0.072,4,0.058,5,0.051,8,0.198,12,0.133,13,0.359,14,0.82,18,0.309,19,0.009,26,0.128,35,1.859,59,0.517,61,1.408,71,0.863,75,0.477,77,0.039,81,3.268,94,0.448,113,0.517,125,4.117,126,0.679,129,0.425,145,0.006,146,0.005,147,0.003,172,1.696,178,0.72,192,0.901,194,1.721,198,0.784,213,1.193,214,1.758,215,0.936,227,2.747,278,0.634,284,0.851,314,1.81,378,0.996,412,3.268,435,2.358,451,0.62,549,2.176,565,4.305,573,2.622,699,1.702,713,1.575,733,1.158,756,1.443,825,2.394,833,1.81,844,2.049,871,1.772,886,1.553,889,1.632,898,3.745,911,2.358,913,2.022,990,2.022,1061,1.965,1181,6.659,1326,2.903,1676,4.351,1820,5.481,2072,2.964,2077,1.835,2172,4.475,2174,3.459,2260,3.97,2263,3.97,2285,3.685,2303,6.483,2322,5.443,2358,3.685,2383,6.63,2384,2.482,2385,4.931,2386,4.931,2387,4.931,2388,7.283,2389,4.931,2390,4.931,2391,4.931,2392,4.931,2393,4.931,2394,4.931,2395,4.931,2396,4.931,2397,4.931,2398,5.88,2399,4.931,2400,6.507,2401,5.743,2402,4.931,2403,6.507,2404,4.931,2405,4.931,2406,4.931,2407,4.931,2408,4.931,2409,4.931,2410,4.931,2411,3.321,2412,3.321,2413,4.931,2414,3.321,2415,8.661,2416,8.921,2417,3.321,2418,3.321,2419,7.54,2420,8.27,2421,3.321,2422,3.321,2423,4.931,2424,3.321,2425,3.321,2426,4.931,2427,3.321,2428,4.931,2429,3.321,2430,4.931,2431,7.283,2432,4.931,2433,4.931,2434,3.321,2435,3.321,2436,4.931,2437,7.682,2438,8.169,2439,3.321,2440,4.931,2441,3.321,2442,3.321,2443,4.931,2444,4.931,2445,3.321,2446,4.931,2447,3.321,2448,4.931,2449,3.321,2450,4.931,2451,3.321,2452,4.931,2453,3.321,2454,4.931,2455,3.321,2456,3.321,2457,3.321,2458,4.931,2459,3.321,2460,2.674,2461,4.351,2462,4.351,2463,4.351,2464,4.351,2465,2.931,2466,2.931,2467,7.745,2468,3.321,2469,3.321,2470,3.321,2471,3.321,2472,6.507,2473,7.54,2474,7.54,2475,4.931,2476,6.507,2477,8.613,2478,4.931,2479,7.283,2480,6.507,2481,6.507,2482,6.507,2483,6.507,2484,3.321,2485,3.321,2486,3.321,2487,3.321,2488,3.321,2489,3.321,2490,3.321,2491,4.931,2492,3.321,2493,4.931,2494,3.321,2495,4.931,2496,3.321,2497,4.931,2498,3.321,2499,3.321,2500,3.321,2501,3.321,2502,3.321,2503,3.321,2504,3.321]],["title/interfaces/FilterConfig.html",[0,0.058,822,1.616]],["body/interfaces/FilterConfig.html",[0,0.084,2,0.92,3,0.102,4,0.082,5,0.072,8,0.28,9,2.21,12,0.188,13,0.554,14,0.727,18,0.313,19,0.009,26,0.173,35,1.342,36,0.987,45,3.779,47,1.479,50,1.008,52,0.985,59,0.797,60,1.176,61,2.17,66,0.964,75,0.462,77,0.075,94,0.85,97,1.094,107,1.011,109,1.821,110,2.174,112,1.164,113,0.9,116,1.31,126,0.595,129,0.601,144,0.987,145,0.005,146,0.006,147,0.005,148,0.572,150,1.566,172,0.92,178,0.919,185,1.479,192,0.478,196,1.97,198,0.774,240,1.983,248,2.034,270,0.527,271,0.478,278,0.594,284,0.724,335,1.249,338,1.279,341,1.636,345,1.636,351,1.443,361,1.757,369,1.757,378,2.131,387,2.496,389,2.323,396,0.92,408,1.89,425,1.421,436,2.756,439,1.408,447,3.251,451,0.877,503,1.017,550,2.515,566,2.139,568,1.479,578,2.08,592,2.76,623,1.279,643,2.323,649,1.724,652,1.249,679,3.927,699,2.406,703,1.872,713,1.838,725,1.555,733,1.121,752,2.915,754,1.973,756,1.374,759,1.342,761,2.139,767,2.106,768,1.679,806,2.506,808,1.821,822,2.61,823,2.647,825,2.356,826,2.195,827,2.353,835,2.833,855,2.406,856,1.984,859,1.926,860,3.325,863,2.477,871,1.279,874,1.555,878,1.983,887,1.679,889,1.555,901,1.821,911,2.246,912,2.174,913,1.926,916,2.406,917,1.926,918,3.518,920,2.043,921,2.323,922,2.406,923,2.323,924,2.406,925,2.406,926,2.043,954,1.408,1040,1.771,1041,2.595,1045,2.511,1046,2.313,1061,1.872,1201,1.771,1208,2.703,1216,1.983,1238,2.043,1247,1.679,1251,2.313,1254,1.31,1255,2.043,1256,2.106,1257,1.555,1270,1.926,1301,3.013,1326,2.511,1328,2.756,1329,2.66,1331,2.826,1395,1.555,1421,1.983,1682,3.293,1686,2.703,1699,2.823,1766,4.273,1852,3.407,1854,3.013,1855,3.113,1860,2.246,1928,2.595,2046,1.983,2047,3.113,2048,3.781,2049,3.51,2050,3.781,2051,2.958,2052,6.567,2053,5.072,2054,2.958,2055,2.823,2056,2.323,2057,2.496,2058,3.517,2060,2.958,2064,2.823,2065,3.968,2067,2.958,2070,2.958,2072,2.823,2074,2.958,2076,2.703,2077,2.595,2079,2.958,2080,2.958,2083,2.496,2085,2.823,2086,2.958,2087,2.958,2088,3.968,2089,2.703,2091,2.323,2098,3.781,2099,3.781,2100,3.781,2101,3.51,2102,3.51,2103,3.51,2104,4.417,2105,3.51,2106,5.072,2107,5.072,2108,3.781,2109,3.781,2110,3.781,2111,3.781,2112,5.724,2113,3.781,2114,3.781,2115,3.781,2116,3.781,2117,3.781,2118,3.781,2119,3.781,2120,3.781,2121,3.781,2122,3.781,2123,3.113,2124,2.916,2125,5.072,2126,3.781,2127,3.113,2128,3.51,2129,3.51,2130,3.113,2131,3.113,2132,3.51,2133,3.51]],["title/interfaces/FilterRendererSpec.html",[0,0.058,823,1.533]],["body/interfaces/FilterRendererSpec.html",[0,0.084,2,0.924,3,0.103,4,0.083,5,0.072,8,0.281,9,2.326,12,0.188,13,0.519,18,0.313,19,0.009,26,0.173,35,1.347,36,0.992,45,3.787,47,1.485,50,1.009,52,0.987,59,0.799,60,0.881,61,2.174,66,0.968,75,0.446,77,0.075,94,0.853,97,1.098,107,1.013,109,1.828,110,2.183,112,1.168,113,0.901,116,1.315,126,0.596,129,0.603,144,0.992,145,0.005,146,0.006,147,0.005,148,0.602,150,1.57,172,0.924,178,0.922,185,1.485,192,0.48,196,2.068,198,0.754,240,1.991,248,2.04,270,0.527,271,0.48,278,0.595,284,0.725,335,1.254,338,1.284,341,1.643,345,1.643,351,1.449,361,1.762,369,1.987,378,2.136,387,2.507,389,2.333,396,0.924,408,1.894,425,1.607,436,2.762,439,1.414,447,3.255,451,0.881,503,1.15,550,2.519,566,1.601,568,1.485,578,2.085,592,2.906,623,1.284,643,2.333,649,1.732,652,1.254,679,3.49,699,2.416,703,1.88,713,1.724,725,1.561,733,1.124,752,2.922,754,2.061,756,1.38,759,1.347,761,2.419,767,2.115,768,1.687,806,2.189,808,1.828,822,2.32,823,2.764,825,2.381,826,2.201,827,2.519,835,2.92,855,3.237,856,2.243,859,1.934,860,3.391,863,2.201,871,1.284,874,1.561,878,1.991,887,1.687,889,1.561,901,1.828,911,2.255,912,2.183,913,1.934,916,2.416,917,1.934,918,3.35,920,2.052,921,2.333,922,2.416,923,2.333,924,2.416,925,2.416,926,2.052,954,1.414,1040,1.779,1041,2.606,1045,2.518,1046,2.32,1061,1.88,1201,1.779,1208,2.714,1216,1.991,1238,2.052,1247,1.687,1251,2.32,1254,1.315,1255,2.052,1256,2.115,1257,1.561,1270,1.934,1301,2.255,1326,1.88,1328,2.762,1329,2.667,1331,2.115,1395,1.561,1421,1.991,1682,3.307,1686,2.714,1699,2.835,1766,3.797,1852,3.413,1854,3.021,1855,3.126,1860,2.255,1928,2.606,2046,1.991,2047,3.126,2048,3.797,2049,3.525,2050,3.797,2051,2.971,2052,5.736,2053,5.087,2054,2.971,2055,2.835,2056,2.333,2057,2.507,2058,3.524,2060,2.971,2064,2.835,2065,3.979,2067,2.971,2070,2.971,2072,2.835,2074,2.971,2076,2.714,2077,2.606,2079,2.971,2080,2.971,2083,2.507,2085,2.835,2086,2.971,2087,2.971,2088,3.979,2089,2.714,2091,2.333,2098,3.797,2099,3.797,2100,3.797,2101,3.525,2102,3.525,2103,3.525,2104,4.43,2105,3.525,2106,3.797,2107,3.797,2108,3.797,2109,3.797,2110,3.797,2111,3.797,2112,5.736,2113,3.797,2114,3.797,2115,3.797,2116,3.797,2117,3.797,2118,3.797,2119,3.797,2120,3.797,2121,3.797,2122,3.797,2123,3.126,2124,2.924,2125,5.087,2126,3.797,2127,3.126,2128,3.525,2129,3.525,2130,3.126,2131,3.126,2132,3.525,2133,3.525]],["title/components/FilterTestHostComponent.html",[148,0.309,349,1.858]],["body/components/FilterTestHostComponent.html",[3,0.101,4,0.081,5,0.071,8,0.276,9,1.293,12,0.185,13,0.455,14,0.444,18,0.31,19,0.009,25,2.049,26,0.154,47,2.224,50,0.715,52,1.047,58,1.615,59,0.741,60,1.166,63,1.46,72,0.676,75,0.385,77,0.055,84,0.821,86,2.265,112,1.547,113,0.793,126,0.553,129,0.904,144,0.974,145,0.005,146,0.006,147,0.005,148,0.553,149,1.901,150,1.376,151,2.265,153,1.424,154,1.848,165,1.848,166,1.745,167,1.855,178,0.911,192,0.769,196,2.022,198,0.706,213,0.821,214,1.282,215,0.878,245,1.139,248,2.28,270,0.525,271,0.472,278,0.455,284,0.769,319,1.534,320,1.705,321,1.476,322,1.574,323,3.498,324,2.146,325,2.146,326,1.424,327,1.496,328,1.741,329,2.891,330,1.39,331,1.957,332,2.146,333,1.797,334,2.146,335,1.233,336,2.146,337,1.702,338,2.058,339,1.748,340,3.498,341,1.615,342,1.748,343,1.797,344,1.176,345,2.176,346,1.901,347,1.07,348,2.146,349,3.565,350,1.797,351,2.496,352,2.146,353,1.797,354,2.891,355,1.748,356,2.146,357,1.901,358,1.46,359,2.146,360,1.702,361,2.2,362,1.957,363,1.424,364,1.496,365,1.901,366,1.658,367,1.07,368,1.356,369,1.293,370,2.146,371,1.748,372,2.079,373,2.146,374,1.702,375,2.016,376,2.146,396,0.908,403,2.636,425,1.046,443,3.464,454,2.702,473,3.319,484,3.732,511,2.716,537,1.534,565,2.217,592,1.615,597,2.016,623,1.262,649,2.293,656,2.233,703,2.489,726,3.45,728,2.786,729,3.072,733,1.257,754,2.32,759,2.017,760,2.561,761,2.12,762,2.919,786,3.732,791,3.25,806,2.496,823,2.176,825,2.394,860,3.273,877,1.46,881,3.761,896,2.421,905,1.324,917,2.561,918,1.957,1061,2.489,1077,2.176,1208,2.667,1257,2.338,1284,3.493,1328,2.421,1338,3.089,1370,2.561,1536,3.319,2007,4.319,2124,3.498,2135,3.089,2180,3.072,2314,3.25,2324,3.464,2505,6.351,2506,3.732,2507,6.244,2508,7.062,2509,7.062,2510,7.062,2511,4.635,2512,5.446,2513,4.741,2514,4.635,2515,6.244,2516,7.171,2517,7.062,2518,4.635,2519,6.244,2520,4.635,2521,4.635,2522,3.072,2523,2.786,2524,6.244,2525,4.139,2526,4.635,2527,2.176,2528,5.686,2529,4.635,2530,2.667,2531,2.146,2532,1.901,2533,4.635,2534,4.635,2535,4.635,2536,4.091,2537,3.464,2538,4.635,2539,4.091,2540,2.786,2541,4.091,2542,4.091,2543,4.091,2544,4.091,2545,5.028,2546,4.091,2547,6.244,2548,6.244,2549,6.244,2550,6.244,2551,3.732,2552,4.635,2553,4.635]],["title/interfaces/FindParams.html",[0,0.058,2554,2.645]],["body/interfaces/FindParams.html",[0,0.097,2,0.743,3,0.083,4,0.066,5,0.058,8,0.226,12,0.152,13,0.396,14,0.73,18,0.297,19,0.009,20,0.725,25,0.985,26,0.151,34,0.582,35,1.083,41,2.279,50,0.937,52,0.525,57,2.176,59,0.77,66,1.423,71,1.904,72,0.926,75,0.483,76,1.892,77,0.082,80,2.176,84,1.164,86,1.628,90,2.129,97,0.943,107,0.539,111,1.755,112,0.939,113,0.666,124,2.027,126,0.297,134,2.371,142,1.701,144,0.797,145,0.004,146,0.007,147,0.004,148,0.574,153,2.129,154,2.529,164,2.105,166,1.325,172,0.743,178,0.553,192,0.386,194,1.11,198,0.551,200,1.194,201,2.783,213,0.714,215,0.587,240,2.293,241,0.797,245,0.99,246,1.356,270,0.395,271,0.386,278,0.605,284,0.864,314,1.994,321,2.085,347,0.876,367,1.856,391,2.841,392,2.679,396,0.743,411,2.293,425,1.721,447,1.511,451,1.369,457,1.71,473,2.016,502,1.083,503,0.612,547,2.686,548,2.887,549,1.733,550,2.748,551,2.887,552,2.105,553,2.016,556,2.016,563,2.016,565,3.313,566,2.155,567,2.016,568,1.194,569,3.373,570,2.686,571,2.016,572,2.016,573,3.327,574,4.667,576,1.943,577,2.887,578,1.589,579,2.887,580,2.105,581,4.349,582,3.427,583,3.251,584,2.269,585,2.016,586,2.668,587,4.055,589,2.016,591,3.107,592,2.892,593,2.436,594,4.387,595,2.016,597,2.362,598,1.876,599,2.016,602,2.016,604,2.728,605,1.255,606,2.016,607,2.016,609,2.016,610,2.016,612,2.016,613,2.783,614,1.943,615,2.016,616,1.813,617,1.876,618,2.016,619,1.194,620,2.887,621,2.016,623,1.033,624,2.016,642,2.095,649,1.392,708,2.182,716,1.224,733,0.675,753,1.555,871,1.033,877,1.998,880,1.876,887,1.356,889,2.427,897,1.649,913,2.227,917,1.555,920,1.649,926,1.649,1031,3.125,1061,1.511,1066,4.164,1077,2.414,1258,1.601,1294,1.755,1302,1.755,1306,1.701,1326,2.923,1395,1.798,1457,3.289,1496,1.755,1541,3.107,1689,2.095,1761,3.139,1814,3.421,1868,2.388,2007,2.016,2032,3.599,2091,1.876,2124,1.755,2512,3.421,2513,4.407,2522,2.513,2523,2.279,2540,3.814,2554,4.586,2555,2.388,2556,2.279,2557,5.35,2558,5.062,2559,5.35,2560,3.808,2561,5.153,2562,3.996,2563,2.513,2564,2.279,2565,2.659,2566,2.659,2567,2.659,2568,5.35,2569,2.659,2570,2.659,2571,3.808,2572,2.659,2573,2.659,2574,2.659,2575,4.449,2576,2.659,2577,4.449,2578,2.513,2579,2.659,2580,2.659,2581,4.449,2582,2.659,2583,2.513,2584,2.659,2585,2.513,2586,2.659,2587,2.659,2588,2.659,2589,2.659,2590,2.659,2591,3.808,2592,2.659,2593,2.513,2594,2.659,2595,2.659,2596,2.659,2597,2.659,2598,2.659,2599,2.513,2600,2.659,2601,2.659,2602,2.659,2603,2.513,2604,2.659,2605,2.659,2606,2.513,2607,2.659,2608,2.659,2609,3.264,2610,3.808,2611,3.808,2612,2.659,2613,2.659,2614,4.449,2615,3.808,2616,4.449,2617,2.659,2618,4.449,2619,4.449,2620,2.659,2621,2.659,2622,2.659,2623,2.659,2624,2.659,2625,2.659,2626,2.659,2627,2.513,2628,2.659,2629,2.659,2630,2.659,2631,2.659,2632,2.659,2633,2.659,2634,2.659,2635,3.808,2636,2.182,2637,2.513,2638,2.659,2639,2.659,2640,2.659,2641,2.659,2642,3.996,2643,2.279,2644,2.659,2645,2.659,2646,2.659,2647,2.659,2648,2.659,2649,3.808,2650,2.659,2651,2.659,2652,2.659,2653,2.659,2654,2.659,2655,2.659,2656,2.659,2657,2.659,2658,2.659,2659,2.659,2660,2.659,2661,2.388,2662,2.659,2663,2.659,2664,4.858,2665,2.659,2666,4.205,2667,2.659,2668,2.659,2669,2.659,2670,2.659,2671,2.659,2672,2.659,2673,2.659,2674,2.659,2675,2.659,2676,2.659,2677,2.659,2678,2.659,2679,4.449,2680,2.659,2681,2.659,2682,2.659,2683,2.659,2684,2.659,2685,2.659,2686,2.659,2687,2.659,2688,2.388]],["title/interfaces/FindableWidget.html",[0,0.058,2642,2.772]],["body/interfaces/FindableWidget.html",[0,0.105,2,0.75,3,0.084,4,0.067,5,0.059,8,0.228,12,0.153,13,0.399,14,0.367,18,0.294,19,0.009,20,0.733,25,1.421,26,0.152,34,0.588,35,1.094,41,2.303,50,0.939,52,0.531,57,2.096,59,0.773,66,1.429,71,1.912,72,0.931,75,0.484,76,1.335,77,0.076,80,2.143,84,1.166,86,1.64,90,1.961,97,0.95,107,0.545,111,1.773,112,0.949,113,0.574,124,2.037,126,0.3,134,2.343,142,1.718,144,0.805,145,0.004,146,0.007,147,0.004,148,0.575,153,2.139,154,2.181,164,1.485,166,1.331,172,0.75,178,0.559,192,0.39,194,1.121,198,0.555,200,1.206,201,2.803,213,0.719,215,0.414,240,1.617,241,0.805,245,0.997,246,1.37,270,0.397,271,0.39,278,0.606,284,0.866,314,2.009,321,2.088,347,0.885,367,1.82,391,2.855,392,2.694,396,0.75,411,2.31,425,1.661,447,1.527,451,1.375,457,1.723,473,2.036,502,1.094,503,0.883,547,3.157,548,3.913,549,1.74,550,2.754,551,2.908,552,2.121,553,2.036,556,2.036,563,2.036,565,3.661,566,2.167,567,2.036,568,1.206,569,3.392,570,2.706,571,2.036,572,2.036,573,3.331,574,4.594,576,1.963,577,2.908,578,1.601,579,2.908,580,2.121,581,4.36,582,3.443,583,3.27,584,2.282,585,2.036,586,2.676,587,4.069,589,2.036,591,3.122,592,2.857,593,2.454,594,4.358,595,2.036,597,2.38,598,1.895,599,2.036,602,2.036,604,2.738,605,1.268,606,2.036,607,2.036,609,2.036,610,2.036,612,2.036,613,2.803,614,1.963,615,2.036,616,1.832,617,1.895,618,2.036,619,1.206,620,2.908,621,2.036,623,1.043,624,2.036,642,2.116,649,1.407,708,2.205,716,1.237,733,0.682,753,1.571,871,1.49,877,2.009,880,1.895,887,1.37,889,2.304,897,1.666,913,2.617,917,1.571,920,2.38,926,1.666,1031,3.672,1061,1.527,1066,3.836,1077,2.425,1258,1.617,1294,1.773,1302,1.773,1306,1.718,1326,2.934,1395,1.811,1457,3.302,1496,1.773,1541,3.122,1689,2.116,1761,3.157,1814,2.413,1868,2.413,2007,2.036,2032,3.626,2091,1.895,2124,1.773,2512,3.446,2513,4.184,2522,2.539,2523,2.303,2540,3.836,2554,4.425,2555,2.413,2556,2.303,2557,4.475,2558,4.637,2559,4.475,2560,2.686,2561,5.075,2562,4.019,2563,2.539,2564,2.303,2565,2.686,2566,2.686,2567,2.686,2568,5.368,2569,2.686,2570,2.686,2571,3.836,2572,2.686,2573,2.686,2574,2.686,2575,4.881,2576,2.686,2577,4.881,2578,2.539,2579,2.686,2580,2.686,2581,4.475,2582,2.686,2583,2.539,2584,2.686,2585,2.539,2586,2.686,2587,2.686,2588,2.686,2589,2.686,2590,2.686,2591,3.836,2592,2.686,2593,2.539,2594,2.686,2595,2.686,2596,2.686,2597,2.686,2598,2.686,2599,2.539,2600,2.686,2601,2.686,2602,2.686,2603,2.539,2604,2.686,2605,2.686,2606,2.539,2607,2.686,2608,2.686,2609,3.288,2610,3.836,2611,3.836,2612,2.686,2613,2.686,2614,4.475,2615,3.836,2616,4.475,2617,2.686,2618,4.475,2619,4.475,2620,2.686,2621,2.686,2622,2.686,2623,2.686,2624,2.686,2625,2.686,2626,2.686,2627,2.539,2628,2.686,2629,2.686,2630,2.686,2631,2.686,2632,2.686,2633,2.686,2634,2.686,2635,3.836,2636,2.205,2637,2.539,2638,2.686,2639,2.686,2640,2.686,2641,2.686,2642,4.637,2643,3.288,2644,2.686,2645,3.836,2646,3.836,2647,2.686,2648,2.686,2649,3.836,2650,2.686,2651,2.686,2652,2.686,2653,2.686,2654,2.686,2655,2.686,2656,2.686,2657,2.686,2658,2.686,2659,2.686,2660,2.686,2661,2.413,2662,2.686,2663,2.686,2664,4.881,2665,2.686,2666,4.229,2667,2.686,2668,2.686,2669,2.686,2670,2.686,2671,2.686,2672,2.686,2673,2.686,2674,2.686,2675,2.686,2676,2.686,2677,2.686,2678,2.686,2679,4.475,2680,2.686,2681,2.686,2682,2.686,2683,2.686,2684,2.686,2685,2.686,2686,2.686,2687,2.686,2688,2.413,2689,3.831]],["title/components/FormCheckboxComponent.html",[148,0.309,350,1.706]],["body/components/FormCheckboxComponent.html",[3,0.095,4,0.076,5,0.067,8,0.476,12,0.174,13,0.437,14,0.783,18,0.32,19,0.009,26,0.131,27,1.308,34,0.92,50,0.686,52,1.021,59,0.837,60,0.815,62,2.635,63,1.374,71,1.556,72,1.247,75,0.466,77,0.052,82,1.754,94,1.124,96,2.654,97,0.758,98,1.52,99,2.316,107,1.246,113,0.811,117,2.143,126,0.578,129,1.046,130,6.108,132,3.855,145,0.004,146,0.006,147,0.004,148,0.517,149,1.789,150,1.321,151,1.308,153,1.341,154,1.739,165,1.739,166,1.743,167,1.854,170,1.754,178,0.875,185,1.887,188,2.607,192,0.922,198,0.743,213,0.969,214,1.586,215,0.924,270,0.426,271,0.444,278,0.318,319,1.444,320,1.662,321,1.742,322,2.035,323,3.411,324,2.02,325,2.02,326,1.341,327,1.409,328,1.671,329,2.774,330,1.308,331,1.842,332,2.02,333,1.691,334,2.02,335,1.16,336,2.02,337,1.602,338,2.007,339,1.646,340,3.411,341,1.52,342,1.646,343,1.691,344,1.107,345,1.52,346,1.789,347,1.581,348,2.02,349,1.842,350,2.857,351,2.708,352,2.02,353,1.691,354,2.774,355,1.646,356,2.02,357,1.789,358,1.374,359,2.02,360,1.602,361,1.909,362,1.842,363,1.341,364,1.409,365,1.789,366,1.56,367,1.008,368,1.277,369,1.217,370,2.02,371,1.646,372,1.957,373,2.02,374,1.602,375,1.898,376,2.02,396,1.174,436,2.323,451,0.815,457,1.887,503,0.967,524,1.188,526,3.634,550,1.984,639,5.686,642,3.311,646,2.236,650,4.599,655,4.479,656,2.448,657,4.479,658,5.116,659,4.479,660,4.479,661,4.479,662,4.479,663,4.479,664,4.479,665,4.202,666,4.479,667,2.53,671,5.596,675,3.261,677,2.087,678,3.06,679,3.782,680,3.261,681,1.444,683,1.898,684,4.479,686,3.261,687,3.261,688,4.202,689,3.449,691,3.261,693,3.261,694,3.06,696,3.06,697,3.261,699,2.236,700,4.479,702,5.964,703,1.739,704,3.261,705,2.087,707,2.623,708,2.511,709,2.511,711,2.087,713,1.056,715,3.261,716,2.494,725,1.444,797,2.087,829,4.267,851,3.071,871,1.632,1046,1.602,1049,3.071,1051,4.071,1825,4.825,1903,4.918,2208,3.972,2294,5.772,2690,5.417,2691,6.108,2692,3.513,2693,5.993,2694,6.845,2695,6.845,2696,6.845,2697,3.851,2698,4.363,2699,4.825,2700,4.363,2701,5.993,2702,4.363,2703,6.041,2704,6.845,2705,4.363,2706,4.363,2707,3.513,2708,3.513,2709,3.513,2710,3.513,2711,3.513,2712,3.513,2713,3.513,2714,3.513,2715,3.513,2716,3.513,2717,3.513,2718,3.513,2719,3.513,2720,3.513,2721,3.513,2722,4.363,2723,4.363,2724,3.261,2725,3.851,2726,4.363,2727,3.513,2728,3.513,2729,4.825]],["title/components/FormInputComponent.html",[148,0.309,353,1.706]],["body/components/FormInputComponent.html",[3,0.074,4,0.059,5,0.052,8,0.452,12,0.135,13,0.364,14,0.745,18,0.32,19,0.009,25,1.296,26,0.13,34,0.912,35,0.964,50,0.572,52,1.078,57,0.898,59,0.871,60,0.63,61,0.964,62,1.785,63,1.063,71,1.903,72,0.866,75,0.474,77,0.04,82,1.46,94,0.989,96,2.301,97,1.031,98,1.176,99,1.78,106,1.695,107,1.299,109,1.935,112,0.836,113,0.354,126,0.687,129,1.062,132,3.385,144,1.248,145,0.003,146,0.005,147,0.003,148,0.546,149,1.384,150,1.1,151,1.012,152,2.029,153,1.037,154,1.346,165,1.346,166,1.709,167,1.813,168,1.935,170,1.46,178,0.728,185,1.571,192,0.92,194,2.144,195,1.063,198,0.789,200,1.87,213,0.996,214,1.504,215,0.886,241,1.049,245,1.082,248,1.611,270,0.369,271,0.344,278,0.478,284,0.605,314,1.24,319,1.118,320,1.579,321,1.792,322,1.695,323,3.036,324,1.563,325,1.563,326,1.037,327,1.09,328,1.392,329,2.31,330,1.012,331,1.425,332,1.563,333,1.309,334,1.563,335,0.898,336,1.563,337,1.24,338,1.786,339,1.273,340,3.036,341,1.176,342,1.273,343,1.309,344,0.856,345,1.176,346,1.384,347,1.371,348,1.563,349,1.425,350,1.309,351,2.703,352,1.563,353,2.543,354,2.31,355,1.273,356,1.563,357,1.384,358,1.063,359,1.563,360,1.24,361,1.656,362,1.425,363,1.037,364,1.09,365,1.384,366,1.207,367,0.78,368,0.988,369,0.941,370,1.563,371,1.273,372,1.514,373,1.563,374,1.24,375,1.468,376,1.563,396,0.977,436,1.935,451,0.63,503,0.805,524,0.919,526,3.496,550,1.652,566,1.695,586,2.227,592,1.739,616,3.137,617,2.469,639,5.468,646,1.73,650,4.299,652,1.327,655,3.73,656,2.123,657,3.73,658,4.437,659,3.73,660,3.73,661,3.73,662,3.73,663,5.665,664,3.73,665,3.499,666,3.73,667,2.107,671,5.137,675,2.523,677,1.614,678,2.367,679,4.466,680,2.523,681,1.652,683,1.468,684,3.73,686,2.523,687,2.523,688,3.499,689,2.872,691,2.523,693,2.523,694,2.367,696,2.367,697,2.523,699,1.73,700,3.73,702,3.73,703,1.346,704,2.523,705,1.614,707,2.029,708,1.943,709,1.943,711,1.614,713,0.817,715,2.523,716,1.09,725,1.118,733,1.167,797,1.614,825,1.327,844,2.065,856,1.571,878,2.107,906,2.503,936,2.31,980,2.653,1006,2.047,1040,1.273,1044,2.663,1049,3.586,1053,3,1077,1.176,1136,3.307,1149,3.307,1227,4.018,1243,3.156,1245,2.748,1247,2.123,1249,2.435,1264,3.245,1265,3.036,1270,1.384,1306,1.514,1324,3.486,1326,1.989,1338,2.469,1339,2.557,1445,1.73,1506,2.937,1659,3.486,1757,4.404,1761,2.469,1785,4.018,1820,3.307,1860,1.614,1908,5.939,2064,3,2127,4.347,2208,3.307,2230,2.718,2278,5.281,2564,3,2583,4.347,2690,5.688,2697,2.979,2699,4.018,2707,2.718,2708,2.718,2709,2.718,2710,2.718,2711,2.718,2712,2.718,2713,2.718,2714,2.718,2715,2.718,2716,2.718,2717,2.718,2718,2.718,2719,2.718,2720,2.718,2721,2.718,2724,2.523,2727,2.718,2728,2.718,2730,6.414,2731,2.367,2732,4.99,2733,6.559,2734,6.559,2735,2.979,2736,5.239,2737,4.404,2738,6.999,2739,6.559,2740,5.239,2741,5.239,2742,4.78,2743,5.635,2744,5.937,2745,5.937,2746,4.99,2747,3.376,2748,5.239,2749,3.376,2750,4.404,2751,3.376,2752,5.788,2753,3.376,2754,4.404,2755,4.404,2756,4.404,2757,4.99,2758,3.376,2759,4.404,2760,2.979,2761,3.376,2762,3.376,2763,3.376,2764,6.559,2765,6.559,2766,4.99,2767,4.99,2768,3.376,2769,3.376,2770,4.404,2771,3.376,2772,4.404,2773,4.99,2774,3.307,2775,4.99,2776,4.99,2777,3.376,2778,4.404,2779,4.404,2780,5.239,2781,2.979,2782,3.376,2783,2.979,2784,4.404,2785,3.376,2786,3.376,2787,5.937,2788,4.404,2789,4.99,2790,3.376,2791,3.376,2792,3.376,2793,3.376,2794,4.99,2795,3.376,2796,3.376,2797,3.376,2798,3.376,2799,3.376,2800,3.376,2801,3.376,2802,3.376,2803,3.376,2804,3.376,2805,2.979,2806,2.979,2807,4.99,2808,2.979,2809,2.718,2810,2.979,2811,4.404,2812,2.979,2813,3.499,2814,5.937,2815,4.99,2816,5.239,2817,4.99,2818,2.979,2819,3.376,2820,3.376,2821,3.376]],["title/components/FormSelectComponent.html",[148,0.309,355,1.66]],["body/components/FormSelectComponent.html",[3,0.098,4,0.079,5,0.069,8,0.446,12,0.18,13,0.447,14,0.789,18,0.318,19,0.009,26,0.098,30,1.519,34,0.692,50,0.516,52,1.035,59,0.846,60,0.842,61,1.288,63,1.42,71,1.592,72,0.658,75,0.45,77,0.054,82,1.794,86,1.352,94,1.088,96,2.699,97,0.783,98,1.571,99,2.088,100,1.531,107,1.063,113,0.473,126,0.612,129,1.031,132,3.587,138,2.722,145,0.004,146,0.006,147,0.004,148,0.524,149,1.849,150,1.351,151,1.352,152,2.71,153,1.385,154,1.797,165,1.797,166,1.751,167,1.86,168,2.376,170,1.794,178,0.895,185,1.93,188,2.666,192,0.917,195,1.42,198,0.716,200,1.93,213,0.982,214,1.604,215,0.93,241,0.948,270,0.465,271,0.459,278,0.447,319,1.493,320,1.685,321,1.905,322,2.081,323,3.459,324,2.087,325,2.087,326,1.385,327,1.456,328,1.709,329,2.837,330,1.352,331,1.904,332,2.087,333,1.748,334,2.087,335,1.199,336,2.087,337,1.656,338,2.035,339,1.701,340,3.459,341,1.571,342,1.701,343,1.748,344,2.091,345,1.571,346,1.849,347,1.725,348,2.087,349,1.904,350,1.748,351,2.746,352,2.087,353,1.748,354,2.837,355,2.818,356,2.087,357,1.849,358,1.42,359,2.087,360,1.656,361,1.942,362,1.904,363,1.385,364,1.456,365,1.849,366,1.613,367,1.041,368,1.32,369,1.258,370,2.087,371,1.701,372,2.023,373,2.087,374,1.656,375,1.962,376,2.087,451,0.842,503,0.989,524,1.228,526,3.65,550,2.029,639,5.672,642,3.386,646,2.31,650,4.453,655,4.581,656,2.49,657,4.581,658,5.204,659,4.581,660,4.581,661,4.581,662,4.581,663,4.581,664,4.581,665,4.298,666,4.581,667,2.588,670,3.98,671,5.883,675,3.37,677,2.157,678,3.162,679,2.491,680,3.37,681,1.493,683,1.962,684,4.581,686,3.37,687,3.37,688,4.298,689,3.527,691,3.37,693,3.37,694,3.162,696,3.162,697,3.37,699,2.31,700,4.581,702,4.581,703,1.797,704,3.37,705,2.931,707,2.71,708,2.595,709,2.595,711,2.157,713,1.091,715,3.37,716,1.456,725,1.493,797,2.157,923,2.231,1049,3.141,1143,3.162,1282,2.157,1310,1.849,1825,4.935,2170,3.971,2171,2.84,2182,3.162,2206,4.935,2207,6.015,2208,5.342,2301,3.631,2690,4.952,2707,3.631,2708,3.631,2709,3.631,2710,3.631,2711,3.631,2712,3.631,2713,3.631,2714,3.631,2715,3.631,2716,3.631,2717,3.631,2718,3.631,2719,3.631,2720,3.631,2721,3.631,2724,3.37,2727,3.631,2729,5.606,2735,3.98,2778,5.409,2780,3.98,2808,3.98,2809,3.631,2810,3.98,2811,5.409,2812,3.98,2818,5.409,2822,5.584,2823,3.98,2824,6.963,2825,6.129,2826,6.963,2827,6.129,2828,4.509,2829,4.509,2830,4.509,2831,4.509,2832,4.509,2833,4.509,2834,6.129,2835,7.471,2836,4.509,2837,4.509,2838,4.509,2839,4.509]],["title/classes/FormValidators.html",[77,0.052,2840,3.289]],["body/classes/FormValidators.html",[3,0.134,4,0.107,5,0.094,8,0.446,12,0.245,14,0.715,18,0.264,19,0.009,25,2.272,26,0.134,34,1.147,52,1.192,59,0.643,71,1.94,75,0.44,77,0.073,80,1.987,84,0.806,113,0.784,126,0.701,145,0.006,146,0.007,147,0.006,178,1.09,192,0.891,194,1.794,198,0.76,213,0.982,214,1.534,215,0.808,270,0.381,278,0.611,284,0.821,342,2.818,347,1.725,351,2.295,378,1.838,505,4.706,642,4.128,650,4.453,667,3.154,688,5.239,689,3.527,713,1.808,725,2.029,886,2.353,999,3.064,1506,3.987,2055,4.491,2606,4.952,2742,6.015,2840,5.584,2841,5.409,2842,7.113,2843,7.471,2844,7.471,2845,7.471,2846,7.471,2847,6.129,2848,7.471,2849,8.39,2850,7.889,2851,6.594,2852,7.591,2853,7.471,2854,8.06,2855,6.129,2856,7.471,2857,6.015,2858,6.594,2859,7.471,2860,8.06,2861,6.129,2862,6.129,2863,6.129,2864,6.129,2865,6.129,2866,6.129,2867,7.471]],["title/interfaces/FunctionRenderer.html",[0,0.058,836,1.706]],["body/interfaces/FunctionRenderer.html",[0,0.11,2,0.781,3,0.087,4,0.07,5,0.061,8,0.238,9,2.163,12,0.159,13,0.545,15,2.673,18,0.305,19,0.009,20,1.076,21,3.631,22,2.979,26,0.187,27,2.125,30,1.975,34,1.002,35,1.139,36,1.371,38,1.972,39,2.961,40,2.628,43,1.846,47,2.054,50,0.948,52,1.187,55,2.774,57,1.497,58,1.961,59,0.591,60,0.745,61,1.139,64,1.225,65,2.182,66,1.34,67,2.123,72,1.091,73,2.926,75,0.475,76,1.389,77,0.078,78,1.635,79,1.589,82,1.647,84,1.02,89,2.99,90,1.225,94,0.957,97,0.693,98,1.389,100,2.406,110,1.846,112,1.852,113,0.784,116,1.112,117,2.534,118,3.09,122,1.287,123,3.334,124,1.647,125,2.119,126,0.511,127,2.851,128,2.182,129,0.72,131,1.788,132,2.448,133,2.119,134,1.863,135,1.589,136,2.119,137,2.123,139,2.043,141,2.992,143,2.119,145,0.004,146,0.006,147,0.004,148,0.581,150,0.879,161,2.295,192,0.664,194,1.167,195,1.256,196,1.834,198,0.616,200,1.256,208,3.281,213,0.524,219,3.239,222,2.273,225,1.589,234,3.227,240,1.683,246,2.333,270,0.441,278,0.41,284,0.573,320,1.686,330,1.195,367,0.921,369,1.112,386,1.287,396,1.278,408,1.06,425,1.686,439,2.125,451,0.745,454,1.426,502,1.139,503,1.053,515,2.295,524,1.776,566,1.354,619,1.256,643,1.972,648,1.817,681,1.32,703,1.589,713,0.965,752,1.635,754,2.336,755,2.825,756,1.167,758,2.106,759,2.024,760,2.308,761,2.811,765,1.972,768,1.426,770,2.474,792,1.354,803,2.119,804,2.119,805,2.397,806,2.004,807,2.376,808,2.529,809,3.383,810,2.675,811,3.11,812,3.754,813,2.043,814,1.683,815,3.468,816,1.683,817,1.683,818,3.342,819,1.589,820,1.225,821,1.546,822,1.464,823,1.961,824,1.635,825,1.497,826,1.961,827,2.16,828,2.308,829,3.915,830,3.921,831,3.754,832,2.884,833,2.067,834,2.469,835,2.673,836,2.747,837,3.921,838,3.506,839,4.26,840,3.11,841,2.397,842,2.243,843,2.308,844,2.232,845,2.397,846,2.6,847,2.397,848,2.397,849,1.683,850,1.683,851,2.043,852,1.589,853,1.683,854,2.295,855,2.884,856,1.772,857,2.397,858,2.203,859,2.308,860,2.747,861,1.32,862,2.461,863,1.389,864,1.683,865,2.397,866,2.067,867,3.921,868,3.383,869,3.383,870,3.383,871,1.776,872,2.397,873,2.397,874,2.16,875,2.397,876,3.11,877,1.772,878,1.683,879,1.354,880,1.972,881,1.846,882,2.397,883,2.203,884,2.397,885,2.203,886,1.256,887,1.426,888,2.397,889,1.32,890,2.397,891,2.119,892,1.589,893,2.295,894,2.397,895,2.397,896,1.546,897,1.734,898,2.295,899,2.203,900,2.397,901,1.546,902,2.295,903,2.397,904,3.11,905,1.139,906,1.426,907,2.043,908,2.119,909,3.383,910,2.397,911,1.907,912,1.846,913,1.635,914,2.295,915,1.635,916,2.043,917,1.635,918,1.683,919,1.635,920,1.734,921,1.972,922,2.043,923,1.972,924,2.043,925,2.043,926,1.734,927,2.295,2868,3.519,2869,3.21]],["title/pipes/FunctionRendererPipe.html",[2870,3.086,2871,2.917]],["body/pipes/FunctionRendererPipe.html",[3,0.146,4,0.117,5,0.103,8,0.399,13,0.574,14,0.641,18,0.236,19,0.009,26,0.146,52,0.928,59,0.703,64,2.42,75,0.43,77,0.08,97,1.369,113,0.827,145,0.007,146,0.008,147,0.007,165,2.669,178,0.977,192,0.682,194,1.959,213,0.88,214,1.375,215,0.905,270,0.417,271,0.682,278,0.574,425,1.777,457,2.481,549,1.862,652,1.781,699,4.036,754,2.046,761,2.934,833,2.893,836,3.054,866,2.893,1629,4.188,2077,4.352,2537,6.457,2870,5.524,2871,5.221,2872,4.438,2873,6.952,2874,5.91,2875,7.878,2876,6.952,2877,5.91,2878,6.952,2879,6.696,2880,6.952,2881,6.696]],["title/interfaces/GlobalButton.html",[0,0.058,840,2.432]],["body/interfaces/GlobalButton.html",[0,0.11,2,0.781,3,0.087,4,0.07,5,0.061,8,0.238,9,2.163,12,0.159,13,0.516,15,2.673,18,0.309,19,0.009,20,1.076,21,3.63,22,2.979,26,0.187,27,2.124,30,2.017,34,1.001,35,1.138,36,1.371,38,1.971,39,3.001,40,2.672,43,1.845,47,2.054,50,0.948,52,1.205,55,2.773,57,1.06,58,1.96,59,0.59,60,0.744,61,1.138,64,1.224,65,2.181,66,1.339,67,2.122,72,1.091,73,2.959,75,0.471,76,1.388,77,0.078,78,1.634,79,1.588,82,1.646,84,1.019,89,2.927,90,1.224,94,0.956,97,0.692,98,1.388,100,2.406,110,1.845,112,1.922,113,0.784,116,1.111,117,2.534,118,3.09,122,1.286,123,3.334,124,1.646,125,2.118,126,0.511,127,2.851,128,2.181,129,0.72,131,1.787,132,2.447,133,2.118,134,1.863,135,1.588,136,2.118,137,2.122,139,2.042,141,2.991,143,2.118,145,0.004,146,0.006,147,0.004,148,0.571,150,0.878,161,2.293,192,0.573,194,1.166,195,1.255,196,1.833,198,0.567,200,1.255,208,3.28,219,3.753,222,1.96,225,1.588,234,3.226,240,1.683,246,2.012,270,0.441,278,0.41,284,0.573,320,1.686,330,1.195,367,0.92,369,1.111,386,1.286,396,1.277,408,1.06,425,1.686,439,2.124,451,0.744,454,1.425,502,1.138,503,1.144,515,2.293,524,1.776,566,1.353,619,1.255,643,1.971,648,1.816,681,1.319,703,1.588,713,0.964,752,1.634,754,2.329,755,2.6,756,1.166,758,2.105,759,2.024,760,2.307,761,2.764,765,1.971,768,1.425,770,2.474,792,1.353,803,2.118,804,2.118,805,2.395,806,2.004,807,2.375,808,3.006,809,3.382,810,2.675,811,3.108,812,3.753,813,2.042,814,1.683,815,3.766,816,1.683,817,1.683,818,3.341,819,1.588,820,1.224,821,1.545,822,1.463,823,1.96,824,1.634,825,1.496,826,1.96,827,2.159,828,2.307,829,3.914,830,3.92,831,3.753,832,2.883,833,1.463,834,2.469,835,2.672,836,2.528,837,3.92,838,3.697,839,4.492,840,3.603,841,2.395,842,2.243,843,2.307,844,2.231,845,2.395,846,2.6,847,2.395,848,2.395,849,1.683,850,1.683,851,2.042,852,1.588,853,1.683,854,2.293,855,2.883,856,1.772,857,2.395,858,2.202,859,2.307,860,2.747,861,1.319,862,2.46,863,1.388,864,1.683,865,2.395,866,2.066,867,3.92,868,3.382,869,3.382,870,3.382,871,1.532,872,2.395,873,2.395,874,2.159,875,2.395,876,3.108,877,1.772,878,1.683,879,1.353,880,1.971,881,1.845,882,2.395,883,2.202,884,2.395,885,2.202,886,1.255,887,1.425,888,2.395,889,1.319,890,2.395,891,2.118,892,1.588,893,2.293,894,2.395,895,2.395,896,1.545,897,1.733,898,2.293,899,2.202,900,2.395,901,1.545,902,2.293,903,2.395,904,3.108,905,1.138,906,1.425,907,2.042,908,2.118,909,3.382,910,2.395,911,1.906,912,1.845,913,1.634,914,2.293,915,1.634,916,2.042,917,1.634,918,1.683,919,1.634,920,1.733,921,1.971,922,2.042,923,1.971,924,2.042,925,2.042,926,1.733,927,2.293]],["title/interfaces/GridColumn.html",[0,0.058,759,1.257]],["body/interfaces/GridColumn.html",[0,0.107,2,0.702,3,0.078,4,0.063,5,0.055,8,0.214,9,2.208,12,0.143,13,0.523,14,0.818,15,2.547,18,0.315,19,0.009,20,0.998,21,3.836,22,3.079,26,0.183,27,2.024,30,1.914,34,0.944,35,1.024,36,1.293,38,1.774,39,2.886,40,2.556,43,1.66,47,2.259,50,0.924,52,1.151,55,2.677,57,0.954,58,1.818,59,0.547,60,0.974,61,1.024,64,1.603,65,2.617,66,1.473,67,1.968,72,1.155,73,2.884,75,0.489,76,1.25,77,0.08,78,1.471,79,1.43,82,1.976,84,0.984,89,2.837,90,1.603,94,1.01,97,0.906,98,1.25,100,2.293,110,1.66,112,1.777,113,0.811,116,1,117,2.414,118,2.995,122,1.158,123,3.286,124,1.799,125,1.906,126,0.482,127,2.831,128,2.022,129,0.787,131,1.609,132,2.269,133,1.906,134,2.049,135,1.43,136,1.906,137,1.968,139,2.673,141,2.773,143,1.906,145,0.004,146,0.005,147,0.004,148,0.566,150,0.79,161,3.002,192,0.626,194,1.527,195,1.643,196,1.77,198,0.587,200,1.643,208,3.125,219,3.002,222,2.142,225,1.43,234,3.34,240,1.514,246,1.866,270,0.42,278,0.38,284,0.626,320,1.849,330,1.075,367,1.205,369,1,386,1.684,396,1.322,408,0.954,425,1.689,439,2.024,451,0.67,454,1.283,502,1.49,503,0.992,515,2.064,524,1.954,566,1.218,619,1.643,643,1.774,648,1.684,681,1.727,703,1.43,713,1.263,752,1.471,754,2.368,755,2.451,756,1.049,758,2.417,759,2.207,760,3.07,761,2.903,765,1.774,768,1.283,770,2.621,792,1.218,803,1.906,804,1.906,805,2.156,806,1.889,807,2.203,808,2.384,809,3.136,810,2.522,811,2.882,812,3.539,813,1.838,814,1.514,815,3.268,816,1.514,817,1.514,818,4.056,819,1.43,820,1.102,821,1.39,822,1.317,823,2.352,824,1.471,825,1.908,826,1.818,827,2.035,828,2.769,829,3.963,830,3.696,831,3.886,832,2.673,833,1.317,834,2.499,835,2.763,836,2.902,837,3.696,838,3.34,839,4.058,840,2.882,841,2.156,842,2.079,843,2.139,844,2.259,845,2.156,846,2.451,847,2.156,848,2.156,849,1.514,850,1.514,851,1.838,852,1.43,853,1.514,854,2.064,855,2.673,856,1.936,857,2.156,858,1.981,859,2.522,860,2.617,861,1.727,862,2.824,863,1.818,864,2.203,865,3.136,866,2.479,867,4.499,868,4.058,869,4.499,870,4.058,871,1.839,872,3.136,873,3.136,874,2.478,875,3.136,876,3.73,877,2.126,878,2.203,879,1.771,880,2.581,881,3.125,882,3.136,883,2.882,884,3.136,885,2.882,886,1.643,887,1.866,888,3.136,889,1.727,890,3.136,891,2.773,892,2.079,893,3.002,894,3.136,895,4.058,896,2.022,897,2.269,898,3.002,899,2.882,900,3.136,901,2.022,902,3.002,903,3.136,904,3.73,905,1.49,906,1.866,907,2.673,908,2.773,909,4.499,910,4.058,911,1.715,912,1.66,913,1.471,914,2.064,915,1.471,916,1.838,917,1.471,918,1.514,919,1.471,920,1.56,921,1.774,922,1.838,923,1.774,924,1.838,925,1.838,926,1.56,927,2.064]],["title/interfaces/GridDataFetchResult.html",[0,0.058,1284,2.177]],["body/interfaces/GridDataFetchResult.html",[0,0.094,2,0.416,3,0.046,4,0.037,5,0.033,8,0.127,9,1.569,12,0.29,13,0.372,14,0.423,15,1.665,18,0.243,19,0.009,20,0.665,22,0.847,25,0.552,26,0.164,27,1.043,30,1.706,31,0.925,34,1.114,36,1.65,39,0.76,40,1.817,42,1.017,47,0.669,50,0.876,52,0.612,55,2.951,59,0.762,60,1.191,61,1.901,62,0.76,63,0.669,64,1.856,66,0.714,67,1.312,71,0.903,72,0.508,73,2.674,75,0.418,76,1.212,77,0.052,79,0.847,80,0.925,82,0.622,83,2.066,84,0.671,85,3.294,86,1.811,87,0.925,89,2.81,90,0.653,92,3.479,94,1.047,96,1.349,97,0.886,98,0.741,99,2.124,100,0.722,106,1.911,107,1.174,109,2.181,112,0.527,113,0.723,116,1.231,117,1.244,118,2.342,122,0.686,123,2.598,124,1.018,126,0.688,127,1.244,128,0.824,129,0.816,134,1.457,135,0.847,137,1.665,138,2.222,140,2.123,144,1.448,145,0.003,146,0.003,147,0.002,148,0.509,150,0.767,151,1.324,164,1.349,166,0.407,167,0.714,168,0.824,170,0.622,172,1.569,175,1.13,176,1.13,177,1.13,178,0.644,185,1.095,192,0.216,195,2.231,196,1.428,198,0.384,205,1.017,213,0.74,215,0.477,220,1.13,221,1.513,222,0.741,227,0.802,229,2.712,241,1.399,242,1.849,245,1.414,246,0.76,248,1.123,252,0.925,261,1.13,268,1.089,270,0.452,271,0.216,278,0.641,284,0.85,287,2.712,314,1.277,320,0.996,321,0.822,326,0.653,327,0.686,328,1.231,335,0.565,338,0.579,344,0.539,347,0.803,358,0.669,363,0.653,364,0.686,368,1.018,385,1.61,386,0.686,392,0.898,396,0.681,402,0.954,403,3.411,408,0.925,425,1.151,431,1.61,435,1.664,439,1.687,440,2.524,451,0.397,455,1.61,457,1.39,502,0.994,503,0.343,511,1.921,513,1.664,524,1.645,525,2.288,537,0.704,543,1.089,549,1.044,552,1.349,568,1.095,573,1.312,578,1.768,580,1.349,584,0.76,586,1.499,604,2.38,605,2,619,0.669,623,0.947,633,1.017,648,1.123,649,0.781,652,0.565,656,0.76,677,1.017,681,0.704,683,0.925,705,1.017,711,1.017,713,0.514,716,1.123,733,1.261,753,2.092,754,1.84,756,0.622,758,2.391,759,1.967,767,0.954,768,0.76,770,1.462,771,1.782,772,1.782,792,2.339,806,2.536,807,1.469,810,1.427,814,0.898,816,0.898,817,0.898,819,0.847,820,0.653,821,0.824,824,0.872,825,0.565,826,1.538,827,1.462,828,1.811,833,2.219,834,2.735,835,1.244,836,1.712,842,1.387,843,1.811,844,1.39,846,0.847,849,0.898,850,2.376,852,2.243,853,0.898,856,0.669,861,1.462,862,2.51,863,1.538,864,0.898,866,1.277,871,0.947,874,0.704,877,1.39,879,1.499,886,1.095,892,0.847,896,1.978,901,0.824,905,2.372,906,2.534,915,1.427,919,1.427,931,1.56,936,2.362,977,1.61,985,2.362,990,1.811,999,1.427,1006,0.872,1015,0.984,1016,0.824,1040,1.312,1043,1.98,1044,1.56,1046,1.277,1070,0.954,1073,1.052,1089,2.44,1128,0.984,1138,3.294,1201,0.802,1232,0.847,1235,2.614,1236,1.052,1237,1.922,1238,1.513,1239,1.922,1240,1.175,1241,1.089,1242,1.175,1243,1.849,1244,2.347,1245,2.605,1246,1.175,1247,2.012,1248,1.922,1249,0.872,1250,1.849,1251,0.781,1252,2.439,1253,1.922,1254,0.593,1255,1.513,1256,0.954,1257,1.152,1258,3.349,1259,2.883,1260,1.13,1261,2.262,1262,1.089,1263,1.052,1264,1.721,1265,0.984,1266,1.849,1267,2.262,1268,1.089,1269,1.13,1270,0.872,1271,1.13,1272,2.614,1273,1.13,1274,4.257,1275,1.782,1276,1.13,1277,2.347,1278,1.782,1279,2.524,1280,1.921,1281,1.175,1282,1.664,1283,1.922,1284,2.184,1285,1.922,1286,3.523,1287,1.782,1288,1.175,1289,1.175,1290,1.922,1291,1.13,1292,2.712,1293,1.175,1294,2.044,1295,1.782,1296,1.922,1297,1.922,1298,1.922,1299,2.614,1300,2.439,1301,1.017,1302,0.984,1303,1.175,1304,1.175,1305,1.175,1306,0.954,1307,3.109,1308,4.009,1309,2.439,1310,0.872,1311,1.175,1312,1.175,1313,4.164,1314,1.089,1315,2.092,1316,3.523,1317,1.089,1318,1.175,1319,2.262,1320,1.052,1321,0.781,1322,1.175,1323,1.175,1324,2.991,1325,1.175,1326,1.387,1327,2.262,1328,0.824,1329,0.898,1330,2.439,1331,1.56,1332,1.175,1333,1.089,1334,1.922,1335,1.922,1336,1.175,1337,1.175,1338,1.721,1339,1.089,1340,1.175,1341,1.175,1342,1.175,1343,1.849,1344,2.439,1345,1.175,1346,1.175,1347,1.175,1348,1.922,1349,1.175,1350,1.922,1351,1.175,1352,2.439,1353,1.175,1354,1.089,1355,1.089,1356,1.175,1357,1.922,1358,1.175,1359,1.175,1360,1.175,1361,1.175,1362,1.175,1363,1.175,1364,1.13,1365,1.175,1366,1.922,1367,1.175,1368,1.13,1369,1.175,1370,1.811,1371,1.175,1372,2.439,1373,1.849,1374,1.175,1375,1.175,1376,3.338,1377,1.175,1378,1.922,1379,1.175,1380,1.175,1381,1.922,1382,2.439,1383,2.439,1384,1.922,1385,2.439,1386,2.819,1387,1.175,1388,1.922,1389,2.712,1390,1.175,1391,1.922,1392,1.175,1393,1.175,1394,1.175,1395,0.704,1396,1.175,1397,1.175,1398,1.175,1399,1.175,1400,1.175,1401,1.175,1402,1.922,1403,1.922,1404,1.922,1405,1.922,1406,2.439,1407,1.175,1408,1.175,1409,1.175,1410,1.175,1411,1.922,1412,1.922,1413,2.819,1414,1.175,1415,1.175,1416,1.175,1417,1.175,1418,1.922,1419,2.819,1420,2.819,1421,0.898,1422,1.175,1423,2.439,1424,1.175,1425,1.13,1426,1.849,1427,1.175,1428,1.175,1429,1.175,1430,1.175,1431,1.175,1432,1.175,1433,1.175,1434,1.175,1435,1.175,1436,1.175,1437,1.175,1438,1.13,1439,1.175,1440,1.175,1441,1.922,1442,1.175,1443,1.175,1444,1.175,1445,1.089,1446,1.175,1447,1.175,1448,1.175,1449,1.175,1450,1.052,1451,1.175,1452,1.089,1453,1.175,1454,1.175,1455,1.175,1456,1.175,1457,0.954,1458,1.175,1459,1.175,1460,1.175,1461,1.175,1462,1.175,1463,1.175,1464,1.175,1465,1.175,1466,1.175,1467,1.175,1468,1.175,1469,1.175,1470,1.922,1471,1.922,1472,1.922,1473,1.175,1474,2.439,1475,2.819,1476,1.922,1477,1.175,1478,1.175,1479,1.175,1480,1.175,1481,1.175,1482,1.175,1483,1.175,1484,1.089,1485,1.175,1486,1.175,1487,1.175,1488,0.704,1489,1.175,1490,1.175,1491,1.175,1492,1.175,1493,1.175,1494,1.175,1495,2.439,1496,0.984,1497,1.175,1498,1.175,1499,1.175,1500,1.175,1501,1.175,1502,1.175,1503,1.175,1504,1.175,1505,1.175,1506,2.524,1507,1.175,1508,1.175,1509,1.13,1510,1.175,1511,1.175,1512,1.175,1513,1.922,1514,1.175,1515,1.175,1516,1.175,1517,1.175,1518,1.922,1519,1.175,1520,1.175,1521,1.175,1522,1.175,1523,1.175,1524,1.175,1525,1.175,1526,1.175,1527,1.175,1528,1.175,1529,1.175,1530,1.175,1531,1.175,1532,1.175,1533,1.175,1534,1.175,1535,1.13,1536,1.13,1537,1.175,1538,1.175,1539,1.922,1540,1.922,1541,1.56,1542,1.922,1543,1.849,1544,1.175,1545,1.175,1546,1.922,1547,1.175,1548,1.922,1549,1.175,1550,1.175,1551,1.175,1552,1.175,1553,1.175,1554,1.175,1555,1.13,1556,1.175,1557,1.13,1558,1.175,1559,1.175,1560,1.175,1561,1.922,1562,1.175,1563,1.175,1564,1.175,1565,1.175,1566,1.175,1567,1.175,1568,1.175,1569,1.175,1570,1.175,1571,1.175,1572,2.819,1573,2.439,1574,1.175,1575,1.175,1576,1.175,1577,1.175,1578,1.922,1579,1.175,1580,1.175,1581,1.175,1582,1.175,1583,1.175,1584,1.175,1585,1.175,1586,1.922,1587,1.175,1588,1.175,1589,1.175,1590,0.984,1591,1.175,1592,1.175,1593,1.175,1594,1.175,1595,1.175,1596,1.175,1597,1.175,1598,1.175,1599,1.175,1600,1.175,1601,1.175,1602,1.175,1603,1.175,1604,2.819,1605,1.175,1606,1.175,1607,1.175,1608,1.175,1609,1.175,1610,1.175,1611,1.13,1612,1.175,1613,1.175,1614,1.922,1615,1.175,1616,1.922,1617,1.175,1618,1.175,1619,1.922,1620,1.175,1621,1.175,1622,1.175,1623,1.175,1624,1.175,1625,2.439,1626,1.175,1627,1.175,1628,1.175,1629,1.849,1630,1.175,1631,1.175,1632,1.175,1633,1.175,1634,1.175,1635,1.175,1636,1.175,1637,1.175,1638,1.175,1639,1.175,1640,0.984,1641,1.175,1642,1.175,1643,1.175,1644,0.984,1645,1.175,1646,1.175,1647,1.922,1648,3.109,1649,1.017,1650,1.175,1651,1.175,1652,1.175,1653,1.175,1654,1.175,1655,1.175,1656,1.922,1657,1.175,1658,1.175,1659,1.849,1660,1.175,1661,1.089,1662,1.175,1663,1.175,1664,1.175]],["title/interfaces/GridState.html",[0,0.058,1327,2.255]],["body/interfaces/GridState.html",[0,0.094,2,0.413,3,0.046,4,0.037,5,0.032,8,0.126,9,1.563,12,0.289,13,0.37,14,0.609,15,1.657,18,0.249,19,0.009,20,0.84,22,0.841,25,0.548,26,0.164,27,1.036,30,1.702,31,0.918,34,1.112,36,1.647,39,0.755,40,1.809,42,1.009,47,0.664,50,0.875,52,0.609,55,2.907,59,0.76,60,1.124,61,1.816,62,0.755,63,0.664,64,1.85,66,0.71,67,1.657,71,0.898,72,0.505,73,2.67,75,0.428,76,1.205,77,0.052,79,0.841,80,0.919,82,0.617,83,2.058,84,0.668,85,3.285,86,1.805,87,0.918,89,2.805,90,0.648,92,3.472,94,1.045,96,1.34,97,0.882,98,0.735,99,2.119,100,0.716,106,1.903,107,1.172,109,2.173,112,0.523,113,0.742,116,1.225,117,1.236,118,2.334,122,0.681,123,2.591,124,1.012,126,0.683,127,1.236,128,0.818,129,0.813,134,1.451,135,0.841,137,1.657,138,2.215,140,2.114,144,1.444,145,0.003,146,0.003,147,0.002,148,0.508,150,0.762,151,1.317,164,1.34,166,0.404,167,0.71,168,0.818,170,0.617,172,1.566,175,1.121,176,1.121,177,1.121,178,0.641,185,1.089,192,0.215,195,2.226,196,1.423,198,0.382,205,1.009,213,0.737,215,0.475,220,1.121,221,1.504,222,0.735,227,0.796,229,2.7,241,1.395,242,1.838,245,1.412,246,0.755,248,1.116,252,0.918,261,1.121,268,1.081,270,0.451,271,0.215,278,0.64,284,0.849,287,2.7,314,1.269,320,0.991,321,0.817,326,0.648,327,0.681,328,1.225,335,0.561,338,0.575,344,0.535,347,0.798,358,0.664,363,0.648,364,0.681,368,1.012,385,1.6,386,0.681,392,0.891,396,0.677,402,0.946,403,3.225,408,0.919,425,1.358,431,1.6,435,1.653,439,1.805,440,2.512,451,0.394,455,1.6,457,1.383,502,1.255,503,0.341,511,1.911,513,1.653,524,1.731,525,2.278,537,0.698,543,1.081,549,1.038,552,1.34,568,1.089,573,1.304,578,1.762,580,1.34,584,0.755,586,1.725,604,2.373,605,1.993,619,0.664,623,0.941,633,1.009,648,1.116,649,0.775,652,0.561,656,0.755,677,1.009,681,0.698,683,0.918,705,1.009,711,1.009,713,0.511,716,1.116,733,1.258,753,1.801,754,1.88,756,0.617,758,2.386,759,1.962,767,0.946,768,0.755,770,1.454,771,1.771,772,1.771,792,2.332,806,2.532,807,1.46,810,1.418,814,0.891,816,0.891,817,0.891,819,0.841,820,0.648,821,0.818,824,0.865,825,0.561,826,1.53,827,1.454,828,1.801,833,2.211,834,2.73,835,1.236,836,1.703,842,1.378,843,1.801,844,1.383,846,0.841,849,0.891,850,2.144,852,2.234,853,0.891,856,0.664,861,1.454,862,2.503,863,1.77,864,1.46,866,0.775,871,0.941,874,0.698,877,1.383,879,1.491,886,1.089,892,0.841,896,1.969,901,1.34,905,2.394,906,2.528,915,1.418,919,1.418,931,1.551,936,2.351,977,1.6,985,2.594,990,2.083,999,1.418,1006,0.865,1015,1.6,1016,0.818,1040,1.304,1043,1.97,1044,1.551,1046,1.269,1070,0.946,1073,1.044,1089,2.1,1128,0.977,1138,3.285,1201,0.796,1232,0.841,1235,2.602,1236,1.044,1237,1.91,1238,1.504,1239,1.91,1240,1.166,1241,1.081,1242,1.166,1243,1.838,1244,2.335,1245,2.594,1246,1.166,1247,2.004,1248,1.91,1249,0.865,1250,1.838,1251,0.775,1252,2.427,1253,1.91,1254,0.588,1255,1.504,1256,0.946,1257,1.144,1258,3.344,1259,2.872,1260,1.121,1261,2.25,1262,1.081,1263,1.044,1264,1.71,1265,0.977,1266,1.838,1267,2.25,1268,1.081,1269,1.121,1270,0.865,1271,1.121,1272,2.602,1273,1.121,1274,4.381,1275,1.771,1276,1.121,1277,2.335,1278,1.771,1279,2.512,1280,1.911,1281,1.166,1282,1.653,1283,1.166,1284,1.71,1285,1.166,1286,2.806,1287,2.602,1288,1.166,1289,1.166,1290,1.91,1291,1.121,1292,2.7,1293,1.166,1294,2.033,1295,2.602,1296,1.91,1297,1.91,1298,1.91,1299,2.602,1300,2.427,1301,1.009,1302,0.977,1303,1.166,1304,1.166,1305,1.166,1306,0.946,1307,3.096,1308,4,1309,2.427,1310,0.865,1311,1.166,1312,1.166,1313,4.155,1314,1.081,1315,2.083,1316,3.512,1317,1.081,1318,1.166,1319,2.25,1320,1.044,1321,0.775,1322,1.91,1323,1.91,1324,3.2,1325,1.91,1326,1.751,1327,2.602,1328,1.34,1329,1.46,1330,2.806,1331,2.7,1332,2.806,1333,1.081,1334,1.91,1335,1.91,1336,1.166,1337,1.166,1338,1.71,1339,1.081,1340,1.166,1341,1.166,1342,1.166,1343,1.838,1344,2.427,1345,1.166,1346,1.166,1347,1.166,1348,1.91,1349,1.166,1350,1.91,1351,1.166,1352,2.427,1353,1.166,1354,1.081,1355,1.081,1356,1.166,1357,1.91,1358,1.166,1359,1.166,1360,1.166,1361,1.166,1362,1.166,1363,1.166,1364,1.121,1365,1.166,1366,1.91,1367,1.166,1368,1.121,1369,1.166,1370,1.801,1371,1.166,1372,2.427,1373,1.838,1374,1.166,1375,1.166,1376,3.326,1377,1.166,1378,1.91,1379,1.166,1380,1.166,1381,1.91,1382,2.427,1383,2.427,1384,1.91,1385,2.427,1386,2.806,1387,1.166,1388,1.91,1389,2.7,1390,1.166,1391,1.91,1392,1.166,1393,1.166,1394,1.166,1395,0.698,1396,1.166,1397,1.166,1398,1.166,1399,1.166,1400,1.166,1401,1.166,1402,1.91,1403,1.91,1404,1.91,1405,1.91,1406,2.427,1407,1.166,1408,1.166,1409,1.166,1410,1.166,1411,1.91,1412,1.91,1413,2.806,1414,1.166,1415,1.166,1416,1.166,1417,1.166,1418,1.91,1419,2.806,1420,2.806,1421,0.891,1422,1.166,1423,2.427,1424,1.166,1425,1.121,1426,1.838,1427,1.166,1428,1.166,1429,1.166,1430,1.166,1431,1.166,1432,1.166,1433,1.166,1434,1.166,1435,1.166,1436,1.166,1437,1.166,1438,1.121,1439,1.166,1440,1.166,1441,1.91,1442,1.166,1443,1.166,1444,1.166,1445,1.081,1446,1.166,1447,1.166,1448,1.166,1449,1.166,1450,1.044,1451,1.166,1452,1.081,1453,1.166,1454,1.166,1455,1.166,1456,1.166,1457,0.946,1458,1.166,1459,1.166,1460,1.166,1461,1.166,1462,1.166,1463,1.166,1464,1.166,1465,1.166,1466,1.166,1467,1.166,1468,1.166,1469,1.166,1470,1.91,1471,1.91,1472,1.91,1473,1.166,1474,2.427,1475,2.806,1476,1.91,1477,1.166,1478,1.166,1479,1.166,1480,1.166,1481,1.166,1482,1.166,1483,1.166,1484,1.081,1485,1.166,1486,1.166,1487,1.166,1488,0.698,1489,1.166,1490,1.166,1491,1.166,1492,1.166,1493,1.166,1494,1.166,1495,2.427,1496,0.977,1497,1.166,1498,1.166,1499,1.166,1500,1.166,1501,1.166,1502,1.166,1503,1.166,1504,1.166,1505,1.166,1506,2.512,1507,1.166,1508,1.166,1509,1.121,1510,1.166,1511,1.166,1512,1.166,1513,1.91,1514,1.166,1515,1.166,1516,1.166,1517,1.166,1518,1.91,1519,1.166,1520,1.166,1521,1.166,1522,1.166,1523,1.166,1524,1.166,1525,1.166,1526,1.166,1527,1.166,1528,1.166,1529,1.166,1530,1.166,1531,1.166,1532,1.166,1533,1.166,1534,1.166,1535,1.121,1536,1.121,1537,1.166,1538,1.166,1539,1.91,1540,1.91,1541,1.551,1542,1.91,1543,1.838,1544,1.166,1545,1.166,1546,1.91,1547,1.166,1548,1.91,1549,1.166,1550,1.166,1551,1.166,1552,1.166,1553,1.166,1554,1.166,1555,1.121,1556,1.166,1557,1.121,1558,1.166,1559,1.166,1560,1.166,1561,1.91,1562,1.166,1563,1.166,1564,1.166,1565,1.166,1566,1.166,1567,1.166,1568,1.166,1569,1.166,1570,1.166,1571,1.166,1572,2.806,1573,2.427,1574,1.166,1575,1.166,1576,1.166,1577,1.166,1578,1.91,1579,1.166,1580,1.166,1581,1.166,1582,1.166,1583,1.166,1584,1.166,1585,1.166,1586,1.91,1587,1.166,1588,1.166,1589,1.166,1590,0.977,1591,1.166,1592,1.166,1593,1.166,1594,1.166,1595,1.166,1596,1.166,1597,1.166,1598,1.166,1599,1.166,1600,1.166,1601,1.166,1602,1.166,1603,1.166,1604,2.806,1605,1.166,1606,1.166,1607,1.166,1608,1.166,1609,1.166,1610,1.166,1611,1.121,1612,1.166,1613,1.166,1614,1.91,1615,1.166,1616,1.91,1617,1.166,1618,1.166,1619,1.91,1620,1.166,1621,1.166,1622,1.166,1623,1.166,1624,1.166,1625,2.427,1626,1.166,1627,1.166,1628,1.166,1629,1.838,1630,1.166,1631,1.166,1632,1.166,1633,1.166,1634,1.166,1635,1.166,1636,1.166,1637,1.166,1638,1.166,1639,1.166,1640,0.977,1641,1.166,1642,1.166,1643,1.166,1644,0.977,1645,1.166,1646,1.166,1647,1.91,1648,3.096,1649,1.009,1650,1.166,1651,1.166,1652,1.166,1653,1.166,1654,1.166,1655,1.166,1656,1.91,1657,1.166,1658,1.166,1659,1.838,1660,1.166,1661,1.081,1662,1.166,1663,1.166,1664,1.166]],["title/interfaces/HasFinder.html",[0,0.058,2688,2.772]],["body/interfaces/HasFinder.html",[0,0.098,2,0.755,3,0.084,4,0.067,5,0.059,8,0.23,12,0.154,13,0.4,14,0.369,18,0.29,19,0.009,20,0.737,25,1.001,26,0.152,34,0.592,35,1.101,41,2.317,50,0.941,52,0.534,57,2.1,59,0.774,66,1.433,71,1.917,72,0.935,75,0.48,76,1.343,77,0.076,80,2.146,84,1.166,86,1.648,90,1.967,97,0.955,107,0.548,111,1.785,112,0.955,113,0.672,124,2.043,126,0.302,134,2.346,142,1.729,144,0.811,145,0.004,146,0.007,147,0.004,148,0.576,153,2.145,154,2.191,164,1.495,166,1.335,172,0.755,178,0.563,192,0.393,194,1.128,198,0.556,200,1.214,201,2.816,213,0.722,215,0.417,240,1.628,241,0.811,245,1.002,246,1.379,270,0.399,271,0.393,278,0.607,284,0.867,314,2.018,321,2.089,347,0.89,367,1.823,391,2.863,392,2.704,396,0.755,411,2.32,425,1.665,447,1.537,451,1.304,457,2.017,473,2.049,502,1.101,503,0.622,547,2.719,548,2.921,549,1.745,550,2.758,551,2.921,552,2.13,553,2.049,556,2.049,563,2.049,565,3.339,566,2.175,567,2.049,568,1.214,569,3.404,570,2.719,571,2.049,572,2.049,573,3.334,574,4.598,576,1.975,577,2.921,578,1.608,579,2.921,580,2.13,581,4.366,582,3.453,583,3.281,584,2.29,585,2.049,586,2.681,587,4.078,589,2.049,591,3.131,592,2.862,593,2.465,594,4.363,595,2.049,597,2.391,598,1.907,599,2.049,602,2.049,604,2.639,605,1.276,606,2.049,607,2.049,609,2.049,610,2.049,612,2.049,613,2.816,614,1.975,615,2.049,616,1.844,617,1.907,618,2.049,619,1.214,620,2.921,621,2.049,623,1.05,624,2.049,642,2.13,649,1.416,708,3.163,716,1.245,733,0.686,753,1.581,871,1.05,877,2.017,880,1.907,887,1.379,889,2.311,897,1.677,913,2.254,917,1.581,920,1.677,926,1.677,1031,3.163,1061,1.537,1066,3.849,1077,2.432,1258,1.628,1294,1.785,1302,1.785,1306,1.729,1326,2.942,1395,1.819,1457,3.31,1496,1.785,1541,3.131,1689,2.13,1761,3.168,1814,2.428,1868,2.428,2007,2.049,2032,3.642,2091,1.907,2124,2.544,2512,4.832,2513,4.436,2522,2.555,2523,2.317,2540,3.849,2554,4.436,2555,2.428,2556,2.317,2557,4.49,2558,4.648,2559,4.49,2560,2.703,2561,5.084,2562,4.034,2563,2.555,2564,2.317,2565,2.703,2566,2.703,2567,2.703,2568,5.379,2569,2.703,2570,2.703,2571,3.854,2572,2.703,2573,2.703,2574,2.703,2575,4.49,2576,2.703,2577,4.49,2578,2.555,2579,2.703,2580,2.703,2581,4.49,2582,2.703,2583,2.555,2584,2.703,2585,2.555,2586,2.703,2587,2.703,2588,2.703,2589,2.703,2590,2.703,2591,3.854,2592,2.703,2593,2.555,2594,2.703,2595,2.703,2596,2.703,2597,2.703,2598,2.703,2599,2.555,2600,2.703,2601,2.703,2602,2.703,2603,2.555,2604,2.703,2605,2.703,2606,2.555,2607,2.703,2608,2.703,2609,3.303,2610,3.854,2611,3.854,2612,2.703,2613,2.703,2614,4.49,2615,3.854,2616,4.49,2617,2.703,2618,4.49,2619,4.49,2620,2.703,2621,2.703,2622,2.703,2623,2.703,2624,2.703,2625,2.703,2626,2.703,2627,2.555,2628,2.703,2629,2.703,2630,2.703,2631,2.703,2632,2.703,2633,2.703,2634,2.703,2635,3.854,2636,2.219,2637,2.555,2638,2.703,2639,2.703,2640,2.703,2641,2.703,2642,4.034,2643,2.317,2644,2.703,2645,2.703,2646,2.703,2647,2.703,2648,2.703,2649,3.854,2650,2.703,2651,2.703,2652,2.703,2653,2.703,2654,2.703,2655,2.703,2656,2.703,2657,2.703,2658,2.703,2659,2.703,2660,2.703,2661,2.428,2662,2.703,2663,2.703,2664,4.895,2665,2.703,2666,4.244,2667,2.703,2668,2.703,2669,2.703,2670,2.703,2671,2.703,2672,2.703,2673,2.703,2674,2.703,2675,2.703,2676,2.703,2677,2.703,2678,2.703,2679,4.49,2680,2.703,2681,2.703,2682,2.703,2683,2.703,2684,3.854,2685,3.854,2686,3.854,2687,3.854,2688,3.462]],["title/classes/Hertz.html",[77,0.052,2882,3.544]],["body/classes/Hertz.html",[3,0.085,4,0.068,5,0.06,8,0.472,12,0.155,13,0.402,14,0.757,18,0.315,19,0.009,20,1.23,25,2.276,26,0.121,34,1.075,62,2.75,71,1.997,75,0.481,77,0.066,83,3.064,84,1.081,107,0.996,113,0.849,126,0.71,129,1.053,145,0.004,146,0.005,147,0.004,172,1.653,178,0.806,192,0.93,198,0.81,213,1.195,214,1.625,215,0.874,222,2.24,227,2.791,241,0.816,245,1.349,278,0.51,284,0.562,361,2.619,378,1.164,436,2.715,447,3.54,480,1.353,503,0.891,526,3.655,549,2.107,591,1.741,646,4.275,709,2.234,733,1.317,755,2.791,797,3.349,838,3.66,879,2.378,929,2.573,930,5.547,931,2.883,934,5.392,936,2.557,937,4.874,938,4.874,939,5.188,940,5.188,941,6.191,942,5.851,943,5.851,944,5.392,945,4.91,946,5.547,947,4.641,948,5.243,954,1.927,967,3.426,968,3.426,969,2.901,970,2.901,974,5.188,975,5.698,976,3.426,977,2.557,978,5.415,979,3.223,980,4.435,981,4.467,982,4.054,983,3.873,984,3.873,985,2.557,986,3.873,987,5.188,988,3.426,989,3.426,990,2.636,991,4.508,992,3.426,993,3.426,994,4.508,995,5.453,996,3.426,997,3.426,998,3.426,999,3.244,1000,5.096,1001,5.096,1002,5.769,1003,5.392,1004,3.426,1005,4.261,1006,2.636,1007,2.901,1008,2.901,1009,2.901,1010,2.901,1011,2.901,1012,2.901,1013,2.901,1014,2.722,1015,1.797,1016,1.505,1017,3.873,1018,3.873,1019,3.873,1020,2.722,1021,2.722,1022,2.573,1023,2.722,1024,2.722,1025,2.722,1026,3.873,1027,3.873,1028,2.722,2882,6.37,2883,6.429,2884,6.429,2885,6.429,2886,3.882,2887,3.882,2888,3.882,2889,3.882,2890,3.882,2891,3.882,2892,3.882,2893,3.882,2894,3.882,2895,3.882,2896,3.882,2897,3.882,2898,3.882,2899,3.882,2900,3.882,2901,3.882,2902,3.882,2903,3.882,2904,3.882,2905,3.882,2906,3.882,2907,3.882]],["title/interfaces/ISubscriptionTracker.html",[0,0.058,2908,3.289]],["body/interfaces/ISubscriptionTracker.html",[0,0.103,2,1.108,3,0.123,4,0.099,5,0.087,8,0.337,12,0.226,14,0.681,18,0.274,19,0.009,26,0.155,50,0.89,52,0.985,57,2.067,59,0.944,77,0.067,84,1.176,111,3.598,112,1.401,144,1.494,145,0.006,146,0.007,147,0.006,148,0.397,150,1.246,172,1.108,178,1.037,192,0.792,198,0.618,213,1.022,214,1.596,215,0.768,216,3.188,245,1.564,270,0.484,271,0.576,278,0.518,284,0.792,347,2.066,438,5.312,457,1.781,652,1.504,733,1.006,1037,4.553,1045,2.833,1255,3.892,1256,2.536,1395,1.872,1450,4.394,1854,2.704,2908,5.809,2909,6.566,2910,4.553,2911,6.273,2912,7.569,2913,7.197,2914,6.273,2915,7.569,2916,4.99,2917,7.569,2918,7.416,2919,5.655,2920,6.273,2921,6.273,2922,5.723,2923,6.273,2924,8.146,2925,6.86,2926,5.655,2927,7.197,2928,5.655,2929,7.197,2930,6.273,2931,4.99,2932,4.99,2933,4.99,2934,4.553,2935,4.99,2936,4.99,2937,4.553,2938,4.99,2939,4.99,2940,4.99,2941,6.273,2942,4.99,2943,4.99,2944,4.99,2945,4.99,2946,6.273,2947,6.273,2948,4.99,2949,4.99,2950,4.99,2951,4.99,2952,4.99,2953,4.99]],["title/classes/IdGenerator.html",[77,0.052,726,2.432]],["body/classes/IdGenerator.html",[3,0.146,4,0.117,5,0.103,8,0.398,12,0.267,13,0.573,14,0.639,18,0.278,19,0.009,25,2.172,26,0.146,50,0.765,75,0.492,77,0.079,78,3.429,126,0.523,129,0.855,145,0.007,146,0.008,147,0.007,172,1.638,178,1.148,192,0.851,198,0.58,213,1.099,214,1.372,215,0.722,225,3.135,241,1.654,278,0.487,378,2.002,393,5.722,419,4.683,451,1.247,480,2.327,656,2.813,726,4.619,728,5.189,1815,6.333,2178,4.683,2954,7.619,2955,5.894,2956,8.361,2957,6.679,2958,6.679,2959,7.866,2960,6.679,2961,6.679,2962,7.866,2963,6.679,2964,6.679,2965,6.679]],["title/interfaces/InternalRegistrationData.html",[0,0.058,2966,3.086]],["body/interfaces/InternalRegistrationData.html",[0,0.112,2,1.11,3,0.124,4,0.099,5,0.087,8,0.338,12,0.343,13,0.519,14,0.681,18,0.251,19,0.009,20,1.488,26,0.155,43,4.077,50,0.649,64,2.187,75,0.481,77,0.067,78,2.324,80,1.507,84,1.073,94,0.765,97,0.985,113,0.747,126,0.64,131,3.192,144,1.868,145,0.006,146,0.007,147,0.008,213,0.745,215,0.882,225,2.259,227,2.138,241,1.496,270,0.443,271,0.577,278,0.595,284,0.792,366,2.545,367,1.982,503,1.149,549,1.84,604,2.027,648,1.829,656,3.201,733,1.267,815,3.012,851,2.904,886,1.784,889,1.876,1689,3.131,1741,4.096,1871,4.991,2176,4.483,2532,2.919,2643,3.406,2774,5.967,2813,4.991,2966,5.456,2967,3.131,2968,3.012,2969,3.974,2970,5.319,2971,5.409,2972,5.141,2973,4.563,2974,4.563,2975,5.319,2976,4.563,2977,4.563,2978,6.79,2979,4.991,2980,4.235,2981,3.261,2982,4.563,2983,3.974,2984,4.563,2985,5.73,2986,6.265,2987,4.563,2988,4.563,2989,4.563,2990,5.73,2991,5.73,2992,5.73,2993,5.73,2994,4.563,2995,4.563,2996,4.563,2997,4.563,2998,4.563,2999,4.563,3000,4.563,3001,4.563,3002,5.73,3003,4.563,3004,4.563,3005,4.563,3006,4.563,3007,4.563,3008,4.563,3009,4.563,3010,4.563]],["title/components/LoadingIndicatorComponent.html",[148,0.309,357,1.805]],["body/components/LoadingIndicatorComponent.html",[3,0.1,4,0.08,5,0.07,8,0.273,12,0.28,13,0.451,14,0.438,18,0.292,19,0.009,26,0.153,27,1.371,30,1.533,34,0.95,36,1.474,47,2.366,59,0.48,60,0.854,61,2.147,63,1.44,72,1.023,75,0.383,77,0.054,80,1.645,94,0.947,97,1.075,107,1.117,113,0.649,126,0.55,129,1.141,139,3.17,144,0.961,145,0.005,146,0.006,147,0.005,148,0.492,149,1.875,150,1.363,151,1.371,152,2.749,153,1.405,154,1.823,164,1.773,165,1.823,166,1.75,167,1.863,168,2.399,170,1.811,172,1.585,185,1.948,188,2.692,192,0.857,194,1.811,198,0.719,200,1.44,213,0.813,214,0.939,215,0.875,241,1.58,268,3.85,270,0.285,271,0.466,278,0.333,314,1.679,319,1.514,320,1.396,321,1.463,322,1.553,323,3.478,324,2.117,325,2.117,326,1.405,327,1.476,328,1.726,329,2.864,330,1.371,331,1.931,332,2.117,333,1.773,334,2.117,335,1.216,336,2.117,337,1.679,338,2.046,339,1.725,340,3.478,341,1.593,342,1.725,343,1.773,344,1.16,345,1.593,346,1.875,347,1.056,348,2.117,349,1.931,350,1.773,351,2.486,352,2.117,353,1.773,354,2.864,355,1.725,356,2.117,357,3.082,358,2.82,359,2.117,360,1.679,361,1.956,362,1.931,363,1.405,364,2.831,365,1.875,366,1.635,367,1.056,368,1.338,369,1.275,370,2.117,371,1.725,372,2.051,373,2.117,374,1.679,375,1.989,376,2.117,403,1.931,524,1.685,525,3.826,549,1.658,605,2.048,623,1.91,646,3.593,648,1.998,716,1.998,789,3.682,834,1.593,844,1.44,889,2.322,906,3.259,907,3.17,1049,2.343,1051,2.526,1053,2.749,1055,4.624,1057,5.616,1077,2.156,1097,3.031,1138,3.354,1149,3.031,1152,4.624,1184,5.241,1258,2.612,1267,3.85,1452,3.593,1535,2.431,1611,2.431,2085,4.215,2123,4.98,2127,4.648,2208,4.101,2809,6.516,2816,5.461,3011,5.982,3012,3.417,3013,6.188,3014,8.093,3015,7.515,3016,7.013,3017,6.188,3018,7.013,3019,7.013,3020,7.851,3021,7.013,3022,4.573,3023,4.573,3024,4.573,3025,8.417,3026,7.529,3027,6.188,3028,7.013,3029,7.013,3030,4.573,3031,8.417,3032,6.188,3033,6.632,3034,6.188,3035,6.188,3036,6.188,3037,6.188,3038,6.188,3039,7.515,3040,6.188,3041,6.188,3042,6.188,3043,6.188,3044,4.573,3045,4.573,3046,4.573,3047,4.573,3048,4.573,3049,4.573,3050,4.573,3051,7.013,3052,8.093,3053,4.573,3054,6.188,3055,5.461,3056,4.573,3057,6.188,3058,4.573,3059,4.573,3060,4.982,3061,6.188,3062,4.573,3063,4.573,3064,4.573,3065,4.573]],["title/directives/MinMaxValidator.html",[322,1.495,371,1.66]],["body/directives/MinMaxValidator.html",[3,0.086,4,0.069,5,0.061,8,0.235,12,0.158,14,0.621,18,0.229,19,0.009,20,1.424,25,1.025,26,0.142,34,0.858,36,1.736,40,1.274,50,0.808,59,0.781,61,1.127,62,1.411,65,1.53,66,0.81,75,0.354,77,0.066,83,2.382,84,0.519,86,1.183,87,1.717,92,1.77,94,0.533,97,1.127,99,1.945,106,1.34,107,1.274,113,0.414,126,0.708,140,1.489,144,1.483,145,0.004,146,0.006,147,0.004,148,0.542,165,1.573,166,1.424,167,1.332,168,1.53,170,1.155,172,1.618,178,0.816,185,2.222,192,0.661,194,2.417,195,1.76,198,0.783,200,1.243,213,0.519,214,0.81,215,0.427,245,0.72,270,0.521,271,0.402,272,3.483,278,0.643,284,0.884,314,2.052,322,2.396,344,1.001,351,2.684,355,2.108,360,2.382,361,2.554,368,1.155,371,2.661,372,2.506,383,2.767,391,1.619,396,0.773,440,1.952,451,0.737,457,1.243,473,2.97,503,0.637,508,1.888,511,2.822,524,1.075,537,1.307,549,0.933,582,1.952,616,1.888,639,3.52,650,3.584,652,1.725,671,3.918,679,3.087,694,2.767,696,3.918,716,2.094,724,3.483,725,1.307,733,0.995,749,4.176,793,5.223,797,1.888,844,1.243,906,1.998,978,2.486,980,3.75,1006,1.619,1022,2.616,1045,2.227,1046,2.052,1049,2.022,1149,2.616,1201,1.489,1216,1.666,1249,1.619,1264,2.764,1265,2.587,1280,2.431,1370,2.292,1389,3.448,1506,4.017,1640,2.587,1761,1.952,1851,5.272,1852,3.34,1854,1.888,1855,2.616,1903,3.584,1908,4.848,1928,2.181,1975,3.49,2127,3.704,2170,3.958,2211,4.499,2216,5.565,2243,3.52,2244,3.918,2248,4.499,2250,6.4,2251,3.178,2252,4.499,2285,2.95,2299,4.499,2532,2.292,2699,3.178,2724,4.176,2728,3.178,2729,4.499,2731,2.767,2736,3.483,2737,3.483,2740,3.483,2741,3.483,2742,6.538,2743,4.499,2748,3.483,2750,3.483,2752,4.932,2754,3.483,2755,3.483,2756,3.483,2759,3.483,2760,3.483,2770,3.483,2784,3.483,2822,2.95,2840,2.95,2842,7.015,2850,6.571,2852,4.932,2937,3.178,3066,5.272,3067,4.947,3068,5.588,3069,6.487,3070,5.588,3071,5.588,3072,5.588,3073,3.947,3074,3.947,3075,5.588,3076,6.487,3077,3.704,3078,3.483,3079,3.483,3080,3.947,3081,3.947,3082,3.947,3083,3.947,3084,6.487,3085,3.947,3086,3.947,3087,3.483,3088,6.65,3089,3.947,3090,3.947,3091,3.947,3092,3.947,3093,3.947,3094,3.947,3095,3.947,3096,3.947,3097,3.947,3098,3.947,3099,3.947,3100,3.947,3101,3.947,3102,3.947,3103,3.947,3104,3.947,3105,3.947,3106,3.947,3107,3.947,3108,3.947,3109,3.947,3110,3.947,3111,3.947,3112,3.947,3113,3.947,3114,5.588,3115,5.588,3116,3.947,3117,3.947,3118,5.588,3119,6.487,3120,7.055,3121,6.487,3122,5.588,3123,3.947,3124,3.947,3125,3.947,3126,3.947,3127,3.947,3128,3.947,3129,3.947,3130,6.487,3131,3.947,3132,3.947,3133,5.588,3134,5.588,3135,3.947,3136,3.947,3137,3.947,3138,3.947,3139,3.947,3140,3.947,3141,6.487,3142,3.947,3143,3.947,3144,5.588,3145,5.588,3146,3.947,3147,5.588,3148,3.947,3149,5.588,3150,4.932,3151,4.932,3152,5.588,3153,5.588,3154,5.588,3155,3.483,3156,3.947,3157,3.947,3158,3.947,3159,3.483,3160,3.947,3161,3.947,3162,4.932,3163,3.947,3164,6.487,3165,3.947,3166,3.947,3167,3.947,3168,3.947,3169,5.588,3170,3.947,3171,3.947,3172,3.947,3173,3.947,3174,3.947,3175,3.947,3176,3.947]],["title/interfaces/MockRecord.html",[0,0.058,762,2.772]],["body/interfaces/MockRecord.html",[0,0.088,2,1.305,3,0.145,4,0.117,5,0.102,12,0.266,13,0.572,17,5.507,18,0.318,19,0.009,26,0.171,75,0.5,126,0.655,144,1.401,145,0.007,146,0.008,147,0.007,163,6.253,215,0.964,284,0.678,502,2.547,762,5.261,954,1.997,2136,4.415,2138,4.415,2279,6.665,2280,4.979,2282,4.671,3177,5.364,3178,5.364,3179,7.87,3180,7.371,3181,5.364,3182,6.931,3183,5.879,3184,5.879,3185,5.879,3186,5.879,3187,5.879]],["title/interfaces/MultiSelectOption.html",[0,0.058,2175,2.917]],["body/interfaces/MultiSelectOption.html",[0,0.099,2,1.016,3,0.113,4,0.091,5,0.08,8,0.309,12,0.207,13,0.49,18,0.263,19,0.009,20,1.428,26,0.172,31,2.925,34,1.033,36,1.09,50,0.905,52,0.719,59,0.783,65,2.01,75,0.477,77,0.062,78,2.758,80,1.379,84,0.884,90,1.593,94,0.7,107,0.738,113,0.829,116,1.446,126,0.406,129,0.664,138,3.114,145,0.005,146,0.007,147,0.005,148,0.472,166,0.992,167,1.065,170,1.517,192,0.528,196,1.935,198,0.787,215,0.561,245,0.945,248,2.171,270,0.531,271,0.528,278,0.596,284,0.76,320,1.684,335,1.379,337,2.741,338,1.412,339,2.979,344,2.127,351,2.066,396,1.016,454,1.854,480,1.807,502,1.921,503,1.321,550,1.717,592,1.807,597,2.925,652,1.379,656,2.669,667,2.84,707,3.117,713,1.255,725,1.717,726,3.716,727,3.636,728,3.117,729,3.437,733,1.492,737,3.636,754,1.347,756,1.517,758,1.674,759,1.481,760,2.127,761,1.761,806,1.593,808,2.01,813,2.657,822,2.47,823,2.752,825,2.301,861,1.717,871,1.412,881,2.4,905,1.921,982,2.657,1016,2.607,1033,4.701,1045,2.681,1077,1.807,1216,2.189,1232,2.067,1251,2.47,1254,1.446,1257,2.226,1280,2.925,1310,3.356,1315,2.127,1321,1.904,1370,2.127,1395,1.717,1488,1.717,1640,2.4,1716,3.636,1852,3.67,1903,4.124,1975,2.565,2035,3.636,2046,2.189,2056,2.565,2057,2.756,2058,2.565,2062,2.756,2083,2.756,2134,2.4,2135,3.692,2136,3.437,2137,3.875,2138,4.457,2139,3.875,2140,3.875,2141,2.865,2149,4.457,2151,3.875,2152,3.437,2163,4.457,2165,3.875,2170,4.35,2171,3.266,2172,2.48,2173,2.865,2174,2.756,2175,5.424,2176,3.266,2177,3.875,2178,4.716,2179,3.875,2180,3.437,2181,2.865,2182,3.636,2183,3.875,2184,3.875,2185,3.875,2186,3.875,2187,3.875,2188,3.875,2189,3.875,2190,5.026,2191,3.875,2192,3.875,2193,3.875,2194,3.875,2195,3.875,2196,3.875,2197,3.875,2198,3.875,2199,3.875,2200,3.875,2201,3.875,2202,3.875,2203,3.875,2204,3.875,2205,3.437]],["title/interfaces/MultiSelectOptionInternal.html",[0,0.058,2163,2.917]],["body/interfaces/MultiSelectOptionInternal.html",[0,0.098,2,1.004,3,0.112,4,0.09,5,0.079,8,0.306,12,0.205,13,0.487,18,0.262,19,0.009,20,1.42,26,0.172,31,2.231,34,1.025,36,1.078,50,0.901,52,0.711,59,0.779,65,1.988,75,0.471,77,0.061,78,3.225,80,1.364,84,0.878,90,1.575,94,0.692,107,0.729,113,0.877,116,1.43,126,0.402,129,0.656,138,3.139,145,0.005,146,0.007,147,0.005,148,0.468,166,0.981,167,1.053,170,1.5,192,0.522,196,1.928,198,0.771,215,0.554,245,0.935,248,2.155,270,0.53,271,0.522,278,0.594,284,0.756,320,1.839,335,1.364,337,2.726,338,1.396,339,2.966,344,2.121,351,2.051,396,1.004,454,1.834,480,1.787,502,1.907,503,1.316,550,1.698,592,1.787,597,2.231,652,1.364,656,2.99,667,2.819,707,4.013,713,1.241,725,1.698,726,3.689,727,3.596,728,3.082,729,3.399,733,1.488,737,3.596,754,1.332,756,1.5,758,1.655,759,1.465,760,2.103,761,1.741,806,1.575,808,1.988,813,2.627,822,2.452,823,2.74,825,2.321,861,1.698,871,1.396,881,2.374,905,1.907,982,2.627,1016,2.878,1033,4.676,1045,2.661,1077,1.787,1216,2.165,1232,2.044,1251,2.452,1254,1.43,1257,2.21,1280,2.904,1310,3.428,1315,2.103,1321,1.883,1370,2.738,1395,1.698,1488,2.21,1640,2.374,1716,4.682,1852,3.657,1903,4.505,1975,2.537,2035,3.596,2046,2.165,2056,2.537,2057,2.726,2058,2.537,2062,2.726,2083,2.726,2134,2.374,2135,3.672,2136,3.399,2137,3.832,2138,4.425,2139,3.832,2140,3.832,2141,2.833,2149,4.425,2151,3.832,2152,3.399,2163,4.92,2165,3.832,2170,3.946,2171,3.23,2172,2.452,2173,2.833,2174,2.726,2175,5.404,2176,4.205,2177,4.99,2178,5.514,2179,4.99,2180,3.399,2181,2.833,2182,3.596,2183,3.832,2184,3.832,2185,3.832,2186,3.832,2187,3.832,2188,3.832,2189,3.832,2190,4.99,2191,3.832,2192,3.832,2193,3.832,2194,3.832,2195,3.832,2196,3.832,2197,3.832,2198,3.832,2199,3.832,2200,3.832,2201,3.832,2202,3.832,2203,3.832,2204,3.832,2205,3.399]],["title/pipes/NestedPropertyPipe.html",[2870,3.086,3188,2.917]],["body/pipes/NestedPropertyPipe.html",[3,0.129,4,0.104,5,0.091,8,0.353,14,0.566,18,0.258,19,0.009,26,0.129,52,0.82,57,1.573,64,2.438,75,0.473,77,0.07,94,0.799,97,1.27,113,0.767,126,0.464,144,1.244,145,0.006,146,0.007,147,0.006,151,2.192,165,2.358,172,1.159,178,0.863,192,0.602,194,2.572,195,2.302,198,0.778,213,0.778,214,1.501,215,0.858,270,0.455,271,0.602,278,0.632,284,0.883,314,2.172,396,1.432,408,1.573,425,1.79,491,7.655,536,4.763,549,1.728,652,1.573,689,3.404,733,1.301,860,3.362,871,2.362,885,4.039,911,2.829,931,3.279,1649,2.829,1820,4.845,2857,4.763,2870,5.126,2872,3.921,2876,6.452,2877,5.221,2878,6.452,2880,6.452,3188,4.845,3189,5.463,3190,4.421,3191,7.311,3192,8.287,3193,7.311,3194,8.287,3195,7.311,3196,7.311,3197,5.916,3198,5.916,3199,5.916,3200,3.268,3201,5.916,3202,4.763,3203,4.763,3204,5.916,3205,5.916,3206,7.311,3207,5.916,3208,5.916,3209,5.916,3210,6.452,3211,5.916,3212,5.916,3213,5.916,3214,5.916,3215,5.916,3216,5.916,3217,5.221,3218,5.221]],["title/classes/NumberWithUnitFormInputWidgetObject.html",[77,0.052,3219,3.544]],["body/classes/NumberWithUnitFormInputWidgetObject.html",[3,0.088,4,0.071,5,0.062,8,0.465,12,0.161,13,0.414,14,0.814,18,0.312,19,0.009,25,1.706,26,0.088,34,0.62,35,1.153,43,2.628,57,1.073,59,0.901,66,1.349,71,1.706,72,1.04,75,0.503,77,0.048,80,1.51,86,1.702,94,0.545,107,1.068,124,2.085,126,0.64,129,1.045,134,1.622,138,1.406,142,1.81,145,0.004,146,0.007,147,0.004,148,0.561,153,1.744,166,1.256,167,1.463,178,0.829,188,2.47,192,0.927,198,0.739,200,1.271,201,2.909,213,1.184,214,1.747,215,0.92,216,2.693,245,0.736,270,0.443,278,0.626,284,0.411,320,1.281,321,2.083,351,2.767,360,1.482,361,2.598,367,1.798,378,1.21,391,2.922,396,0.791,411,3.17,503,0.916,526,3.45,547,4.281,548,3.491,549,1.342,550,2.917,551,3.788,552,2.546,553,3.491,554,3.576,555,3.576,556,3.491,557,3.576,558,3.576,559,3.576,563,2.146,564,2.675,565,1.93,566,1.371,567,2.146,568,1.271,569,2.146,570,1.997,571,2.146,572,2.146,573,3.306,574,4.684,575,2.675,576,2.068,577,3.018,578,1.661,579,3.018,580,2.201,581,4.341,582,3.525,583,3.365,584,2.348,585,2.146,586,2.717,587,4.14,588,2.675,589,2.146,590,2.675,591,1.81,592,2.616,593,2.546,594,2.909,595,2.146,596,2.675,597,2.47,598,1.997,599,2.146,600,2.675,601,2.146,602,2.146,603,2.675,604,1.444,605,1.336,606,2.146,607,2.146,608,2.675,609,2.146,610,2.146,611,2.675,612,2.146,613,2.909,614,2.068,615,2.146,616,1.93,617,1.997,618,2.146,619,1.271,620,3.018,621,2.146,622,2.675,623,1.099,624,2.146,642,3.137,646,3.651,667,2.773,716,1.303,717,3.562,725,1.336,793,3.25,948,2.675,1067,3.763,1310,1.655,1851,5.612,2244,2.83,2540,3.413,2556,2.426,2609,3.413,2627,2.675,3066,6.616,3067,6.207,3150,3.562,3151,3.562,3155,5.796,3159,5.796,3219,4.571,3220,7.813,3221,5.677,3222,5.677,3223,5.677,3224,7.126,3225,7.126,3226,6.567,3227,6.567,3228,6.567,3229,6.567,3230,6.567,3231,6.567,3232,6.567,3233,4.037,3234,5.677,3235,4.037,3236,5.677,3237,4.037,3238,5.677,3239,4.037,3240,4.037,3241,4.037,3242,4.037,3243,4.037,3244,4.037,3245,4.037,3246,4.037,3247,5.677,3248,4.037,3249,4.037,3250,4.037,3251,4.037,3252,4.037,3253,4.037,3254,4.037,3255,4.037,3256,4.037,3257,4.037,3258,4.037,3259,4.037,3260,4.037,3261,4.037,3262,4.037,3263,3.017,3264,3.562,3265,4.037,3266,4.037,3267,4.037,3268,4.037,3269,4.037,3270,4.037,3271,4.037,3272,4.037,3273,5.677,3274,4.037,3275,6.567,3276,4.037,3277,4.037,3278,4.037,3279,4.037,3280,4.037,3281,4.037,3282,4.037,3283,4.037,3284,4.037,3285,4.037]],["title/interfaces/ObjectAndResponse.html",[0,0.058,394,3.086]],["body/interfaces/ObjectAndResponse.html",[0,0.095,2,1.113,3,0.124,4,0.099,5,0.087,8,0.339,12,0.227,13,0.52,14,0.683,18,0.297,19,0.009,26,0.17,34,0.873,50,0.817,57,2.173,58,3.166,60,1.332,66,1.464,75,0.446,77,0.085,81,4.726,84,1.106,122,2.302,145,0.008,146,0.007,147,0.006,195,2.245,208,2.631,225,3.355,245,1.3,278,0.652,328,2.524,347,1.943,377,4.286,379,3.416,380,3.416,381,4.247,382,4.576,383,3.985,384,4.576,385,4.282,386,2.717,387,3.021,388,4.247,389,3.527,390,3.985,391,2.331,392,2.4,393,5.164,394,5.463,395,5.741,397,4.576,400,5.692,402,3.198,403,2.4,404,5.741,405,5.329,406,4.726,407,5.489,408,1.896,409,5.741,410,6.273,411,3.011,412,4.726,413,6.273,414,5.741,415,4.576,417,5.164,418,5.164,419,5,420,5.741,421,5.741,422,5.729,423,4.576,424,5.741,425,2.02,426,5.741,427,5.741,428,5.741,429,4.576,430,4.576]],["title/interfaces/PaginationCallback.html",[0,0.058,1333,2.255]],["body/interfaces/PaginationCallback.html",[0,0.094,2,0.417,3,0.047,4,0.037,5,0.033,8,0.127,9,1.571,12,0.29,13,0.372,14,0.204,15,1.668,18,0.225,19,0.009,20,0.667,22,0.849,25,0.553,26,0.165,27,1.045,30,1.708,31,0.927,34,1.115,36,1.651,39,0.762,40,1.819,42,1.019,47,0.671,50,0.877,52,0.708,55,2.913,59,0.762,60,1.192,61,1.824,62,0.762,63,0.671,64,1.858,66,0.716,67,1.315,71,0.905,72,0.509,73,2.675,75,0.423,76,1.214,77,0.053,79,0.849,80,0.927,82,0.624,83,2.069,84,0.672,85,3.297,86,1.813,87,0.927,89,2.812,90,0.655,92,3.481,94,1.048,96,1.351,97,0.888,98,0.743,99,2.126,100,0.724,106,1.913,107,1.174,109,2.184,112,0.528,113,0.744,116,1.233,117,1.247,118,2.345,122,0.688,123,2.6,124,1.02,126,0.688,127,1.247,128,0.826,129,0.817,134,1.46,135,0.849,137,1.668,138,2.224,140,2.125,144,1.449,145,0.003,146,0.003,147,0.002,148,0.51,150,0.768,151,1.326,164,1.351,166,0.408,167,0.716,168,0.826,170,0.624,172,1.569,175,1.133,176,1.133,177,1.133,178,0.645,185,1.098,192,0.217,195,2.233,196,1.43,198,0.384,205,1.019,213,0.795,215,0.478,220,1.133,221,1.516,222,0.743,227,0.804,229,2.716,241,1.4,242,1.853,245,1.415,246,0.762,248,1.125,252,0.927,261,1.133,268,1.092,270,0.452,271,0.217,278,0.641,284,0.851,287,2.716,314,1.28,320,0.998,321,0.824,326,0.655,327,0.688,328,1.233,335,0.567,338,0.58,344,0.541,347,0.805,358,0.671,363,0.655,364,0.688,368,1.02,385,1.614,386,0.688,392,0.9,396,0.683,402,0.956,403,3.233,408,0.927,425,1.153,431,1.614,435,1.667,439,1.689,440,2.528,451,0.398,455,1.614,457,1.393,502,0.996,503,0.344,511,1.924,513,1.667,524,1.647,525,2.292,537,0.705,543,1.092,549,1.046,552,1.351,568,1.098,573,1.315,578,1.77,580,1.351,584,0.762,586,1.502,604,2.382,605,2.002,619,0.671,623,0.949,633,1.019,648,1.125,649,0.783,652,0.567,656,0.762,677,1.019,681,0.705,683,0.927,705,1.019,711,1.019,713,0.516,716,1.125,733,1.262,753,1.814,754,1.842,756,0.624,758,2.393,759,1.969,767,0.956,768,0.762,770,1.464,771,1.786,772,1.786,792,2.262,806,2.537,807,1.472,810,1.43,814,0.9,816,0.9,817,0.9,819,0.849,820,0.655,821,0.826,824,0.874,825,0.567,826,1.541,827,1.464,828,1.814,833,2.221,834,2.736,835,1.247,836,1.714,842,1.389,843,1.814,844,1.393,846,0.849,849,0.9,850,2.157,852,2.246,853,0.9,856,0.671,861,1.464,862,2.513,863,1.541,864,0.9,866,0.783,871,1.204,874,0.705,877,1.393,879,1.502,886,1.098,892,0.849,896,1.981,901,0.826,905,2.373,906,2.536,915,1.43,919,1.43,931,1.563,936,2.365,977,1.614,985,2.365,990,1.814,999,1.43,1006,0.874,1015,0.987,1016,0.826,1040,1.315,1043,1.984,1044,1.563,1046,1.28,1070,0.956,1073,1.054,1089,2.115,1128,0.987,1138,3.297,1201,0.804,1232,0.849,1235,2.618,1236,1.054,1237,1.926,1238,1.516,1239,1.926,1240,1.177,1241,1.092,1242,1.177,1243,1.853,1244,2.351,1245,2.608,1246,1.177,1247,2.015,1248,1.926,1249,0.874,1250,1.853,1251,0.783,1252,2.443,1253,1.926,1254,0.594,1255,1.924,1256,0.956,1257,1.154,1258,3.351,1259,2.887,1260,1.133,1261,2.266,1262,1.092,1263,1.054,1264,1.724,1265,0.987,1266,1.853,1267,2.266,1268,1.092,1269,1.133,1270,0.874,1271,1.133,1272,2.618,1273,1.133,1274,4.259,1275,1.786,1276,1.133,1277,2.351,1278,1.786,1279,2.528,1280,1.924,1281,1.177,1282,1.667,1283,1.177,1284,1.724,1285,1.177,1286,3.113,1287,1.786,1288,1.177,1289,1.177,1290,1.926,1291,1.133,1292,2.716,1293,1.177,1294,2.047,1295,1.786,1296,1.926,1297,1.926,1298,1.926,1299,2.618,1300,2.443,1301,1.019,1302,0.987,1303,1.177,1304,1.177,1305,1.177,1306,0.956,1307,3.113,1308,4.012,1309,2.443,1310,0.874,1311,1.177,1312,1.177,1313,4.167,1314,1.092,1315,2.311,1316,3.527,1317,1.092,1318,1.177,1319,2.266,1320,1.054,1321,0.783,1322,1.177,1323,1.177,1324,2.995,1325,1.177,1326,1.389,1327,2.266,1328,0.826,1329,0.9,1330,2.443,1331,1.563,1332,1.177,1333,1.786,1334,2.443,1335,2.443,1336,1.177,1337,1.177,1338,1.724,1339,1.092,1340,1.177,1341,1.177,1342,1.177,1343,1.853,1344,2.443,1345,1.177,1346,1.177,1347,1.177,1348,1.926,1349,1.177,1350,1.926,1351,1.177,1352,2.443,1353,1.177,1354,1.092,1355,1.092,1356,1.177,1357,1.926,1358,1.177,1359,1.177,1360,1.177,1361,1.177,1362,1.177,1363,1.177,1364,1.133,1365,1.177,1366,1.926,1367,1.177,1368,1.133,1369,1.177,1370,1.814,1371,1.177,1372,2.443,1373,1.853,1374,1.177,1375,1.177,1376,3.342,1377,1.177,1378,1.926,1379,1.177,1380,1.177,1381,1.926,1382,2.443,1383,2.443,1384,1.926,1385,2.443,1386,2.823,1387,1.177,1388,1.926,1389,2.716,1390,1.177,1391,1.926,1392,1.177,1393,1.177,1394,1.177,1395,0.705,1396,1.177,1397,1.177,1398,1.177,1399,1.177,1400,1.177,1401,1.177,1402,1.926,1403,1.926,1404,1.926,1405,1.926,1406,2.443,1407,1.177,1408,1.177,1409,1.177,1410,1.177,1411,1.926,1412,1.926,1413,2.823,1414,1.177,1415,1.177,1416,1.177,1417,1.177,1418,1.926,1419,2.823,1420,2.823,1421,0.9,1422,1.177,1423,2.443,1424,1.177,1425,1.133,1426,1.853,1427,1.177,1428,1.177,1429,1.177,1430,1.177,1431,1.177,1432,1.177,1433,1.177,1434,1.177,1435,1.177,1436,1.177,1437,1.177,1438,1.133,1439,1.177,1440,1.177,1441,1.926,1442,1.177,1443,1.177,1444,1.177,1445,1.092,1446,1.177,1447,1.177,1448,1.177,1449,1.177,1450,1.054,1451,1.177,1452,1.092,1453,1.177,1454,1.177,1455,1.177,1456,1.177,1457,0.956,1458,1.177,1459,1.177,1460,1.177,1461,1.177,1462,1.177,1463,1.177,1464,1.177,1465,1.177,1466,1.177,1467,1.177,1468,1.177,1469,1.177,1470,1.926,1471,1.926,1472,1.926,1473,1.177,1474,2.443,1475,2.823,1476,1.926,1477,1.177,1478,1.177,1479,1.177,1480,1.177,1481,1.177,1482,1.177,1483,1.177,1484,1.092,1485,1.177,1486,1.177,1487,1.177,1488,0.705,1489,1.177,1490,1.177,1491,1.177,1492,1.177,1493,1.177,1494,1.177,1495,2.443,1496,0.987,1497,1.177,1498,1.177,1499,1.177,1500,1.177,1501,1.177,1502,1.177,1503,1.177,1504,1.177,1505,1.177,1506,2.528,1507,1.177,1508,1.177,1509,1.133,1510,1.177,1511,1.177,1512,1.177,1513,1.926,1514,1.177,1515,1.177,1516,1.177,1517,1.177,1518,1.926,1519,1.177,1520,1.177,1521,1.177,1522,1.177,1523,1.177,1524,1.177,1525,1.177,1526,1.177,1527,1.177,1528,1.177,1529,1.177,1530,1.177,1531,1.177,1532,1.177,1533,1.177,1534,1.177,1535,1.133,1536,1.133,1537,1.177,1538,1.177,1539,1.926,1540,1.926,1541,1.563,1542,1.926,1543,1.853,1544,1.177,1545,1.177,1546,1.926,1547,1.177,1548,1.926,1549,1.177,1550,1.177,1551,1.177,1552,1.177,1553,1.177,1554,1.177,1555,1.133,1556,1.177,1557,1.133,1558,1.177,1559,1.177,1560,1.177,1561,1.926,1562,1.177,1563,1.177,1564,1.177,1565,1.177,1566,1.177,1567,1.177,1568,1.177,1569,1.177,1570,1.177,1571,1.177,1572,2.823,1573,2.443,1574,1.177,1575,1.177,1576,1.177,1577,1.177,1578,1.926,1579,1.177,1580,1.177,1581,1.177,1582,1.177,1583,1.177,1584,1.177,1585,1.177,1586,1.926,1587,1.177,1588,1.177,1589,1.177,1590,0.987,1591,1.177,1592,1.177,1593,1.177,1594,1.177,1595,1.177,1596,1.177,1597,1.177,1598,1.177,1599,1.177,1600,1.177,1601,1.177,1602,1.177,1603,1.177,1604,2.823,1605,1.177,1606,1.177,1607,1.177,1608,1.177,1609,1.177,1610,1.177,1611,1.133,1612,1.177,1613,1.177,1614,1.926,1615,1.177,1616,1.926,1617,1.177,1618,1.177,1619,1.926,1620,1.177,1621,1.177,1622,1.177,1623,1.177,1624,1.177,1625,2.443,1626,1.177,1627,1.177,1628,1.177,1629,1.853,1630,1.177,1631,1.177,1632,1.177,1633,1.177,1634,1.177,1635,1.177,1636,1.177,1637,1.177,1638,1.177,1639,1.177,1640,0.987,1641,1.177,1642,1.177,1643,1.177,1644,0.987,1645,1.177,1646,1.177,1647,1.926,1648,3.113,1649,1.019,1650,1.177,1651,1.177,1652,1.177,1653,1.177,1654,1.177,1655,1.177,1656,1.926,1657,1.177,1658,1.177,1659,1.853,1660,1.177,1661,1.092,1662,1.177,1663,1.177,1664,1.177,2868,1.881,2869,1.716]],["title/interfaces/PaginationConfiguration.html",[0,0.058,1299,2.255]],["body/interfaces/PaginationConfiguration.html",[0,0.093,2,0.407,3,0.045,4,0.036,5,0.032,8,0.124,9,1.551,12,0.288,13,0.367,14,0.654,15,1.639,18,0.26,19,0.009,20,0.653,22,0.828,25,0.54,26,0.163,27,1.024,30,1.742,31,0.904,34,1.106,36,1.676,39,0.743,40,1.795,42,0.994,47,0.654,50,0.871,52,0.602,55,2.899,59,0.756,60,1.116,61,1.804,62,0.743,63,0.654,64,1.836,66,0.701,67,1.288,71,0.887,72,0.498,73,2.662,75,0.415,76,1.19,77,0.052,79,0.828,80,0.908,82,0.608,83,2.319,84,0.662,85,3.267,86,1.792,87,1.485,89,2.794,90,0.639,92,3.46,94,1.085,96,1.324,97,0.874,98,0.724,99,2.206,100,0.706,106,2.03,107,1.176,109,2.155,112,0.515,113,0.717,116,1.212,117,1.221,118,2.317,122,0.671,123,2.577,124,0.999,126,0.695,127,1.8,128,0.806,129,0.844,134,1.707,135,0.828,137,1.639,138,2.38,140,2.382,144,1.436,145,0.004,146,0.003,147,0.002,148,0.506,150,0.752,151,1.303,164,1.685,166,0.398,167,0.701,168,0.806,170,0.608,172,1.561,175,1.105,176,1.105,177,1.105,178,0.634,185,1.075,192,0.348,195,2.214,196,1.413,198,0.378,205,0.994,213,0.731,215,0.47,220,1.105,221,1.891,222,0.724,227,0.784,229,2.675,241,1.387,242,1.815,245,1.406,246,0.743,248,1.102,252,0.904,261,1.105,268,1.065,270,0.448,271,0.212,278,0.641,284,0.847,287,2.675,314,1.254,320,0.98,321,0.807,326,0.639,327,0.671,328,1.212,335,0.553,338,0.566,344,0.527,347,0.789,358,0.654,363,0.639,364,0.671,368,0.999,385,1.581,386,0.671,392,0.878,396,0.669,402,0.932,403,3.297,408,0.908,425,1.135,431,1.581,435,1.633,439,1.667,440,2.75,451,0.388,455,1.581,457,1.585,502,0.975,503,0.335,511,1.891,513,1.633,524,1.72,525,2.257,537,0.688,543,1.065,549,1.028,552,1.324,568,1.075,573,1.288,578,1.749,580,1.324,584,0.743,586,1.476,604,2.359,605,2.091,619,1.075,623,0.93,633,0.994,648,1.102,649,0.763,652,0.553,656,0.743,677,1.633,681,0.688,683,0.904,705,0.994,711,0.994,713,0.503,716,1.102,733,1.252,753,1.783,754,1.826,756,0.608,758,2.375,759,1.951,767,0.932,768,0.743,770,1.439,771,1.75,772,1.75,792,2.32,806,2.509,807,1.442,810,1.4,814,0.878,816,0.878,817,0.878,819,0.828,820,0.639,821,0.806,824,0.852,825,0.553,826,1.514,827,1.439,828,1.783,833,2.195,834,2.75,835,1.221,836,1.685,842,1.361,843,1.783,844,1.369,846,0.828,849,0.878,850,2.125,852,2.216,853,0.878,856,0.654,861,1.439,862,2.488,863,1.754,864,0.878,866,0.763,871,0.93,874,0.688,877,1.369,879,1.476,886,1.075,892,0.828,896,1.951,901,0.806,905,2.376,906,2.758,915,1.4,919,1.4,931,1.532,936,2.33,977,2.012,985,2.33,990,1.783,999,1.4,1006,0.852,1015,0.962,1016,0.806,1040,1.288,1043,1.95,1044,1.532,1046,1.254,1070,0.932,1073,1.689,1089,2.079,1128,0.962,1138,3.446,1201,0.784,1232,0.828,1235,2.579,1236,1.028,1237,1.887,1238,1.485,1239,1.887,1240,1.148,1241,1.065,1242,1.148,1243,1.815,1244,2.31,1245,2.574,1246,1.148,1247,1.988,1248,1.887,1249,0.852,1250,1.815,1251,0.763,1252,2.401,1253,1.887,1254,0.58,1255,1.485,1256,0.932,1257,1.13,1258,3.512,1259,2.849,1260,1.105,1261,2.227,1262,1.065,1263,1.028,1264,1.689,1265,0.962,1266,1.815,1267,2.227,1268,1.065,1269,1.105,1270,0.852,1271,1.105,1272,2.849,1273,1.105,1274,4.237,1275,1.75,1276,1.105,1277,2.31,1278,1.75,1279,2.49,1280,1.891,1281,1.148,1282,1.633,1283,1.148,1284,1.689,1285,1.148,1286,2.781,1287,1.75,1288,1.148,1289,1.148,1290,1.887,1291,1.105,1292,2.675,1293,1.148,1294,2.012,1295,1.75,1296,1.887,1297,1.887,1298,2.401,1299,2.849,1300,3.302,1301,1.633,1302,1.581,1303,1.887,1304,1.887,1305,1.887,1306,1.532,1307,3.644,1308,4.203,1309,3.302,1310,1.4,1311,2.781,1312,2.781,1313,4.138,1314,1.065,1315,2.064,1316,3.489,1317,1.065,1318,1.148,1319,2.227,1320,1.028,1321,0.763,1322,1.148,1323,1.148,1324,2.955,1325,1.148,1326,1.361,1327,2.227,1328,0.806,1329,0.878,1330,2.401,1331,1.532,1332,1.148,1333,1.065,1334,1.887,1335,1.887,1336,1.148,1337,1.148,1338,1.689,1339,1.065,1340,1.148,1341,1.148,1342,1.148,1343,1.815,1344,2.401,1345,1.148,1346,1.148,1347,1.148,1348,1.887,1349,1.148,1350,1.887,1351,1.148,1352,2.401,1353,1.148,1354,1.065,1355,1.065,1356,1.148,1357,1.887,1358,1.148,1359,1.148,1360,1.148,1361,1.148,1362,1.148,1363,1.148,1364,1.105,1365,1.148,1366,1.887,1367,1.148,1368,1.105,1369,1.148,1370,1.783,1371,1.148,1372,2.401,1373,1.815,1374,1.148,1375,1.148,1376,3.302,1377,1.148,1378,1.887,1379,1.148,1380,1.148,1381,1.887,1382,2.401,1383,2.401,1384,1.887,1385,2.401,1386,2.781,1387,1.148,1388,1.887,1389,2.675,1390,1.148,1391,1.887,1392,1.148,1393,1.148,1394,1.148,1395,0.688,1396,1.148,1397,1.148,1398,1.148,1399,1.148,1400,1.148,1401,1.148,1402,1.887,1403,1.887,1404,1.887,1405,1.887,1406,2.401,1407,1.148,1408,1.148,1409,1.148,1410,1.148,1411,1.887,1412,1.887,1413,2.781,1414,1.148,1415,1.148,1416,1.148,1417,1.148,1418,1.887,1419,2.781,1420,2.781,1421,0.878,1422,1.148,1423,2.401,1424,1.148,1425,1.105,1426,1.815,1427,1.148,1428,1.148,1429,1.148,1430,1.148,1431,1.148,1432,1.148,1433,1.148,1434,1.148,1435,1.148,1436,1.148,1437,1.148,1438,1.105,1439,1.148,1440,1.148,1441,1.887,1442,1.148,1443,1.148,1444,1.148,1445,1.065,1446,1.148,1447,1.148,1448,1.148,1449,1.148,1450,1.028,1451,1.148,1452,1.065,1453,1.148,1454,1.148,1455,1.148,1456,1.148,1457,0.932,1458,1.148,1459,1.148,1460,1.148,1461,1.148,1462,1.148,1463,1.148,1464,1.148,1465,1.148,1466,1.148,1467,1.148,1468,1.148,1469,1.148,1470,1.887,1471,1.887,1472,1.887,1473,1.148,1474,2.401,1475,2.781,1476,1.887,1477,1.148,1478,1.148,1479,1.148,1480,1.148,1481,1.148,1482,1.148,1483,1.148,1484,1.065,1485,1.148,1486,1.148,1487,1.148,1488,0.688,1489,1.148,1490,1.148,1491,1.148,1492,1.148,1493,1.148,1494,1.148,1495,2.401,1496,0.962,1497,1.148,1498,1.148,1499,1.148,1500,1.148,1501,1.148,1502,1.148,1503,1.148,1504,1.148,1505,1.148,1506,2.49,1507,1.148,1508,1.148,1509,1.105,1510,1.148,1511,1.148,1512,1.148,1513,1.887,1514,1.148,1515,1.148,1516,1.148,1517,1.148,1518,1.887,1519,1.148,1520,1.148,1521,1.148,1522,1.148,1523,1.148,1524,1.148,1525,1.148,1526,1.148,1527,1.148,1528,1.148,1529,1.148,1530,1.148,1531,1.148,1532,1.148,1533,1.148,1534,1.148,1535,1.105,1536,1.105,1537,1.148,1538,1.148,1539,1.887,1540,1.887,1541,1.532,1542,1.887,1543,1.815,1544,1.148,1545,1.148,1546,1.887,1547,1.148,1548,1.887,1549,1.148,1550,1.148,1551,1.148,1552,1.148,1553,1.148,1554,1.148,1555,1.105,1556,1.148,1557,1.105,1558,1.148,1559,1.148,1560,1.148,1561,1.887,1562,1.148,1563,1.148,1564,1.148,1565,1.148,1566,1.148,1567,1.148,1568,1.148,1569,1.148,1570,1.148,1571,1.148,1572,2.781,1573,2.401,1574,1.148,1575,1.148,1576,1.148,1577,1.148,1578,1.887,1579,1.148,1580,1.148,1581,1.148,1582,1.148,1583,1.148,1584,1.148,1585,1.148,1586,1.887,1587,1.148,1588,1.148,1589,1.148,1590,0.962,1591,1.148,1592,1.148,1593,1.148,1594,1.148,1595,1.148,1596,1.148,1597,1.148,1598,1.148,1599,1.148,1600,1.148,1601,1.148,1602,1.148,1603,1.148,1604,2.781,1605,1.148,1606,1.148,1607,1.148,1608,1.148,1609,1.148,1610,1.148,1611,1.105,1612,1.148,1613,1.148,1614,1.887,1615,1.148,1616,1.887,1617,1.148,1618,1.148,1619,1.887,1620,1.148,1621,1.148,1622,1.148,1623,1.148,1624,1.148,1625,2.401,1626,1.148,1627,1.148,1628,1.148,1629,1.815,1630,1.148,1631,1.148,1632,1.148,1633,1.148,1634,1.148,1635,1.148,1636,1.148,1637,1.148,1638,1.148,1639,1.148,1640,0.962,1641,1.148,1642,1.148,1643,1.148,1644,0.962,1645,1.148,1646,1.148,1647,1.887,1648,3.072,1649,0.994,1650,1.148,1651,1.148,1652,1.148,1653,1.148,1654,1.148,1655,1.148,1656,1.887,1657,1.148,1658,1.148,1659,1.815,1660,1.148,1661,1.065,1662,1.148,1663,1.148,1664,1.148]],["title/interfaces/PagionationInformation.html",[0,0.058,1295,2.255]],["body/interfaces/PagionationInformation.html",[0,0.094,2,0.417,3,0.046,4,0.037,5,0.033,8,0.127,9,1.571,12,0.29,13,0.372,14,0.204,15,1.667,18,0.243,19,0.009,20,0.666,22,0.849,25,0.553,26,0.165,27,1.044,30,1.707,31,0.926,34,1.115,36,1.651,39,0.761,40,1.952,42,1.018,47,0.671,50,0.877,52,0.613,55,2.912,59,0.762,60,1.129,61,1.823,62,0.761,63,0.671,64,1.858,66,0.715,67,1.314,71,0.905,72,0.508,73,2.675,75,0.418,76,1.214,77,0.053,79,0.849,80,0.926,82,0.623,83,2.068,84,0.671,85,3.296,86,1.813,87,0.926,89,2.811,90,0.654,92,3.48,94,1.047,96,1.35,97,0.887,98,0.742,99,2.126,100,0.723,106,1.912,107,1.174,109,2.183,112,0.528,113,0.723,116,1.233,117,1.246,118,2.344,122,1.125,123,2.599,124,1.019,126,0.69,127,1.246,128,0.825,129,0.817,134,1.459,135,0.849,137,1.667,138,2.224,140,2.124,144,1.449,145,0.003,146,0.003,147,0.002,148,0.509,150,0.768,151,1.325,164,1.35,166,0.407,167,0.715,168,0.825,170,0.623,172,1.569,175,1.132,176,1.132,177,1.132,178,0.645,185,1.097,192,0.217,195,2.233,196,1.429,198,0.384,205,1.018,213,0.74,215,0.478,220,1.852,221,1.515,222,0.742,227,0.803,229,2.715,241,1.4,242,1.852,245,1.415,246,0.761,248,1.125,252,0.926,261,1.132,268,1.091,270,0.452,271,0.217,278,0.641,284,0.85,287,2.715,314,1.279,320,0.997,321,0.823,326,0.654,327,0.687,328,1.233,335,0.566,338,0.58,344,0.54,347,0.804,358,0.671,363,0.654,364,0.687,368,1.019,385,1.612,386,0.687,392,0.899,396,0.682,402,0.955,403,3.276,408,0.926,425,1.152,431,1.612,435,1.666,439,1.813,440,2.526,451,0.398,455,1.612,457,1.392,502,0.995,503,0.344,511,1.923,513,1.666,524,1.647,525,2.291,537,0.705,543,1.091,549,1.045,552,1.35,568,1.097,573,1.314,578,1.769,580,1.35,584,0.761,586,1.501,604,2.381,605,2.002,619,0.671,623,0.949,633,1.018,648,1.125,649,0.782,652,0.566,656,0.761,677,1.018,681,0.705,683,0.926,705,1.018,711,1.018,713,0.515,716,1.125,733,1.262,753,1.813,754,1.841,756,0.623,758,2.392,759,1.969,767,0.955,768,0.761,770,1.463,771,1.785,772,1.785,792,2.34,806,2.52,807,1.471,810,1.429,814,0.899,816,0.899,817,0.899,819,0.849,820,0.654,821,0.825,824,0.873,825,0.566,826,1.54,827,1.463,828,1.813,833,2.22,834,2.736,835,1.246,836,1.714,842,1.388,843,1.813,844,1.392,846,0.849,849,0.899,850,2.156,852,2.245,853,0.899,856,0.671,861,1.463,862,2.512,863,1.54,864,0.899,866,0.782,871,0.949,874,0.705,877,1.392,879,1.501,886,1.097,892,0.849,896,1.98,901,0.825,905,2.372,906,2.535,915,1.429,919,1.429,931,1.562,936,2.364,977,1.612,985,2.364,990,1.813,999,1.429,1006,0.873,1015,0.986,1016,0.825,1040,1.314,1043,1.983,1044,1.562,1046,1.279,1070,0.955,1073,1.053,1089,2.114,1128,0.986,1138,3.296,1201,0.803,1232,0.849,1235,2.617,1236,1.053,1237,1.924,1238,1.515,1239,1.924,1240,1.176,1241,1.091,1242,1.176,1243,1.852,1244,2.35,1245,2.607,1246,1.176,1247,2.014,1248,1.924,1249,0.873,1250,1.852,1251,0.782,1252,2.442,1253,1.924,1254,0.594,1255,1.515,1256,0.955,1257,1.153,1258,3.412,1259,2.886,1260,1.132,1261,2.265,1262,1.091,1263,1.053,1264,1.723,1265,0.986,1266,1.852,1267,2.265,1268,1.091,1269,1.132,1270,0.873,1271,1.132,1272,2.617,1273,1.132,1274,4.218,1275,1.785,1276,1.132,1277,2.35,1278,1.785,1279,2.526,1280,1.923,1281,1.176,1282,1.666,1283,1.176,1284,1.723,1285,1.176,1286,2.822,1287,1.785,1288,1.176,1289,1.176,1290,1.924,1291,1.132,1292,2.715,1293,1.924,1294,2.364,1295,2.265,1296,3.112,1297,3.112,1298,1.924,1299,2.617,1300,2.442,1301,1.018,1302,0.986,1303,1.176,1304,1.176,1305,1.176,1306,0.955,1307,3.112,1308,4.011,1309,2.442,1310,0.873,1311,1.176,1312,1.176,1313,4.166,1314,1.091,1315,2.094,1316,3.526,1317,1.091,1318,1.176,1319,2.265,1320,1.053,1321,0.782,1322,1.176,1323,1.176,1324,2.994,1325,1.176,1326,1.388,1327,2.265,1328,0.825,1329,0.899,1330,2.442,1331,1.562,1332,1.176,1333,1.091,1334,1.924,1335,1.924,1336,1.176,1337,1.176,1338,1.723,1339,1.091,1340,1.176,1341,1.176,1342,1.176,1343,1.852,1344,2.442,1345,1.176,1346,1.176,1347,1.176,1348,1.924,1349,1.176,1350,1.924,1351,1.176,1352,2.442,1353,1.176,1354,1.091,1355,1.091,1356,1.176,1357,1.924,1358,1.176,1359,1.176,1360,1.176,1361,1.176,1362,1.176,1363,1.176,1364,1.132,1365,1.176,1366,1.924,1367,1.176,1368,1.132,1369,1.176,1370,1.813,1371,1.176,1372,2.442,1373,1.852,1374,1.176,1375,1.176,1376,3.341,1377,1.176,1378,1.924,1379,1.176,1380,1.176,1381,1.924,1382,2.442,1383,2.442,1384,1.924,1385,2.442,1386,2.822,1387,1.176,1388,1.924,1389,2.715,1390,1.176,1391,1.924,1392,1.176,1393,1.176,1394,1.176,1395,0.705,1396,1.176,1397,1.176,1398,1.176,1399,1.176,1400,1.176,1401,1.176,1402,1.924,1403,1.924,1404,1.924,1405,1.924,1406,2.442,1407,1.176,1408,1.176,1409,1.176,1410,1.176,1411,1.924,1412,1.924,1413,2.822,1414,1.176,1415,1.176,1416,1.176,1417,1.176,1418,1.924,1419,2.822,1420,2.822,1421,0.899,1422,1.176,1423,2.442,1424,1.176,1425,1.132,1426,1.852,1427,1.176,1428,1.176,1429,1.176,1430,1.176,1431,1.176,1432,1.176,1433,1.176,1434,1.176,1435,1.176,1436,1.176,1437,1.176,1438,1.132,1439,1.176,1440,1.176,1441,1.924,1442,1.176,1443,1.176,1444,1.176,1445,1.091,1446,1.176,1447,1.176,1448,1.176,1449,1.176,1450,1.053,1451,1.176,1452,1.091,1453,1.176,1454,1.176,1455,1.176,1456,1.176,1457,0.955,1458,1.176,1459,1.176,1460,1.176,1461,1.176,1462,1.176,1463,1.176,1464,1.176,1465,1.176,1466,1.176,1467,1.176,1468,1.176,1469,1.176,1470,1.924,1471,1.924,1472,1.924,1473,1.176,1474,2.442,1475,2.822,1476,1.924,1477,1.176,1478,1.176,1479,1.176,1480,1.176,1481,1.176,1482,1.176,1483,1.176,1484,1.091,1485,1.176,1486,1.176,1487,1.176,1488,0.705,1489,1.176,1490,1.176,1491,1.176,1492,1.176,1493,1.176,1494,1.176,1495,2.442,1496,0.986,1497,1.176,1498,1.176,1499,1.176,1500,1.176,1501,1.176,1502,1.176,1503,1.176,1504,1.176,1505,1.176,1506,2.526,1507,1.176,1508,1.176,1509,1.132,1510,1.176,1511,1.176,1512,1.176,1513,1.924,1514,1.176,1515,1.176,1516,1.176,1517,1.176,1518,1.924,1519,1.176,1520,1.176,1521,1.176,1522,1.176,1523,1.176,1524,1.176,1525,1.176,1526,1.176,1527,1.176,1528,1.176,1529,1.176,1530,1.176,1531,1.176,1532,1.176,1533,1.176,1534,1.176,1535,1.132,1536,1.132,1537,1.176,1538,1.176,1539,1.924,1540,1.924,1541,1.562,1542,1.924,1543,1.852,1544,1.176,1545,1.176,1546,1.924,1547,1.176,1548,1.924,1549,1.176,1550,1.176,1551,1.176,1552,1.176,1553,1.176,1554,1.176,1555,1.132,1556,1.176,1557,1.132,1558,1.176,1559,1.176,1560,1.176,1561,1.924,1562,1.176,1563,1.176,1564,1.176,1565,1.176,1566,1.176,1567,1.176,1568,1.176,1569,1.176,1570,1.176,1571,1.176,1572,2.822,1573,2.442,1574,1.176,1575,1.176,1576,1.176,1577,1.176,1578,1.924,1579,1.176,1580,1.176,1581,1.176,1582,1.176,1583,1.176,1584,1.176,1585,1.176,1586,1.924,1587,1.176,1588,1.176,1589,1.176,1590,0.986,1591,1.176,1592,1.176,1593,1.176,1594,1.176,1595,1.176,1596,1.176,1597,1.176,1598,1.176,1599,1.176,1600,1.176,1601,1.176,1602,1.176,1603,1.176,1604,2.822,1605,1.176,1606,1.176,1607,1.176,1608,1.176,1609,1.176,1610,1.176,1611,1.132,1612,1.176,1613,1.176,1614,1.924,1615,1.176,1616,1.924,1617,1.176,1618,1.176,1619,1.924,1620,1.176,1621,1.176,1622,1.176,1623,1.176,1624,1.176,1625,2.442,1626,1.176,1627,1.176,1628,1.176,1629,1.852,1630,1.176,1631,1.176,1632,1.176,1633,1.176,1634,1.176,1635,1.176,1636,1.176,1637,1.176,1638,1.176,1639,1.176,1640,0.986,1641,1.176,1642,1.176,1643,1.176,1644,0.986,1645,1.176,1646,1.176,1647,1.924,1648,3.112,1649,1.018,1650,1.176,1651,1.176,1652,1.176,1653,1.176,1654,1.176,1655,1.176,1656,1.924,1657,1.176,1658,1.176,1659,1.852,1660,1.176,1661,1.091,1662,1.176,1663,1.176,1664,1.176]],["title/classes/Percent.html",[77,0.052,3263,3.289]],["body/classes/Percent.html",[3,0.098,4,0.079,5,0.069,8,0.445,12,0.18,13,0.446,14,0.748,18,0.309,19,0.009,20,1.171,25,2.178,26,0.134,31,2.663,34,1.068,62,2.67,71,1.939,75,0.48,77,0.073,83,2.958,84,1.118,86,1.35,107,0.871,113,0.865,126,0.71,129,0.955,133,2.393,145,0.004,146,0.006,147,0.004,172,1.614,178,0.893,192,0.914,198,0.807,213,1.179,214,1.604,215,0.871,222,2.133,227,2.624,241,0.946,245,1.268,278,0.544,284,0.623,361,2.617,378,1.35,436,2.373,447,3.459,451,0.841,480,1.568,501,3.973,503,0.988,526,3.487,549,2.068,591,2.019,646,4.127,709,2.591,733,1.09,755,2.44,797,3.327,833,1.653,838,3.441,879,2.079,929,2.984,930,3.856,931,2.746,934,5.235,939,4.878,940,4.878,942,5.779,943,5.779,944,5.235,945,4.293,946,5.235,947,4.058,948,4.948,954,1.835,969,3.364,970,3.364,974,5.235,975,5.558,977,2.084,978,5.356,979,3.113,980,4.381,981,4.314,982,4.001,983,3.156,984,3.156,985,2.084,986,3.156,987,5.475,990,2.511,991,4.293,994,4.293,995,5.339,999,3.202,1000,5.462,1001,5.462,1002,5.235,1003,4.293,1005,4.058,1006,2.511,1007,3.364,1008,3.364,1009,3.364,1010,3.364,1011,3.364,1012,3.364,1013,3.364,1014,3.156,1015,2.084,1016,1.745,1017,4.293,1018,4.293,1019,4.293,1020,3.156,1021,3.156,1022,2.984,1023,3.156,1024,3.156,1025,3.156,1026,4.293,1027,4.293,1028,3.156,1263,3.441,1860,2.928,2358,3.364,3055,3.973,3263,6.02,3286,3.973,3287,4.502,3288,4.502,3289,6.122,3290,6.122,3291,8.055,3292,6.957,3293,6.122,3294,6.122,3295,3.973,3296,6.122,3297,4.502,3298,4.502,3299,4.502,3300,4.502,3301,4.502,3302,4.502,3303,4.502,3304,6.122,3305,4.502,3306,4.502,3307,4.502]],["title/modules/PipesModule.html",[2527,1.533,3308,3.086]],["body/modules/PipesModule.html",[3,0.145,4,0.117,5,0.102,19,0.009,26,0.145,77,0.079,145,0.007,146,0.008,147,0.007,270,0.489,271,0.679,284,0.679,319,2.207,350,3.412,353,3.412,355,3.32,360,3.232,371,3.32,508,3.189,885,3.684,954,1.999,979,2.658,1488,2.207,2375,3.416,2376,3.298,2377,3.416,2378,3.416,2379,3.416,2380,3.416,2381,3.416,2527,2.323,2531,4.074,2532,2.734,3188,5.912,3308,6.452,3309,3.087,3310,3.087,3311,3.416,3312,4.281,3313,5.884,3314,5.884,3315,5.884,3316,4.026,3317,5.368,3318,4.983,3319,4.177,3320,6.668]],["title/interfaces/RegisteredProviders.html",[0,0.058,2971,2.917]],["body/interfaces/RegisteredProviders.html",[0,0.111,2,1.103,3,0.123,4,0.099,5,0.087,8,0.336,12,0.342,13,0.517,18,0.25,19,0.009,20,1.484,26,0.155,43,4.184,50,0.645,64,2.178,75,0.48,77,0.067,78,2.309,80,1.885,84,1.07,94,0.76,97,0.978,113,0.591,126,0.556,131,3.48,144,1.866,145,0.006,146,0.007,147,0.008,213,0.74,215,0.926,225,2.244,227,2.124,241,1.49,270,0.441,271,0.573,278,0.593,284,0.79,366,2.535,367,2.008,503,0.909,549,1.834,604,2.013,648,1.818,656,3.11,733,1.262,815,2.993,851,2.885,886,1.773,889,1.864,1689,3.111,1741,4.079,1871,5.44,2176,3.546,2532,3.182,2643,3.384,2774,5.83,2813,5.44,2966,4.97,2967,3.111,2968,2.993,2969,3.948,2970,4.208,2971,5.397,2972,5.396,2973,4.533,2974,5.707,2975,5.798,2976,5.707,2977,5.707,2978,6.882,2979,4.97,2980,4.208,2981,3.24,2982,4.533,2983,3.948,2984,4.533,2985,5.707,2986,6.246,2987,4.533,2988,4.533,2989,4.533,2990,5.707,2991,5.707,2992,5.707,2993,5.707,2994,4.533,2995,4.533,2996,4.533,2997,4.533,2998,4.533,2999,4.533,3000,4.533,3001,4.533,3002,5.707,3003,4.533,3004,4.533,3005,4.533,3006,4.533,3007,4.533,3008,4.533,3009,4.533,3010,4.533]],["title/interfaces/SearchSection.html",[0,0.058,3321,3.544]],["body/interfaces/SearchSection.html",[0,0.08,2,0.866,3,0.096,4,0.077,5,0.068,12,0.177,13,0.441,18,0.213,19,0.009,20,0.845,25,1.148,26,0.096,30,1.836,33,3.303,35,1.969,36,1.271,40,1.952,43,3.921,50,0.918,58,2.107,59,0.876,60,1.449,64,2.461,75,0.423,77,0.053,83,2.531,84,0.581,86,1.813,87,1.923,90,1.358,92,2.712,94,1.127,97,1.197,99,2.221,106,1.501,107,1.054,129,0.566,131,2.712,144,0.929,145,0.007,146,0.006,147,0.009,148,0.586,151,1.325,166,0.845,167,1.415,168,1.713,170,1.293,172,1.659,194,1.293,198,0.384,221,2.63,228,3.901,241,1.449,270,0.461,271,0.45,278,0.617,284,0.702,344,1.968,351,1.358,358,2.523,365,2.826,366,3.14,367,2.114,383,3.099,396,0.866,403,1.866,408,1.175,411,2.553,439,1.325,440,3.409,451,0.825,457,1.392,473,4.124,484,3.559,502,1.727,503,0.976,505,2.784,511,2.998,524,1.647,537,1.463,549,1.752,583,2.265,614,2.265,716,1.427,731,2.784,733,1.227,811,3.34,832,2.265,856,1.392,871,1.647,879,2.053,889,2.002,891,2.35,897,1.923,899,2.442,918,1.866,990,2.826,1031,2.544,1035,3.901,1044,3.091,1070,1.983,1081,3.303,1141,3.303,1143,4.24,1231,2.93,1244,3.663,1245,2.799,1247,2.162,1249,1.813,1321,1.623,1354,3.098,1368,2.35,1373,3.214,1450,2.187,1452,3.976,1509,2.35,1590,2.046,1649,2.114,1816,3.559,1884,4.24,1923,5.799,1925,4.868,1927,3.559,1931,4.868,1981,3.559,2049,3.303,2130,2.93,2131,2.93,2321,4.832,2358,4.519,2401,3.901,2532,3.039,2637,4.007,2743,4.868,2774,5.143,2779,3.901,2783,3.901,2813,3.099,2922,4.868,2967,2.442,2968,2.35,2970,4.519,2971,4.567,2972,2.784,2975,4.519,2978,5.15,2981,4.264,2983,3.099,3060,3.559,3321,6.247,3322,3.901,3323,5.855,3324,4.519,3325,3.901,3326,4.42,3327,4.42,3328,4.42,3329,4.42,3330,4.42,3331,4.42,3332,4.42,3333,3.901,3334,4.42,3335,4.42,3336,3.901,3337,3.901,3338,4.42,3339,4.42,3340,4.42,3341,4.42,3342,4.42,3343,3.901,3344,4.42,3345,4.42,3346,8.202,3347,4.42,3348,4.42,3349,3.559,3350,3.559,3351,4.42,3352,4.42,3353,4.42,3354,6.046,3355,6.046,3356,4.42,3357,4.42,3358,4.42,3359,4.42,3360,6.046,3361,4.42,3362,6.046,3363,4.42,3364,4.42,3365,4.42,3366,6.892,3367,3.901,3368,4.42,3369,3.901,3370,4.42,3371,4.42,3372,4.42,3373,4.42,3374,4.42,3375,6.046,3376,6.892,3377,4.42,3378,4.42,3379,4.42,3380,4.42,3381,8.011,3382,4.42,3383,4.42,3384,4.42,3385,4.42,3386,6.046,3387,3.901,3388,4.42,3389,4.42,3390,4.42,3391,4.42,3392,6.892,3393,4.42,3394,4.42,3395,4.42,3396,3.901,3397,4.42,3398,4.42,3399,4.42,3400,6.046,3401,4.42,3402,4.42,3403,4.42,3404,4.42,3405,4.42,3406,4.42,3407,4.42,3408,4.42,3409,3.901,3410,4.42,3411,4.42,3412,4.42,3413,4.42,3414,4.42,3415,4.42,3416,4.42,3417,4.42,3418,4.42,3419,4.42,3420,4.42,3421,4.42,3422,6.046,3423,4.42,3424,3.901,3425,4.42,3426,4.42,3427,4.42,3428,4.42,3429,4.42,3430,4.42,3431,3.901,3432,4.42,3433,4.42]],["title/interfaces/SelectOption.html",[0,0.058,2170,2.34]],["body/interfaces/SelectOption.html",[0,0.09,2,1.327,3,0.148,4,0.119,5,0.104,8,0.404,12,0.271,13,0.578,14,0.76,18,0.297,19,0.009,20,1.296,26,0.148,30,1.679,34,1.332,50,0.776,72,1.266,75,0.488,94,1.136,107,0.964,113,0.833,126,0.659,127,2.837,138,2.361,145,0.007,146,0.008,147,0.007,198,0.778,344,1.719,999,3.254,1310,3.625,2170,4.217,3434,5.981,3435,5.981,3436,8.674,3437,7.934]],["title/directives/ShowClippedTextDirective.html",[322,1.495,374,1.616]],["body/directives/ShowClippedTextDirective.html",[0,0.049,3,0.081,4,0.065,5,0.057,8,0.222,9,1.04,12,0.149,13,0.391,14,0.514,18,0.292,19,0.009,25,1.632,26,0.15,27,1.609,30,1.703,36,0.784,38,1.844,50,0.427,52,0.871,59,0.934,72,0.917,77,0.044,80,0.991,82,1.091,84,0.705,86,1.118,94,0.928,96,2.824,97,0.932,99,2.061,100,2.134,106,1.266,107,0.53,113,0.391,116,1.496,126,0.595,129,1,144,1.128,145,0.004,146,0.005,147,0.004,152,2.241,153,1.145,164,1.445,165,1.486,166,1.026,167,0.766,172,1.596,178,0.783,185,1.69,188,2.334,192,0.882,194,2.384,195,1.174,196,1.793,198,0.679,200,2.165,213,0.997,214,1.102,215,0.58,221,1.622,227,1.406,241,1.644,252,3.872,270,0.232,271,0.38,278,0.603,284,0.796,320,1.21,321,1.848,322,2.654,368,1.091,374,2.308,375,2.991,439,1.118,451,0.696,457,1.174,480,1.299,524,1.461,549,1.486,584,1.919,586,1.266,598,2.654,601,1.982,605,1.234,648,1.204,652,1.427,713,0.902,749,5.444,755,1.486,792,1.266,818,3.221,820,2.735,832,1.91,844,2.294,859,2.2,866,1.369,874,1.776,886,1.174,887,1.333,904,3.473,905,1.065,906,2.248,907,1.91,908,3.872,954,2.184,982,1.91,1038,4.814,1039,2.348,1040,1.406,1041,2.964,1042,4.32,1043,3.506,1044,3.084,1045,2.505,1046,2.308,1047,4.166,1048,5.138,1049,3.887,1050,5.444,1051,4.025,1052,5.444,1053,4.132,1054,5.444,1055,2.786,1056,3.002,1057,2.786,1058,3.002,1059,3.002,1060,3.002,1061,2.139,1062,2.786,1063,2.786,1064,3.002,1065,3.002,1066,2.241,1067,5.302,1068,3.002,1069,3.002,1070,1.672,1071,4.32,1072,3.002,1073,3.109,1074,5.061,1075,3.002,1076,3.762,1077,2.724,1078,3.002,1079,3.002,1080,3.002,1081,2.786,1082,3.002,1083,2.786,1084,3.002,1085,5.444,1086,3.002,1087,5.061,1088,3.002,1089,3.006,1090,3.002,1091,5.061,1092,4.32,1093,3.002,1094,4.32,1095,3.002,1096,4.32,1097,2.471,1098,3.002,1099,5.061,1100,3.002,1101,3.002,1102,3.002,1103,4.32,1104,4.32,1105,3.002,1106,3.002,1107,4.407,1108,3.002,1109,3.002,1110,3.002,1111,3.002,1112,3.002,1113,5.535,1114,3.002,1115,3.002,1116,3.002,1117,5.535,1118,3.002,1119,5.061,1120,4.32,1121,3.002,1122,5.535,1123,3.002,1124,3.002,1125,3.002,1126,3.002,1127,3.002,1128,2.484,1129,3.002,1130,3.002,1131,4.32,1132,3.002,1133,4.32,1134,5.535,1135,4.32,1136,4.166,1137,4.32,1138,1.783,1139,4.32,1140,3.002,1141,2.786,1142,3.002,1143,2.614,1144,4.32,1145,3.002,1146,3.002,1147,3.002,1148,3.002,1149,2.471,1150,3.002,1151,2.614,1152,2.786,1153,3.002,1154,3.002,1155,3.002,1156,4.32,1157,5.061,1158,3.002,1159,3.002,1160,3.002,1161,3.002,1162,3.002,1163,4.32,1164,5.535,1165,2.614,1166,2.614,1167,2.614,1168,2.614,1169,5.865,1170,5.061,1171,5.547,1172,3.002,1173,5.535,1174,3.29,1175,3.29,1176,3.002,1177,3.29,1178,3.29,1179,3.002,1180,4.01,1181,3.002,1182,3.29,1183,4.32,1184,4.01,1185,4.735,1186,5.547,1187,3.29,1188,3.29,1189,4.735,1190,3.29,1191,4.735,1192,5.547,1193,3.29,1194,4.735,1195,4.735,1196,4.735,1197,5.547,1198,4.735,1199,5.547,1200,4.735,1201,2.593,1202,6.067,1203,5.547,1204,3.29,1205,3.29,1206,4.735,1207,4.735,1208,2.146,1209,4.735,1210,3.29,1211,3.29,1212,3.29,1213,3.29,1214,3.29,1215,3.29,1216,2.903,1217,5.138,1218,3.29,1219,3.29,1220,5.547,1221,4.735,1222,4.735,1223,6.067,1224,5.547,1225,6.067,1226,3.29,1227,3.002,1228,3.29,1229,3.29,1230,3.002,1231,2.471,1232,1.486,1233,3.002,1234,3.002,3438,3.728,3439,5.366,3440,5.366,3441,3.728,3442,3.728,3443,3.728,3444,3.728,3445,3.728,3446,3.728,3447,3.728,3448,3.728,3449,3.728,3450,3.728,3451,3.728,3452,3.728]],["title/modules/ShowClippedTextDirectiveModule.html",[2527,1.533,3453,2.917]],["body/modules/ShowClippedTextDirectiveModule.html",[3,0.149,4,0.12,5,0.105,19,0.009,26,0.149,77,0.081,145,0.007,146,0.008,147,0.007,270,0.496,271,0.696,319,2.261,374,3.399,508,3.267,524,1.86,820,2.449,821,2.648,954,2.048,979,2.723,1038,3.774,1488,2.261,1784,3.931,2375,3.5,2376,3.379,2377,3.5,2378,3.5,2379,3.5,2380,3.5,2381,3.5,2527,2.38,2531,3.907,2532,2.801,3309,3.162,3310,3.162,3311,3.5,3312,4.324,3316,4.084,3319,4.237,3453,5.997,3454,6.028,3455,6.028,3456,6.028,3457,6.831]],["title/classes/ShowClippedTextDirectiveTestHelper.html",[77,0.052,3458,3.289]],["body/classes/ShowClippedTextDirectiveTestHelper.html",[3,0.101,4,0.081,5,0.071,8,0.275,12,0.184,13,0.453,14,0.754,18,0.298,19,0.009,26,0.136,36,1.585,59,0.941,71,1.197,72,1.149,75,0.46,77,0.074,94,1.018,96,3.051,99,1.381,113,0.653,126,0.487,129,0.965,134,1.777,144,0.969,145,0.005,146,0.006,147,0.005,148,0.436,151,1.381,153,1.911,172,1.651,178,0.908,188,2.705,192,0.931,194,1.348,198,0.655,200,1.451,213,1.135,214,1.616,215,0.851,241,1.773,252,3.063,270,0.438,271,0.469,278,0.623,284,0.768,322,2.391,362,1.945,374,2.284,378,1.865,391,2.551,451,0.86,480,1.605,524,1.917,549,2.1,820,2.826,821,1.786,844,2.217,1038,5.058,1043,3.158,1044,3.158,1047,5.495,1049,3.607,1051,3.89,1053,4.232,1067,5.376,1077,2.453,1097,3.054,1107,5.286,1136,4.996,1151,5.52,1165,3.231,1166,3.231,1167,3.231,1168,3.231,1232,2.479,1249,1.89,1761,3.077,2007,3.306,2124,2.879,2523,2.77,2558,3.917,2561,3.917,2562,4.748,2609,3.738,2661,4.435,3458,4.648,3459,7.371,3460,3.71,3461,5.489,3462,6.213,3463,6.213,3464,6.213,3465,6.652,3466,6.652,3467,6.652,3468,6.652,3469,6.652,3470,6.22,3471,6.22,3472,6.213,3473,6.213,3474,6.213,3475,6.213,3476,6.213,3477,4.066,3478,4.608,3479,4.608,3480,6.213,3481,4.608,3482,5.489,3483,4.608,3484,5.489,3485,4.608,3486,4.608,3487,4.608,3488,4.608,3489,4.608,3490,4.608,3491,4.608,3492,4.608,3493,4.608,3494,4.608,3495,4.608,3496,4.608,3497,4.608,3498,4.608,3499,4.608,3500,4.608,3501,4.608,3502,4.608,3503,4.608,3504,4.608,3505,4.608,3506,4.608,3507,4.608,3508,4.608,3509,4.608,3510,4.608,3511,4.608,3512,4.608,3513,4.608,3514,4.608,3515,4.608,3516,4.066,3517,4.066,3518,4.066,3519,4.066,3520,6.652,3521,4.066,3522,4.066,3523,4.066,3524,4.066,3525,4.066,3526,4.066,3527,5.489,3528,6.213,3529,4.066,3530,5.489,3531,5.489,3532,4.066,3533,5.489,3534,4.066,3535,4.066,3536,4.066,3537,4.066,3538,5.489,3539,4.066,3540,4.066,3541,4.066,3542,4.066,3543,4.066,3544,4.066,3545,5.489,3546,4.066,3547,4.066,3548,4.066,3549,4.066,3550,4.066,3551,5.489]],["title/components/ShowClippedTextDirectiveTestHostComponent.html",[148,0.309,362,1.858]],["body/components/ShowClippedTextDirectiveTestHostComponent.html",[3,0.104,4,0.083,5,0.073,12,0.191,13,0.464,18,0.289,19,0.009,26,0.139,36,1.607,59,0.86,60,0.89,63,1.501,71,1.238,72,1.256,75,0.456,77,0.076,94,0.967,96,2.963,99,1.908,113,0.5,126,0.624,129,0.917,134,1.818,144,1.002,145,0.005,146,0.006,147,0.005,148,0.503,149,1.955,150,1.402,151,1.908,153,1.955,154,1.901,165,1.901,166,1.75,167,1.86,172,1.497,192,0.834,194,1.395,198,0.622,200,1.501,215,0.861,241,1.786,252,2.074,270,0.446,271,0.486,278,0.627,284,0.778,319,1.578,320,1.436,321,1.504,322,2.704,323,3.538,324,2.207,325,2.207,326,1.465,327,1.539,328,1.775,329,2.946,330,1.429,331,2.013,332,2.207,333,1.848,334,2.207,335,1.268,336,2.207,337,1.751,338,2.081,339,1.798,340,3.538,341,1.661,342,1.798,343,1.848,344,1.209,345,1.661,346,1.955,347,1.101,348,2.207,349,2.013,350,1.848,351,2.517,352,2.207,353,1.848,354,2.946,355,1.798,356,2.207,357,1.955,358,1.501,359,2.207,360,1.751,361,1.998,362,3.227,363,1.465,364,1.539,365,1.955,366,1.705,367,1.101,368,1.395,369,1.33,370,2.207,371,1.798,372,2.139,373,2.207,374,2.806,375,2.074,376,2.207,378,1.429,391,1.955,480,1.661,524,1.951,549,2.11,820,2.67,821,1.848,844,2.256,1038,4.621,1043,2.139,1044,3.572,1047,5.278,1049,3.67,1051,3.957,1053,4.306,1067,5.066,1077,1.661,1097,3.16,1107,3.343,1136,3.16,1151,5.359,1165,3.343,1166,3.343,1167,3.343,1168,3.343,1232,1.901,1249,1.955,1761,2.359,2007,2.534,2124,2.207,2230,5.767,2523,2.866,2558,4.008,2561,3.003,2562,4.008,2609,3.825,2661,3.003,3458,3.563,3459,6.734,3460,3.839,3461,4.208,3462,4.208,3463,4.208,3464,4.208,3465,4.208,3466,4.208,3467,4.208,3468,4.208,3469,4.208,3472,4.208,3473,4.208,3474,4.208,3475,4.208,3476,4.208,3480,4.208,3482,4.208,3484,4.208,3516,4.208,3517,4.208,3518,4.208,3519,4.208,3520,6.745,3521,4.208,3522,4.208,3523,4.208,3524,4.208,3525,4.208,3526,4.208,3527,5.616,3528,6.322,3529,4.208,3530,5.616,3531,5.616,3532,4.208,3533,5.616,3534,4.208,3535,4.208,3536,4.208,3537,4.208,3538,5.616,3539,4.208,3540,4.208,3541,4.208,3542,4.208,3543,4.208,3544,4.208,3545,7.23,3546,5.616,3547,5.616,3548,6.322,3549,5.616,3550,6.322,3551,6.745,3552,4.768,3553,4.768,3554,4.768,3555,4.768,3556,4.768,3557,4.768]],["title/interfaces/SortedColumn.html",[0,0.058,1287,2.255]],["body/interfaces/SortedColumn.html",[0,0.094,2,0.417,3,0.046,4,0.037,5,0.033,8,0.127,9,1.57,12,0.29,13,0.372,14,0.204,15,1.667,18,0.243,19,0.009,20,0.666,22,0.848,25,0.553,26,0.165,27,1.044,30,1.707,31,0.926,34,1.115,36,1.651,39,0.761,40,1.818,42,1.018,47,0.67,50,0.877,52,0.612,55,2.912,59,0.762,60,1.129,61,1.823,62,0.761,63,0.67,64,1.857,66,0.715,67,1.313,71,0.904,72,0.508,73,2.675,75,0.428,76,1.213,77,0.053,79,0.848,80,0.926,82,1.019,83,2.067,84,0.671,85,3.295,86,1.812,87,0.926,89,2.811,90,0.654,92,3.48,94,1.071,96,1.35,97,0.887,98,0.741,99,2.125,100,0.723,106,1.912,107,1.174,109,2.183,112,0.527,113,0.723,116,1.232,117,1.245,118,2.343,122,0.687,123,2.599,124,1.019,126,0.683,127,1.245,128,0.825,129,0.816,134,1.458,135,0.848,137,1.667,138,2.223,140,2.124,144,1.449,145,0.003,146,0.003,147,0.002,148,0.509,150,0.767,151,1.325,164,1.35,166,0.407,167,0.715,168,0.825,170,0.623,172,1.569,175,1.131,176,1.131,177,1.131,178,0.645,185,1.096,192,0.217,195,2.232,196,1.429,198,0.384,205,1.018,213,0.74,215,0.69,220,1.131,221,1.515,222,0.741,227,0.803,229,2.714,241,1.4,242,1.851,245,1.415,246,0.761,248,1.124,252,0.926,261,1.131,268,1.09,270,0.452,271,0.217,278,0.641,284,0.85,287,2.714,314,1.279,320,0.997,321,0.823,326,0.654,327,0.687,328,1.232,335,0.566,338,0.58,344,0.54,347,0.804,358,0.67,363,0.654,364,0.687,368,1.019,385,1.612,386,0.687,392,0.899,396,0.682,402,0.955,403,3.232,408,0.926,425,1.152,431,1.612,435,1.665,439,1.812,440,2.526,451,0.397,455,1.612,457,1.391,502,0.995,503,0.344,511,1.922,513,1.665,524,1.646,525,2.29,537,0.705,543,1.09,549,1.045,552,1.35,568,1.096,573,1.313,578,1.769,580,1.35,584,0.761,586,1.5,604,2.381,605,2.001,619,0.67,623,0.948,633,1.018,648,1.124,649,0.781,652,0.566,656,0.761,677,1.018,681,0.705,683,0.926,705,1.018,711,1.018,713,0.515,716,1.124,733,1.262,753,1.812,754,1.958,756,0.623,758,2.392,759,1.968,767,0.955,768,0.761,770,1.463,771,1.784,772,1.784,792,2.34,806,2.52,807,1.47,810,1.428,814,0.899,816,0.899,817,0.899,819,0.848,820,0.654,821,0.825,824,0.873,825,0.566,826,1.539,827,1.463,828,1.812,833,2.22,834,2.735,835,1.245,836,1.713,842,1.388,843,1.812,844,1.391,846,0.848,849,0.899,850,2.156,852,2.244,853,0.899,856,0.67,861,1.463,862,2.511,863,1.539,864,0.899,866,0.781,871,0.948,874,0.705,877,1.391,879,1.5,886,1.096,892,0.848,896,1.979,901,0.825,905,2.372,906,2.535,915,1.428,919,1.428,931,1.562,936,2.363,977,1.612,985,2.954,990,1.812,999,1.428,1006,0.873,1015,0.985,1016,0.825,1040,1.313,1043,1.982,1044,1.562,1046,1.279,1070,0.955,1073,1.053,1089,2.113,1128,0.985,1138,3.295,1201,0.803,1232,0.848,1235,2.616,1236,1.053,1237,1.924,1238,1.515,1239,1.924,1240,1.176,1241,1.09,1242,1.176,1243,1.851,1244,2.349,1245,2.606,1246,1.176,1247,2.013,1248,1.924,1249,0.873,1250,1.851,1251,0.781,1252,2.441,1253,1.924,1254,0.594,1255,1.515,1256,0.955,1257,1.153,1258,3.35,1259,2.885,1260,1.131,1261,2.264,1262,1.09,1263,1.053,1264,1.722,1265,0.985,1266,1.851,1267,2.264,1268,1.09,1269,1.131,1270,0.873,1271,1.131,1272,2.616,1273,1.131,1274,4.218,1275,1.784,1276,1.131,1277,2.349,1278,1.784,1279,2.526,1280,1.922,1281,1.176,1282,1.665,1283,1.176,1284,1.722,1285,1.176,1286,2.821,1287,2.264,1288,1.924,1289,1.924,1290,3.111,1291,1.131,1292,2.714,1293,1.176,1294,2.045,1295,1.784,1296,1.924,1297,1.924,1298,1.924,1299,2.616,1300,2.441,1301,1.018,1302,0.985,1303,1.176,1304,1.176,1305,1.176,1306,0.955,1307,3.111,1308,4.011,1309,2.441,1310,0.873,1311,1.176,1312,1.176,1313,4.165,1314,1.09,1315,2.094,1316,3.525,1317,1.09,1318,1.176,1319,2.264,1320,1.053,1321,0.781,1322,1.176,1323,1.176,1324,2.993,1325,1.176,1326,1.388,1327,2.264,1328,0.825,1329,0.899,1330,2.441,1331,1.562,1332,1.176,1333,1.09,1334,1.924,1335,1.924,1336,1.176,1337,1.176,1338,1.722,1339,1.09,1340,1.176,1341,1.176,1342,1.176,1343,1.851,1344,2.441,1345,1.176,1346,1.176,1347,1.176,1348,1.924,1349,1.176,1350,1.924,1351,1.176,1352,2.441,1353,1.176,1354,1.09,1355,1.09,1356,1.176,1357,1.924,1358,1.176,1359,1.176,1360,1.176,1361,1.176,1362,1.176,1363,1.176,1364,1.131,1365,1.176,1366,1.924,1367,1.176,1368,1.131,1369,1.176,1370,1.812,1371,1.176,1372,2.441,1373,1.851,1374,1.176,1375,1.176,1376,3.34,1377,1.176,1378,1.924,1379,1.176,1380,1.176,1381,1.924,1382,2.441,1383,2.441,1384,1.924,1385,2.441,1386,2.821,1387,1.176,1388,1.924,1389,2.714,1390,1.176,1391,1.924,1392,1.176,1393,1.176,1394,1.176,1395,0.705,1396,1.176,1397,1.176,1398,1.176,1399,1.176,1400,1.176,1401,1.176,1402,1.924,1403,1.924,1404,1.924,1405,1.924,1406,2.441,1407,1.176,1408,1.176,1409,1.176,1410,1.176,1411,1.924,1412,1.924,1413,2.821,1414,1.176,1415,1.176,1416,1.176,1417,1.176,1418,1.924,1419,2.821,1420,2.821,1421,0.899,1422,1.176,1423,2.441,1424,1.176,1425,1.131,1426,1.851,1427,1.176,1428,1.176,1429,1.176,1430,1.176,1431,1.176,1432,1.176,1433,1.176,1434,1.176,1435,1.176,1436,1.176,1437,1.176,1438,1.131,1439,1.176,1440,1.176,1441,1.924,1442,1.176,1443,1.176,1444,1.176,1445,1.09,1446,1.176,1447,1.176,1448,1.176,1449,1.176,1450,1.053,1451,1.176,1452,1.09,1453,1.176,1454,1.176,1455,1.176,1456,1.176,1457,0.955,1458,1.176,1459,1.176,1460,1.176,1461,1.176,1462,1.176,1463,1.176,1464,1.176,1465,1.176,1466,1.176,1467,1.176,1468,1.176,1469,1.176,1470,1.924,1471,1.924,1472,1.924,1473,1.176,1474,2.441,1475,2.821,1476,1.924,1477,1.176,1478,1.176,1479,1.176,1480,1.176,1481,1.176,1482,1.176,1483,1.176,1484,1.09,1485,1.176,1486,1.176,1487,1.176,1488,0.705,1489,1.176,1490,1.176,1491,1.176,1492,1.176,1493,1.176,1494,1.176,1495,2.441,1496,0.985,1497,1.176,1498,1.176,1499,1.176,1500,1.176,1501,1.176,1502,1.176,1503,1.176,1504,1.176,1505,1.176,1506,2.526,1507,1.176,1508,1.176,1509,1.131,1510,1.176,1511,1.176,1512,1.176,1513,1.924,1514,1.176,1515,1.176,1516,1.176,1517,1.176,1518,1.924,1519,1.176,1520,1.176,1521,1.176,1522,1.176,1523,1.176,1524,1.176,1525,1.176,1526,1.176,1527,1.176,1528,1.176,1529,1.176,1530,1.176,1531,1.176,1532,1.176,1533,1.176,1534,1.176,1535,1.131,1536,1.131,1537,1.176,1538,1.176,1539,1.924,1540,1.924,1541,1.562,1542,1.924,1543,1.851,1544,1.176,1545,1.176,1546,1.924,1547,1.176,1548,1.924,1549,1.176,1550,1.176,1551,1.176,1552,1.176,1553,1.176,1554,1.176,1555,1.131,1556,1.176,1557,1.131,1558,1.176,1559,1.176,1560,1.176,1561,1.924,1562,1.176,1563,1.176,1564,1.176,1565,1.176,1566,1.176,1567,1.176,1568,1.176,1569,1.176,1570,1.176,1571,1.176,1572,2.821,1573,2.441,1574,1.176,1575,1.176,1576,1.176,1577,1.176,1578,1.924,1579,1.176,1580,1.176,1581,1.176,1582,1.176,1583,1.176,1584,1.176,1585,1.176,1586,1.924,1587,1.176,1588,1.176,1589,1.176,1590,0.985,1591,1.176,1592,1.176,1593,1.176,1594,1.176,1595,1.176,1596,1.176,1597,1.176,1598,1.176,1599,1.176,1600,1.176,1601,1.176,1602,1.176,1603,1.176,1604,2.821,1605,1.176,1606,1.176,1607,1.176,1608,1.176,1609,1.176,1610,1.176,1611,1.131,1612,1.176,1613,1.176,1614,1.924,1615,1.176,1616,1.924,1617,1.176,1618,1.176,1619,1.924,1620,1.176,1621,1.176,1622,1.176,1623,1.176,1624,1.176,1625,2.441,1626,1.176,1627,1.176,1628,1.176,1629,1.851,1630,1.176,1631,1.176,1632,1.176,1633,1.176,1634,1.176,1635,1.176,1636,1.176,1637,1.176,1638,1.176,1639,1.176,1640,0.985,1641,1.176,1642,1.176,1643,1.176,1644,0.985,1645,1.176,1646,1.176,1647,1.924,1648,3.111,1649,1.018,1650,1.176,1651,1.176,1652,1.176,1653,1.176,1654,1.176,1655,1.176,1656,1.924,1657,1.176,1658,1.176,1659,1.851,1660,1.176,1661,1.09,1662,1.176,1663,1.176,1664,1.176]],["title/components/SpinnerActivityReporterComponent.html",[148,0.309,363,1.352]],["body/components/SpinnerActivityReporterComponent.html",[3,0.102,4,0.082,5,0.072,8,0.423,12,0.187,13,0.458,14,0.797,18,0.31,19,0.009,21,3.885,26,0.102,30,1.556,34,0.964,36,1.32,39,2.246,57,1.886,58,3.084,59,0.899,60,0.873,63,1.472,65,2.434,72,1.106,75,0.48,77,0.056,94,0.631,97,1.232,99,2.273,106,2.408,109,2.749,122,1.509,126,0.556,129,0.804,145,0.005,146,0.006,147,0.005,148,0.498,149,1.917,150,1.384,151,1.401,153,1.436,154,1.863,165,1.863,166,1.753,167,1.867,170,1.838,178,0.916,192,0.896,194,2.075,198,0.546,208,2.164,213,1.157,214,1.778,215,0.951,216,1.917,225,2.503,270,0.441,271,0.476,319,1.547,320,1.417,321,1.484,322,1.587,323,3.51,324,2.164,325,2.164,326,1.436,327,2.289,328,2.513,329,2.907,330,1.401,331,1.973,332,2.164,333,1.812,334,2.164,335,1.243,336,2.164,337,1.716,338,2.065,339,1.763,340,3.51,341,1.628,342,1.763,343,1.812,344,1.186,345,1.628,346,1.917,347,2.044,348,2.164,349,1.973,350,1.812,351,2.502,352,2.164,353,1.812,354,2.907,355,1.763,356,2.164,357,1.917,358,2.62,359,2.164,360,1.716,361,1.978,362,1.973,363,2.329,364,2.82,365,1.917,366,1.671,367,1.079,368,1.368,369,1.303,370,2.164,371,1.763,372,2.096,373,2.164,374,1.716,375,2.033,376,2.164,377,4.557,379,5.002,386,2.686,389,3.106,400,5.025,406,3.098,407,4.467,408,1.67,417,4.162,418,3.098,431,3.967,437,4.693,443,6.087,444,5.056,445,5.056,446,5.056,447,3.247,448,6.104,449,6.558,450,6.7,451,0.873,452,4.125,455,3.662,460,5.056,461,3.763,463,5.71,464,3.763,465,5.056,466,3.763,468,3.763,470,3.763,471,5.71,473,3.338,474,5.056,475,5.711,476,3.493,477,3.763,500,3.763,503,1.014,504,5.542,505,4.467,523,5.542,524,2.218,525,3.653,526,3.34,527,4.125,528,4.125,529,4.125,530,4.125,531,4.125,532,4.125,535,4.125,536,3.763,539,4.125,540,6.259,542,5.542,549,1.925,1590,2.907,3558,6.7,3559,6.28,3560,6.28,3561,4.674,3562,7.582,3563,4.674,3564,4.674,3565,4.674]],["title/classes/SpinnerActivityReporterWidgetObject.html",[77,0.052,3566,3.544]],["body/classes/SpinnerActivityReporterWidgetObject.html",[3,0.105,4,0.084,5,0.074,8,0.476,12,0.192,13,0.466,14,0.815,18,0.315,19,0.009,25,1.867,26,0.105,34,0.737,35,1.372,57,1.277,59,0.804,66,1.476,71,1.867,72,1.049,75,0.501,77,0.057,80,1.701,94,0.97,99,1.44,107,0.683,124,2.243,126,0.501,129,1.089,134,1.827,142,2.154,145,0.005,146,0.008,147,0.005,148,0.56,153,1.965,166,1.375,167,1.313,172,1.408,178,0.933,188,2.782,192,0.917,198,0.762,200,1.512,201,3.277,213,1.168,214,1.748,215,0.92,216,2.948,245,0.876,270,0.447,271,0.489,278,0.598,284,0.489,321,2.155,328,2.374,347,1.109,363,1.476,364,2.577,367,1.896,378,1.44,391,3.144,396,0.941,411,2.028,425,1.083,455,3.328,475,5.041,503,1.032,505,4.528,526,3.569,545,6.61,546,3.867,547,4.397,548,3.822,549,1.887,550,2.982,551,4.075,552,2.787,553,3.822,554,4.028,555,4.028,556,3.822,557,4.028,558,4.028,559,4.028,563,2.553,564,3.183,565,2.297,566,1.631,567,2.553,568,1.512,569,2.553,570,2.376,571,2.553,572,2.553,573,3.384,574,4.833,575,3.183,576,2.461,577,3.399,578,1.871,579,3.399,580,2.479,581,4.454,582,3.792,583,3.684,584,2.571,585,2.553,586,2.845,587,4.364,588,3.183,589,2.553,590,3.183,591,2.154,592,2.671,593,2.868,594,3.277,595,2.553,596,3.183,597,2.782,598,2.376,599,2.553,600,3.183,601,2.553,602,2.553,603,3.183,604,1.718,605,2.38,606,2.553,607,2.553,608,3.183,609,2.553,610,2.553,611,3.183,612,2.553,613,3.277,614,2.461,615,2.553,616,2.297,617,2.376,618,2.553,619,1.512,620,3.399,621,2.553,622,3.183,623,1.308,624,2.553,625,4.239,627,4.239,632,4.239,633,2.297,634,4.239,635,4.239,733,0.855,891,2.553,1395,1.59,1541,2.154,3558,6.61,3566,5.149,3567,7.666,3568,7.666,3569,4.803,3570,4.803,3571,4.803,3572,4.803,3573,4.803,3574,4.803,3575,4.803,3576,4.803]],["title/modules/SpotlightSearchModule.html",[2527,1.533,3577,3.086]],["body/modules/SpotlightSearchModule.html",[3,0.144,4,0.115,5,0.101,19,0.009,26,0.144,77,0.078,145,0.007,146,0.008,147,0.007,270,0.559,271,0.67,319,2.179,365,3.78,366,2.789,508,3.148,537,2.179,725,2.179,954,1.974,979,2.624,1254,1.836,1488,2.179,1784,3.789,2375,3.373,2376,3.257,2377,3.373,2378,3.373,2379,3.373,2380,3.373,2381,3.373,2527,2.294,2530,3.789,2531,3.847,2532,3.408,2967,3.637,2968,3.499,2981,5.119,3200,3.637,3309,3.048,3310,3.048,3311,3.373,3312,4.258,3316,3.996,3319,4.146,3325,5.81,3577,6.386,3578,5.81,3579,5.81,3580,5.81,3581,5.81,3582,6.584,3583,4.688,3584,6.28,3585,5.829,3586,4.688,3587,4.688,3588,6.584]],["title/interfaces/SpotlightSearchProvider.html",[0,0.058,2972,2.772]],["body/interfaces/SpotlightSearchProvider.html",[0,0.111,2,1.306,3,0.145,4,0.117,5,0.102,8,0.469,12,0.266,14,0.638,18,0.235,19,0.009,26,0.145,50,0.764,58,2.738,75,0.48,84,0.876,106,2.668,145,0.008,146,0.008,147,0.007,148,0.551,178,1.147,192,0.679,213,1.098,214,1.369,215,0.721,270,0.415,366,2.988,367,2.125,403,3.318,879,2.93,889,2.601,1031,4.522,2532,3.223,2774,5.208,2967,4.341,2968,4.177,2972,4.949,2981,4.522,2983,5.51,3324,6.244,3333,6.935,3589,5.884,3590,7.858,3591,6.668,3592,7.858,3593,8.628,3594,7.858]],["title/interfaces/SpotlightSearchResult.html",[0,0.058,3323,3.086]],["body/interfaces/SpotlightSearchResult.html",[0,0.103,2,1.28,3,0.143,4,0.114,5,0.1,8,0.39,12,0.261,13,0.566,14,0.743,18,0.309,19,0.009,26,0.169,30,1.924,52,1.188,58,2.705,59,0.686,64,2.756,67,3.349,71,2.017,72,1.133,75,0.484,106,2.636,111,3.594,112,1.924,113,0.815,145,0.008,146,0.008,147,0.006,148,0.545,366,3.065,367,2.021,576,3.978,613,3.978,616,3.713,899,4.29,1031,3.76,1438,4.127,2967,3.61,2968,3.473,3286,6.852,3323,5.809,3324,4.883,3387,6.852,3595,5.261,3596,8.572,3597,8.572,3598,7.764,3599,7.764]],["title/injectables/SpotlightSearchService.html",[1741,2.533,2981,2.533]],["body/injectables/SpotlightSearchService.html",[0,0.105,3,0.115,4,0.092,5,0.081,8,0.404,12,0.336,13,0.494,14,0.649,18,0.265,19,0.009,20,1.609,26,0.148,43,4.144,50,0.601,64,2.083,75,0.486,77,0.062,78,2.154,80,1.397,84,1.043,94,0.915,97,1.178,113,0.551,126,0.622,129,0.868,131,3.368,144,1.871,145,0.005,146,0.007,147,0.008,178,0.99,192,0.808,198,0.589,213,1.08,214,1.392,215,0.938,225,2.703,227,2.558,241,1.579,270,0.422,271,0.535,278,0.578,284,0.765,366,2.685,367,2.055,503,0.848,549,2.072,604,1.878,648,1.695,656,3.135,733,1.207,815,2.792,851,3.474,886,1.654,889,1.739,1689,3.746,1741,3.902,1743,3.925,1871,5.266,2176,3.308,2532,3.08,2643,4.076,2774,5.934,2813,5.266,2966,5.266,2967,4.539,2968,4.367,2969,3.683,2970,3.925,2971,5.26,2972,5.3,2973,4.228,2974,4.228,2975,5.612,2976,4.228,2977,4.228,2978,6.88,2979,4.755,2980,3.925,2981,3.902,2982,6.046,2983,4.755,2984,5.46,2985,6.39,2986,6.39,2987,5.46,2988,5.46,2989,5.46,2990,5.46,2991,5.46,2992,6.046,2993,5.46,2994,4.228,2995,4.228,2996,4.228,2997,4.228,2998,4.228,2999,4.228,3000,5.46,3001,5.46,3002,6.046,3003,5.46,3004,5.46,3005,4.228,3006,4.228,3007,6.39,3008,4.228,3009,4.228,3010,4.228,3600,6.781,3601,6.781,3602,5.252,3603,5.252,3604,5.252,3605,5.252]],["title/classes/SubscriptionTracker.html",[77,0.052,1854,2.105]],["body/classes/SubscriptionTracker.html",[0,0.094,3,0.122,4,0.098,5,0.086,8,0.334,12,0.224,13,0.514,14,0.741,18,0.296,19,0.009,26,0.154,50,0.886,52,0.978,57,2.057,59,0.943,77,0.067,84,1.101,111,3.581,112,1.749,129,0.716,144,1.484,145,0.006,146,0.007,147,0.006,148,0.495,150,1.556,172,1.515,178,1.03,192,0.853,198,0.672,213,1.017,214,1.668,215,0.836,216,3.172,245,1.41,270,0.481,271,0.57,278,0.514,284,0.788,347,2.047,378,1.677,438,4.181,451,1.045,457,2.223,652,1.877,733,0.996,1037,5.684,1045,3.238,1255,3.857,1256,2.509,1395,1.852,1450,4.296,1854,3.376,2908,5.781,2909,6.887,2910,4.504,2911,4.937,2912,7.392,2913,6.826,2914,4.937,2915,7.665,2916,4.937,2917,7.392,2918,7.392,2920,4.937,2921,4.937,2922,4.504,2923,4.937,2924,8.138,2925,6.826,2927,6.23,2929,7.549,2930,4.937,2931,4.937,2932,4.937,2933,4.937,2934,5.684,2935,6.23,2936,6.23,2937,5.684,2938,6.23,2939,6.23,2940,4.937,2941,6.23,2942,4.937,2943,4.937,2944,4.937,2945,4.937,2946,6.23,2947,6.23,2948,4.937,2949,4.937,2950,4.937,2951,4.937,2952,4.937,2953,4.937,3606,7.06,3607,5.594,3608,5.594,3609,5.594,3610,5.594]],["title/classes/ThousandsUnit.html",[77,0.052,930,2.772]],["body/classes/ThousandsUnit.html",[3,0.102,4,0.082,5,0.072,8,0.473,12,0.188,13,0.459,14,0.727,18,0.294,19,0.009,20,1.205,26,0.137,34,1.166,62,2.717,71,1.973,75,0.468,77,0.075,83,3.109,84,1.127,107,1.08,113,0.856,126,0.709,129,0.601,145,0.005,146,0.006,147,0.005,172,1.632,178,0.919,192,0.89,198,0.808,213,1.176,214,1.56,215,0.856,222,2.195,227,2.865,241,0.987,245,1.385,278,0.554,284,0.642,361,2.623,378,1.408,436,2.945,447,3.531,480,1.636,503,1.017,526,3.518,549,2.082,591,2.826,646,4.179,709,2.703,755,3.028,797,3.4,838,3.758,879,2.58,929,3.113,930,5.137,931,2.826,934,5.327,939,4.985,940,4.985,941,5.724,942,5.327,943,5.327,944,5.327,945,4.417,946,5.327,947,4.175,948,5.035,954,1.889,969,3.51,970,3.51,974,5.327,975,5.794,977,2.916,978,5.459,979,3.251,980,4.501,981,4.506,982,4.179,983,4.417,984,4.417,985,2.916,986,4.417,987,5.555,990,2.584,991,4.417,994,4.417,995,5.406,999,3.249,1000,5.251,1001,5.035,1002,5.327,1003,4.417,1005,4.175,1006,2.584,1007,3.51,1008,3.51,1009,3.51,1010,3.51,1011,3.51,1012,3.51,1013,3.51,1014,3.293,1015,2.174,1016,1.821,1017,4.417,1018,4.417,1019,4.417,1020,3.293,1021,3.293,1022,4.175,1023,4.417,1024,4.417,1025,4.417,1026,4.417,1027,4.417,1028,3.293,3611,4.696,3612,4.696]],["title/classes/Unit.html",[77,0.052,361,1.227]],["body/classes/Unit.html",[3,0.106,4,0.085,5,0.075,8,0.478,12,0.194,13,0.469,14,0.737,18,0.301,19,0.009,20,1.232,26,0.141,34,0.989,62,2.753,71,2,75,0.48,77,0.077,83,3.024,84,1.135,107,0.916,113,0.895,126,0.711,145,0.005,146,0.006,147,0.005,172,1.646,178,0.94,192,0.888,198,0.807,213,1.17,214,1.581,215,0.89,222,2.245,227,2.727,241,1.021,245,1.318,278,0.561,284,0.656,361,2.616,378,1.456,436,2.497,447,3.504,451,0.907,480,1.692,503,0.784,549,2.092,591,2.178,646,4.219,709,3.708,755,2.568,790,3.406,797,3.682,833,1.783,838,3.576,879,2.188,929,3.219,930,4.058,931,2.89,934,5.399,936,2.248,939,5.069,940,5.069,942,5.399,943,5.399,944,4.517,945,4.517,946,5.399,947,4.27,948,5.103,954,1.932,974,5.069,975,5.655,977,2.248,978,5.374,979,3.194,980,4.466,981,4.427,982,4.105,983,3.406,984,3.406,985,2.248,986,3.406,987,5.774,990,2.642,991,4.517,994,4.517,995,5.458,999,3.377,1000,5.655,1001,5.103,1002,5.399,1003,4.517,1005,4.27,1006,2.642,1014,4.517,1015,2.982,1016,2.497,1017,4.517,1018,4.517,1019,4.517,1020,3.406,1021,3.406,1022,3.219,1023,3.406,1024,3.406,1025,3.406,1026,4.517,1027,4.517,1028,3.406,1872,3.63,3295,4.286,3613,4.857,3614,4.857,3615,6.443,3616,4.857,3617,4.857,3618,4.857,3619,4.857,3620,4.857,3621,4.857,3622,4.857,3623,4.857]],["title/injectables/UnitFormatter.html",[1741,2.533,3077,2.917]],["body/injectables/UnitFormatter.html",[3,0.122,4,0.098,5,0.086,8,0.462,12,0.224,14,0.741,18,0.273,19,0.009,20,1.352,26,0.122,75,0.488,77,0.067,84,1.142,113,0.742,122,2.282,126,0.7,127,2.528,144,1.709,145,0.006,146,0.007,147,0.006,178,1.032,192,0.788,198,0.807,213,1.125,214,1.59,215,0.837,216,2.299,222,2.463,270,0.506,271,0.571,278,0.515,361,2.592,385,2.595,451,1.047,480,1.953,510,4.947,511,3.723,537,1.856,876,3.097,932,7.175,947,3.715,954,2.119,975,5.759,978,5.121,979,2.818,980,3.758,981,3.905,995,5.759,1000,4.685,1001,5.388,1329,2.367,1665,4.19,1670,6.239,1677,6.239,1713,4.514,1741,4.068,1743,4.19,1860,4.204,1872,6.076,3077,5.388,3162,8.105,3624,7.175,3625,4.947,3626,8.689,3627,7.069,3628,5.606,3629,7.069,3630,5.606,3631,8.13,3632,7.069,3633,8.13,3634,8.13,3635,8.13,3636,7.069,3637,8.382,3638,5.606,3639,7.069,3640,4.514,3641,5.606,3642,5.606,3643,5.606,3644,5.606,3645,5.606]],["title/modules/VcdActionMenuModule.html",[2527,1.533,3646,3.289]],["body/modules/VcdActionMenuModule.html",[3,0.146,4,0.117,5,0.103,19,0.009,26,0.146,63,2.114,77,0.08,145,0.007,146,0.008,147,0.007,149,3.789,155,5.405,156,5.405,270,0.549,271,0.684,319,2.222,508,3.211,537,2.222,954,2.013,979,2.676,1254,1.872,1488,2.222,1784,3.864,2375,3.44,2376,3.321,2377,3.44,2378,3.44,2379,3.44,2380,3.44,2381,3.44,2527,2.339,2530,3.864,2531,3.879,2532,3.236,3200,3.709,3309,3.108,3310,3.108,3311,3.44,3312,4.293,3316,4.043,3319,4.194,3583,4.742,3586,4.742,3587,4.742,3646,6.74,3647,5.925,3648,5.925,3649,5.925,3650,6.714,3651,6.714]],["title/modules/VcdActivityReporterModule.html",[2527,1.533,3652,2.917]],["body/modules/VcdActivityReporterModule.html",[3,0.14,4,0.112,5,0.098,19,0.009,26,0.14,77,0.076,145,0.006,146,0.008,147,0.006,270,0.561,271,0.651,319,2.117,326,2.838,327,2.064,328,2.138,363,2.838,364,2.064,379,3.844,380,3.844,508,3.058,537,2.117,954,1.917,979,2.549,1254,1.783,1488,2.117,1784,3.68,2375,3.277,2376,3.163,2377,3.277,2378,3.277,2379,3.277,2380,3.277,2381,3.277,2527,2.228,2530,4.411,2531,3.8,2532,2.623,3200,3.533,3309,2.96,3310,2.96,3311,3.277,3312,4.206,3316,3.928,3319,4.075,3583,4.607,3586,4.607,3587,4.607,3652,6.123,3653,5.644,3654,5.644,3655,5.644,3656,5.644,3657,5.856,3658,5.856,3659,6.395,3660,5.729,3661,6.395,3662,5.644,3663,6.395,3664,5.644,3665,7.665]],["title/modules/VcdComponentsModule.html",[2527,1.533,3666,3.289]],["body/modules/VcdComponentsModule.html",[3,0.138,4,0.111,5,0.098,19,0.009,26,0.138,60,1.185,77,0.075,145,0.006,146,0.008,147,0.006,270,0.563,271,0.646,319,2.1,366,2.268,380,3.813,508,3.033,633,3.033,819,2.528,820,1.949,954,1.902,979,2.528,1488,2.1,1837,3.995,2375,3.25,2376,3.138,2377,3.25,2378,3.25,2379,3.25,2380,3.25,2381,3.25,2525,5.911,2527,2.21,2531,2.936,2532,2.601,2968,3.372,3309,2.936,3310,2.936,3311,3.25,3312,4.191,3316,3.908,3318,4.74,3319,4.055,3453,5.911,3577,6.254,3652,5.911,3657,5.911,3658,5.911,3662,5.598,3664,5.598,3666,6.859,3667,5.598,3668,5.598,3669,6.254,3670,5.911,3671,6.343,3672,5.598,3673,6.343,3674,6.343,3675,6.343,3676,6.343,3677,5.598,3678,5.598,3679,6.343]],["title/modules/VcdDataExporterModule.html",[2527,1.533,3669,3.086]],["body/modules/VcdDataExporterModule.html",[3,0.146,4,0.117,5,0.103,19,0.009,26,0.146,60,1.249,77,0.08,145,0.007,146,0.008,147,0.007,270,0.556,271,0.681,319,2.215,333,3.58,508,3.2,537,2.215,725,2.215,954,2.006,979,2.667,1254,1.866,1488,2.215,1744,3.85,1837,4.214,2036,5.905,2375,3.428,2376,3.31,2377,3.428,2378,3.428,2379,3.428,2380,3.428,2381,3.428,2527,2.331,2530,3.85,2531,3.873,2532,2.744,3200,3.696,3309,3.097,3310,3.097,3311,3.428,3312,4.287,3316,4.034,3318,5,3319,4.185,3583,4.733,3585,5.885,3586,4.733,3587,4.733,3669,6.319,3680,5.905,3681,5.905,3682,5.905,3683,6.691]],["title/modules/VcdDatagridModule.html",[2525,2.917,2527,1.533]],["body/modules/VcdDatagridModule.html",[3,0.125,4,0.1,5,0.088,19,0.009,26,0.125,72,0.836,75,0.313,77,0.068,145,0.006,146,0.007,147,0.006,270,0.574,271,0.583,284,0.834,319,1.897,330,2.703,335,2.409,337,3.16,339,2.161,341,2.998,342,2.161,343,3.336,344,1.453,345,2.998,368,2.097,369,2.4,380,3.444,508,2.74,537,1.897,633,2.74,725,1.897,761,1.945,788,5.056,819,2.284,820,1.76,824,3.36,954,1.718,979,2.284,1254,1.598,1331,3.675,1488,1.897,1644,3.905,2375,2.936,2376,2.834,2377,2.936,2378,2.936,2379,2.936,2380,2.936,2381,2.936,2525,6.192,2527,1.996,2530,4.124,2531,3.62,2532,2.939,2871,5.703,2872,4.75,3200,3.165,3308,5.025,3309,2.652,3310,2.652,3311,2.936,3312,4.007,3316,3.672,3318,4.282,3319,3.809,3453,5.703,3583,4.307,3584,5.77,3585,5.356,3586,4.307,3587,4.307,3652,5.703,3660,5.356,3670,5.703,3672,5.056,3677,5.056,3678,5.056,3684,5.056,3685,5.056,3686,5.056,3687,5.056,3688,4.613,3689,7.166,3690,5.056,3691,5.729,3692,5.729,3693,5.729,3694,5.729,3695,8.194,3696,5.729,3697,5.729,3698,5.729]],["title/classes/VcdDatagridWidgetObject.html",[77,0.052,784,3.289]],["body/classes/VcdDatagridWidgetObject.html",[3,0.107,4,0.086,5,0.075,8,0.493,12,0.196,13,0.473,14,0.819,18,0.316,19,0.009,25,1.887,26,0.107,34,0.754,35,1.402,47,2.043,57,1.305,59,0.811,66,1.492,71,1.887,72,1.061,75,0.503,77,0.058,80,1.725,107,0.698,124,2.263,126,0.509,129,1.094,134,1.853,142,2.202,145,0.005,146,0.008,147,0.005,148,0.564,153,1.993,166,1.39,167,1.588,178,0.947,188,2.822,192,0.912,198,0.765,200,1.546,201,3.324,213,1.172,214,1.756,215,0.924,216,2.98,245,0.895,270,0.452,278,0.53,284,0.5,321,2.118,335,1.305,367,1.907,378,1.472,391,3.171,396,0.961,411,2.073,425,1.814,503,1.047,526,3.583,547,4.41,548,3.863,549,1.534,550,2.989,551,4.11,552,2.817,553,3.863,554,4.087,555,4.087,556,3.863,557,4.087,558,4.087,559,4.087,563,2.609,564,3.253,565,2.348,566,1.667,567,2.609,568,1.546,569,2.609,570,2.428,571,2.609,572,2.609,573,3.394,574,4.8,575,3.253,576,2.515,577,3.449,578,1.899,579,3.449,580,2.515,581,4.478,582,3.825,583,3.724,584,2.599,585,2.609,586,2.86,587,4.39,588,3.253,589,2.609,590,3.253,591,2.202,592,2.979,593,2.91,594,3.324,595,2.609,596,3.253,597,2.822,598,2.428,599,2.609,600,3.253,601,2.609,602,2.609,603,3.253,604,1.755,605,2.662,606,2.609,607,2.609,608,3.253,609,2.609,610,2.609,611,3.253,612,2.609,613,3.324,614,2.515,615,2.609,616,2.348,617,2.428,618,2.609,619,1.546,620,3.449,621,2.609,622,3.253,623,1.337,624,2.609,733,0.874,784,4.849,786,3.952,791,5.096,806,1.993,862,2.447,905,2.359,1250,3.863,1270,2.661,3699,6.824,3700,4.332,3701,7.268,3702,4.909,3703,4.909,3704,4.909,3705,4.909,3706,4.909,3707,4.909,3708,4.909,3709,6.488,3710,4.909,3711,4.909,3712,4.909]],["title/modules/VcdErrorBannerModule.html",[2527,1.533,3657,2.917]],["body/modules/VcdErrorBannerModule.html",[3,0.146,4,0.117,5,0.103,19,0.009,26,0.146,77,0.08,145,0.007,146,0.008,147,0.007,270,0.549,271,0.683,319,2.221,346,3.807,347,1.549,508,3.208,537,2.221,954,2.011,979,2.674,1254,1.871,1488,2.221,1784,3.86,2339,5.401,2375,3.437,2376,3.318,2377,3.437,2378,3.437,2379,3.437,2380,3.437,2381,3.437,2527,2.337,2530,3.86,2531,3.877,2532,2.751,3200,3.706,3309,3.105,3310,3.105,3311,3.437,3312,4.292,3316,4.041,3319,4.192,3583,4.74,3586,4.74,3587,4.74,3657,5.976,3660,5.893,3713,5.92,3714,5.92,3715,5.92,3716,6.708,3717,6.708]],["title/modules/VcdFormModule.html",[2527,1.533,3670,2.917]],["body/modules/VcdFormModule.html",[3,0.134,4,0.107,5,0.094,19,0.009,26,0.134,77,0.073,126,0.48,145,0.006,146,0.007,147,0.006,270,0.564,271,0.624,284,0.624,319,2.027,350,3.528,351,2.577,353,3.528,355,3.433,360,3.342,361,2.083,371,3.433,508,2.929,537,2.027,725,2.027,954,1.836,979,2.441,1254,1.708,1488,2.027,1784,3.524,2244,4.294,2375,3.138,2376,3.03,2377,3.138,2378,3.138,2379,3.138,2380,3.138,2381,3.138,2527,2.134,2530,3.524,2531,3.981,2532,3.304,2691,4.577,2730,4.577,2822,4.577,3067,4.294,3077,5.797,3078,5.405,3079,5.405,3200,3.384,3264,6.59,3309,2.835,3310,2.835,3311,3.138,3312,4.128,3316,3.826,3319,3.969,3583,4.489,3584,6.012,3585,5.581,3586,4.489,3587,4.489,3670,6.175,3718,5.405,3719,5.405,3720,6.124,3721,5.405,3722,4.931,3723,6.124]],["title/modules/VcdLoadingIndicatorModule.html",[2527,1.533,3658,2.917]],["body/modules/VcdLoadingIndicatorModule.html",[3,0.146,4,0.117,5,0.103,19,0.009,26,0.146,77,0.08,145,0.007,146,0.008,147,0.007,270,0.549,271,0.683,319,2.221,357,3.807,358,2.112,508,3.208,537,2.221,954,2.011,979,2.674,1254,1.871,1488,2.221,1784,3.86,2375,3.437,2376,3.318,2377,3.437,2378,3.437,2379,3.437,2380,3.437,2381,3.437,2527,2.337,2530,3.86,2531,3.877,2532,2.751,3011,4.703,3200,3.706,3309,3.105,3310,3.105,3311,3.437,3312,4.292,3316,4.041,3319,4.192,3583,4.74,3586,4.74,3587,4.74,3658,5.976,3660,5.893,3724,5.92,3725,5.92,3726,5.92,3727,6.708,3728,6.708]],["title/classes/WidgetFinder.html",[77,0.052,2513,2.645]],["body/classes/WidgetFinder.html",[0,0.095,3,0.079,4,0.063,5,0.056,8,0.313,12,0.145,13,0.383,14,0.649,18,0.311,19,0.009,20,1.004,25,0.94,26,0.148,34,0.556,35,1.034,41,2.176,50,0.926,52,0.502,57,2.258,59,0.788,66,1.392,71,1.87,72,0.902,75,0.476,76,1.261,77,0.073,80,2.151,84,1.157,86,1.853,90,1.899,97,0.912,107,0.515,111,1.676,112,0.897,113,0.551,124,1.984,126,0.284,134,2.311,142,1.623,144,0.761,145,0.004,146,0.007,147,0.004,148,0.576,153,2.083,154,2.093,164,1.403,166,1.297,172,1.211,178,0.902,192,0.789,194,1.059,198,0.537,200,1.14,201,2.691,213,0.946,214,1.479,215,0.733,216,1.484,240,1.528,241,0.761,245,1.127,246,1.294,270,0.385,271,0.369,278,0.599,284,0.857,314,1.928,321,2.072,347,0.836,367,1.789,378,1.085,391,2.781,392,2.863,396,0.709,411,2.61,425,1.694,447,1.443,451,1.345,457,1.654,473,1.924,502,1.034,503,0.584,547,2.598,548,2.792,549,2.008,550,2.72,551,2.792,552,2.791,553,1.924,556,1.924,563,1.924,565,3.243,566,2.099,567,1.924,568,1.14,569,3.604,570,3.058,571,1.924,572,1.924,573,3.334,574,4.611,576,1.855,577,2.792,578,1.537,579,2.792,580,2.036,581,4.3,582,3.354,583,3.167,584,2.21,585,1.924,586,2.631,587,3.992,589,1.924,591,3.475,592,2.863,593,2.356,594,4.351,595,1.924,597,2.285,598,1.791,599,1.924,602,1.924,604,2.575,605,1.198,606,1.924,607,1.924,609,1.924,610,1.924,612,1.924,613,2.691,614,1.855,615,1.924,616,1.731,617,1.791,618,1.924,619,1.14,620,2.792,621,1.924,623,0.986,624,1.924,642,2,649,1.329,708,2.083,716,1.169,733,0.644,753,1.484,860,2.036,871,0.986,877,2.135,880,1.791,887,1.878,889,2.245,897,1.575,913,2.154,917,1.484,920,1.575,926,1.575,1031,3.557,1061,2.093,1066,4.076,1077,2.699,1258,1.528,1294,1.676,1302,1.676,1306,1.623,1326,2.87,1395,1.739,1457,3.475,1496,1.676,1541,3.368,1689,2,1761,3.058,1814,2.28,1868,3.308,2007,1.924,2032,3.481,2091,1.791,2124,1.676,2512,3.308,2513,4.076,2522,2.399,2523,2.176,2540,3.715,2554,4.862,2555,4.88,2556,2.176,2557,4.334,2558,4.535,2559,4.334,2560,2.538,2561,5.349,2562,4.271,2563,2.399,2564,2.176,2565,2.538,2566,2.538,2567,2.538,2568,5.565,2569,2.538,2570,2.538,2571,3.683,2572,2.538,2573,2.538,2574,2.538,2575,4.334,2576,2.538,2577,4.334,2578,2.399,2579,2.538,2580,2.538,2581,4.334,2582,2.538,2583,2.399,2584,2.538,2585,2.399,2586,2.538,2587,2.538,2588,2.538,2589,2.538,2590,2.538,2591,3.683,2592,2.538,2593,2.399,2594,2.538,2595,2.538,2596,2.538,2597,2.538,2598,2.538,2599,2.399,2600,2.538,2601,2.538,2602,2.538,2603,2.399,2604,2.538,2605,2.538,2606,2.399,2607,2.538,2608,2.538,2609,3.157,2610,3.683,2611,3.683,2612,2.538,2613,2.538,2614,4.334,2615,3.683,2616,4.334,2617,2.538,2618,4.334,2619,4.334,2620,2.538,2621,2.538,2622,2.538,2623,2.538,2624,2.538,2625,2.538,2626,2.538,2627,2.399,2628,2.538,2629,2.538,2630,2.538,2631,2.538,2632,2.538,2633,2.538,2634,2.538,2635,3.683,2636,2.083,2637,2.399,2638,2.538,2639,2.538,2640,2.538,2641,2.538,2642,4.271,2643,2.176,2644,2.538,2645,2.538,2646,2.538,2647,2.538,2648,2.538,2649,4.755,2650,3.683,2651,3.683,2652,3.683,2653,3.683,2654,4.334,2655,3.683,2656,3.683,2657,3.683,2658,2.538,2659,2.538,2660,2.538,2661,2.28,2662,3.683,2663,4.334,2664,5.266,2665,2.538,2666,4.097,2667,2.538,2668,2.538,2669,2.538,2670,2.538,2671,2.538,2672,2.538,2673,2.538,2674,2.538,2675,2.538,2676,2.538,2677,2.538,2678,2.538,2679,4.334,2680,2.538,2681,2.538,2682,2.538,2683,2.538,2684,2.538,2685,2.538,2686,2.538,2687,2.538,2688,2.28,3729,5.252,3730,3.62,3731,3.62,3732,3.62,3733,3.62,3734,3.62,3735,3.62]],["title/classes/WidgetObject.html",[77,0.052,547,2.177]],["body/classes/WidgetObject.html",[0,0.09,3,0.068,4,0.054,5,0.048,8,0.44,12,0.124,13,0.341,14,0.758,18,0.309,19,0.009,20,0.593,25,0.805,26,0.137,34,0.719,35,1.337,41,2.814,50,0.889,52,0.429,57,2.167,59,0.815,66,1.513,71,1.97,72,1.036,75,0.495,76,1.08,77,0.067,80,2.138,84,1.133,86,1.403,90,1.931,97,0.813,107,0.666,111,2.167,112,1.16,113,0.491,124,2.22,126,0.442,129,0.943,134,2.297,142,2.53,144,0.651,145,0.003,146,0.007,147,0.003,148,0.608,153,2.264,154,2.249,164,1.201,166,1.409,172,0.607,178,0.917,192,0.839,194,0.907,198,0.716,200,1.474,201,3.221,213,1.083,214,1.595,215,0.855,216,2.314,240,1.308,241,0.651,245,1.029,246,1.674,270,0.351,271,0.316,278,0.586,284,0.83,314,1.719,321,2.127,347,0.716,367,1.903,378,0.929,391,3.111,392,2.382,396,0.917,411,2.382,425,1.662,447,1.235,451,1.325,457,1.776,473,2.488,502,1.337,503,0.5,547,2.791,548,2.488,549,1.742,550,2.931,551,3.772,552,2.616,553,3.341,554,2.948,555,2.948,556,3.341,557,2.948,558,2.948,559,2.948,563,2.488,565,3.524,566,2.502,567,2.999,568,1.776,569,3.772,570,3.11,571,2.999,572,2.488,573,3.394,574,4.773,576,2.398,577,3.341,578,1.839,579,3.341,580,2.437,581,4.498,582,3.753,583,3.636,584,2.538,585,2.488,586,2.827,587,4.331,589,2.488,591,3.027,592,2.926,593,2.819,594,4.365,595,2.488,597,2.734,598,2.316,599,2.488,601,1.647,602,2.488,604,2.538,605,1.55,606,2.488,607,2.488,609,2.488,610,2.488,612,2.488,613,3.221,614,2.398,615,2.488,616,2.239,617,2.316,618,2.488,619,1.474,620,3.341,621,2.488,623,1.275,624,2.488,642,2.586,649,1.138,708,1.783,716,1,733,0.552,753,1.271,871,0.844,877,1.979,880,2.316,887,1.108,889,2.081,897,1.348,913,2.314,917,1.271,920,1.348,926,1.348,1031,2.694,1061,1.235,1066,3.391,1077,2.351,1258,1.976,1294,2.167,1302,2.167,1306,1.39,1326,2.829,1395,1.55,1457,3.027,1496,1.434,1541,3.183,1689,2.586,1761,3.511,1814,1.952,1868,1.952,2007,2.488,2032,3.102,2091,2.316,2124,1.434,2512,2.948,2513,3.391,2522,2.054,2523,1.863,2540,4.266,2554,4.057,2555,5.132,2556,1.863,2557,3.956,2558,4.251,2559,3.956,2560,2.173,2561,4.985,2562,4.251,2563,2.054,2564,1.863,2565,3.282,2566,3.282,2567,3.282,2568,5.167,2569,3.282,2570,3.282,2571,4.408,2572,3.282,2573,3.282,2574,3.282,2575,4.408,2576,3.282,2577,4.732,2578,3.102,2579,3.282,2580,3.282,2581,4.976,2582,3.282,2583,3.102,2584,3.282,2585,3.102,2586,3.282,2587,3.282,2588,3.282,2589,3.282,2590,3.282,2591,4.408,2592,3.282,2593,3.102,2594,3.282,2595,3.282,2596,3.282,2597,3.282,2598,3.282,2599,3.102,2600,3.282,2601,3.282,2602,3.282,2603,3.102,2604,2.173,2605,2.173,2606,2.054,2607,2.173,2608,2.173,2609,2.814,2610,3.282,2611,3.282,2612,2.173,2613,2.173,2614,3.956,2615,3.282,2616,3.956,2617,2.173,2618,3.956,2619,3.956,2620,2.173,2621,2.173,2622,2.173,2623,2.173,2624,2.173,2625,2.173,2626,2.173,2627,2.054,2628,2.173,2629,2.173,2630,2.173,2631,2.173,2632,2.173,2633,2.173,2634,2.173,2635,3.282,2636,1.783,2637,2.054,2638,2.173,2639,2.173,2640,2.173,2641,2.173,2642,3.553,2643,1.863,2644,2.173,2645,2.173,2646,2.173,2647,2.173,2648,2.173,2649,3.282,2650,2.173,2651,2.173,2652,2.173,2653,2.173,2654,2.173,2655,2.173,2656,2.173,2657,2.173,2658,2.173,2659,2.173,2660,2.173,2661,1.952,2662,2.173,2663,2.173,2664,4.408,2665,2.173,2666,3.739,2667,2.173,2668,2.173,2669,2.173,2670,2.173,2671,2.173,2672,2.173,2673,2.173,2674,2.173,2675,2.173,2676,2.173,2677,2.173,2678,2.173,2679,3.956,2680,2.173,2681,2.173,2682,2.173,2683,2.173,2684,2.173,2685,2.173,2686,2.173,2687,2.173,2688,1.952,3477,2.735,3736,3.099,3737,3.099,3738,3.099,3739,3.099,3740,3.099,3741,3.099,3742,3.099,3743,3.099,3744,3.099,3745,3.099,3746,3.099]],["title/contributing.html",[2076,2.109,3747,3.234,3748,3.234]],["body/contributing.html",[4,0.102,19,0.008,20,1.111,47,1.83,72,0.848,86,2.167,109,2.252,115,4.678,124,2.115,145,0.006,146,0.007,147,0.006,167,1.616,221,2.527,361,1.62,386,2.541,393,3.851,436,3.051,437,4.342,457,2.478,578,2.527,582,3.576,593,2.606,649,2.655,703,2.316,713,1.406,731,3.66,733,1.537,797,2.779,856,1.83,877,1.83,886,1.83,887,2.078,891,3.088,897,2.527,913,2.383,917,3.228,979,2.316,980,3.088,1051,3.21,1128,2.69,1180,4.342,1184,5.403,1208,3.344,1231,3.851,1258,2.453,1364,3.088,1370,3.228,1555,3.088,1713,4.678,1761,3.576,1839,4.678,1860,3.457,1865,4.678,1884,5.518,1923,4.342,1932,4.678,2007,3.088,2123,4.791,2124,3.346,2308,4.342,2334,4.678,2636,4.16,2858,5.128,2869,4.678,3060,5.821,3336,5.128,3367,5.128,3640,6.337,3748,5.128,3749,5.128,3750,5.81,3751,5.81,3752,7.229,3753,5.81,3754,5.81,3755,5.81,3756,8.235,3757,7.229,3758,5.81,3759,5.81,3760,5.81,3761,5.81,3762,7.229,3763,7.229,3764,5.81,3765,5.81,3766,5.81,3767,5.81,3768,5.81,3769,5.81,3770,6.38,3771,7.268,3772,8.471,3773,5.81,3774,8.011,3775,7.229,3776,7.476,3777,5.81,3778,5.81,3779,7.728,3780,5.81,3781,5.81,3782,5.81,3783,5.81,3784,5.81,3785,5.81,3786,5.81,3787,5.81,3788,7.87,3789,5.81,3790,5.81,3791,7.87,3792,5.128,3793,5.81,3794,5.81,3795,5.81,3796,5.81,3797,5.81,3798,8.235,3799,5.81,3800,6.38,3801,5.81,3802,7.229,3803,7.229,3804,5.81,3805,5.81,3806,7.229,3807,7.229,3808,5.81,3809,8.042,3810,5.81,3811,5.81,3812,7.229,3813,6.38,3814,7.87,3815,7.87,3816,5.81,3817,6.38,3818,5.81,3819,5.128,3820,7.229,3821,5.128,3822,7.229,3823,6.38,3824,5.81,3825,5.81,3826,7.229,3827,5.81,3828,5.81,3829,5.81,3830,5.81,3831,5.81,3832,5.81,3833,6.38,3834,5.81,3835,7.229,3836,7.229,3837,5.81,3838,5.81,3839,5.81,3840,5.81,3841,5.81,3842,6.38,3843,5.81,3844,5.81]],["title/coverage.html",[2636,3.469]],["body/coverage.html",[0,0.123,1,2.515,5,0.055,6,3.658,7,3.658,18,0.127,19,0.009,52,1.232,58,2.142,69,2.515,72,1.047,73,1.187,75,0.335,77,0.106,145,0.004,146,0.005,147,0.004,148,0.617,149,1.471,155,2.888,156,2.888,157,3.165,241,1.885,322,2.088,326,1.102,328,1.883,330,1.075,333,1.39,335,0.954,337,1.317,339,2.824,341,1.25,342,2.319,343,1.39,344,1.56,345,1.25,346,1.471,349,1.514,350,1.39,351,2.3,353,1.39,355,1.353,357,1.471,360,1.317,361,2.251,362,1.514,363,1.102,365,1.471,367,0.828,368,1.049,369,1,371,1.353,374,1.317,377,2.156,379,4.499,380,4.058,381,4.595,394,2.515,422,2.515,431,1.66,432,3.165,499,4.2,500,4.2,544,2.888,545,4.2,546,4.2,547,1.774,639,2.259,640,4.2,641,4.2,654,2.68,726,3.397,728,2.156,731,2.259,733,0.638,750,5.03,751,4.595,752,1.471,759,1.024,761,1.218,762,2.259,765,1.774,769,2.68,770,1.187,776,2.68,780,2.888,781,4.2,784,2.68,791,2.515,803,4.29,804,4.29,818,1.838,820,2.48,822,1.317,823,1.25,827,1.187,836,1.39,840,1.981,842,1.43,846,1.43,852,1.43,928,2.888,929,4.755,930,2.259,1005,3.458,1006,3.83,1029,3.165,1030,3.165,1038,4.459,1039,4.866,1062,2.68,1235,1.838,1236,4.285,1257,1.187,1259,1.838,1261,1.838,1262,1.838,1263,4.109,1268,1.838,1272,1.838,1275,1.838,1284,1.774,1287,1.838,1295,1.838,1299,1.838,1314,1.838,1317,1.838,1319,1.838,1327,1.838,1331,1.609,1333,1.838,1488,1.187,1644,1.66,1665,2.68,1666,3.165,1667,3.165,1679,3.899,1680,3.899,1691,3.165,1692,3.165,1741,3.539,1742,2.515,1744,4.718,1745,5.594,1746,5.594,1749,2.888,1781,3.165,1798,2.888,1836,2.68,1837,4.253,1838,4.595,1848,2.68,1854,1.715,2005,2.888,2006,3.165,2046,3.728,2047,4.755,2104,2.515,2134,3.985,2135,1.774,2149,2.377,2163,2.377,2170,1.906,2172,1.715,2175,2.377,2205,2.377,2224,2.515,2274,2.68,2282,2.515,2293,2.68,2309,2.68,2326,2.68,2338,2.68,2339,2.888,2340,3.165,2383,3.899,2384,3.899,2460,2.888,2505,5.436,2506,5.436,2513,2.156,2528,2.888,2531,2.415,2545,2.888,2551,2.888,2554,2.156,2555,4.715,2556,4.644,2636,2.064,2642,2.259,2688,2.259,2690,4.755,2691,2.68,2692,2.888,2730,4.595,2731,5.249,2781,7.968,2822,2.68,2823,3.165,2840,2.68,2841,3.165,2870,3.658,2871,2.377,2872,2.377,2873,3.165,2874,3.165,2882,2.888,2908,2.68,2909,4.2,2910,4.2,2954,3.165,2955,3.165,2966,2.515,2967,4.373,2968,4.208,2969,4.734,2971,2.377,2972,2.259,2979,2.515,2981,2.064,3011,2.515,3012,2.68,3066,5.046,3067,4.734,3077,2.377,3088,2.888,3177,4.2,3178,4.2,3181,2.888,3188,2.377,3189,5.046,3190,5.046,3202,2.888,3203,2.888,3219,2.888,3220,3.165,3263,2.68,3317,2.888,3321,2.888,3322,4.604,3323,2.515,3434,3.165,3435,3.165,3458,2.68,3459,4.2,3460,4.2,3558,4.2,3566,2.888,3589,3.165,3595,2.888,3624,3.165,3625,3.165,3688,5.436,3699,3.165,3700,3.165,3722,2.888,3845,3.586,3846,3.586,3847,3.586,3848,3.586,3849,8.548,3850,3.586,3851,3.586,3852,6.149,3853,3.586,3854,3.586,3855,3.586,3856,5.217,3857,3.586,3858,3.586,3859,8.199,3860,3.586,3861,9.062,3862,3.165,3863,8.892,3864,6.149,3865,3.586,3866,7.486,3867,6.149,3868,3.165,3869,3.165,3870,3.165,3871,6.149,3872,3.586,3873,3.586,3874,3.586,3875,3.586,3876,5.217,3877,8.071,3878,8.071,3879,6.149,3880,3.586,3881,3.586,3882,3.586,3883,3.586,3884,3.586,3885,5.217,3886,3.586,3887,3.586,3888,3.586,3889,3.586,3890,3.586,3891,3.586,3892,5.217,3893,3.165,3894,5.217,3895,3.586,3896,3.586,3897,3.586,3898,3.165,3899,3.165,3900,3.586,3901,3.586,3902,3.586,3903,3.586,3904,3.586,3905,3.586,3906,3.586,3907,3.586,3908,3.586,3909,3.165,3910,3.165,3911,3.165,3912,3.165,3913,3.586,3914,3.586,3915,3.586,3916,3.586,3917,3.586,3918,3.586,3919,3.586,3920,3.586,3921,3.586,3922,6.606,3923,3.586,3924,3.586,3925,3.165,3926,3.165,3927,3.165,3928,3.165,3929,3.165,3930,3.586,3931,3.586,3932,3.586,3933,3.586,3934,3.586,3935,3.586,3936,3.165,3937,5.217,3938,5.217,3939,3.586,3940,3.586,3941,3.586,3942,3.586,3943,3.586,3944,3.586]],["title/dependencies.html",[3310,2.453,3945,3.665]],["body/dependencies.html",[13,0.469,19,0.009,48,5.772,145,0.006,146,0.008,147,0.006,271,0.784,320,1.452,725,2.548,1254,2.146,1256,2.887,1694,6.792,2563,5.653,2564,5.127,2636,3.704,3200,4.252,3310,3.562,3349,6.196,3350,6.196,3690,6.792,3946,7.696,3947,9.018,3948,7.696,3949,8.529,3950,6.437,3951,7.696,3952,7.696,3953,6.437,3954,6.437,3955,5.681,3956,6.437,3957,6.437,3958,6.437,3959,6.437,3960,6.437,3961,6.437,3962,6.437,3963,6.437,3964,6.437,3965,5.681,3966,5.681,3967,6.437,3968,6.437,3969,6.437,3970,6.437,3971,6.437,3972,6.437,3973,5.681,3974,6.437,3975,6.437,3976,6.437,3977,6.437,3978,6.437,3979,6.437,3980,6.437,3981,6.437,3982,6.437,3983,6.437,3984,6.437,3985,6.437,3986,6.437,3987,6.437,3988,6.437,3989,6.437,3990,6.437,3991,6.437,3992,6.437,3993,6.437,3994,5.681,3995,9.018]],["title/miscellaneous/enumerations.html",[3996,2.203,3997,4.677]],["body/miscellaneous/enumerations.html",[6,4.071,7,5.773,12,0.232,15,2.968,18,0.205,19,0.009,20,1.11,24,5.4,25,1.877,27,2.166,28,5.4,30,1.79,34,1.208,37,5.818,42,2.777,44,5.818,49,4.675,63,2.275,72,0.847,73,1.922,75,0.394,86,2.166,92,2.604,100,2.454,117,2.076,123,2.726,127,2.584,131,2.604,137,2.726,138,2.023,139,3.702,140,2.726,141,3.841,142,2.604,143,3.841,144,1.221,145,0.006,146,0.007,147,0.006,198,0.817,234,3.575,241,1.221,252,3.581,327,1.874,328,1.619,342,2.726,364,1.874,593,2.604,803,3.086,804,4.376,806,2.22,810,2.963,812,3.341,820,2.417,828,2.963,829,3.208,831,4.158,832,3.702,833,2.653,834,2.741,843,2.963,844,2.667,907,4.031,936,3.345,954,1.741,1038,3.208,1039,4.955,1043,3.241,1047,4.789,1048,4.339,1049,3.702,1050,4.339,1051,3.992,1052,4.339,1053,4.343,1054,4.339,1055,5.88,1056,4.675,1057,5.88,1058,4.675,1059,4.675,1236,2.872,1277,3.841,1280,3.143,1282,3.763,1291,3.086,1292,3.841,1744,3.341,1837,3.657,1838,5.4,1861,5.818,1862,5.818,1863,5.818,1864,5.818,1903,3.992,2046,3.051,2134,3.811,2245,5.818,2294,4.339,2314,5.067,2321,4.071,2322,4.339,2690,3.848,2691,4.339,2692,5.818,2703,6.377,2725,5.124,3011,4.071,3012,5.4,3033,6.377,3996,3.49,3997,5.124,3998,6.943,3999,6.377,4000,5.124,4001,6.329,4002,5.124,4003,5.4,4004,5.806,4005,5.806]],["title/miscellaneous/functions.html",[2537,3.96,3996,2.203]],["body/miscellaneous/functions.html",[8,0.486,9,1.205,12,0.173,14,0.866,17,3.029,18,0.316,19,0.009,20,1.302,35,1.7,36,0.908,40,1.395,47,2.144,52,1.102,58,1.505,59,0.77,60,0.807,72,1.161,75,0.474,82,1.264,86,1.784,89,1.586,94,1.121,97,0.75,107,1.095,110,2.755,113,0.77,126,0.534,129,0.939,138,2.682,140,1.629,142,1.938,144,1.251,145,0.004,146,0.006,147,0.004,148,0.515,150,1.312,178,0.63,194,1.993,195,1.874,196,2.081,198,0.79,213,1.197,214,1.857,215,0.977,216,3.498,225,1.722,234,2.137,240,2.513,245,1.451,248,1.395,284,0.606,320,0.974,321,1.021,330,1.784,331,1.824,339,2.245,341,1.505,342,2.568,344,2.068,345,1.505,349,2.513,361,2.046,396,1.437,408,1.583,425,1.343,451,1.112,454,2.915,481,3.478,565,2.066,597,1.879,601,3.62,623,1.176,643,2.944,650,3.288,681,1.43,703,2.372,731,2.721,750,4.173,751,4.448,752,2.441,753,1.772,754,1.999,755,2.372,756,1.742,759,1.7,761,2.312,765,2.137,769,4.448,770,2.429,776,4.448,777,3.478,781,4.792,789,3.478,790,3.029,791,3.029,792,1.467,797,2.066,803,2.296,804,3.164,820,2.254,823,3.001,825,2.291,827,1.97,834,2.372,855,2.213,856,1.36,860,2.845,866,1.586,871,1.176,877,1.36,883,2.387,911,3.257,912,2.755,913,2.441,914,2.486,915,1.772,916,3.05,917,2.441,918,2.513,919,1.772,920,2.589,921,2.944,922,3.05,923,2.944,924,3.05,925,3.05,926,2.589,927,2.486,954,1.295,1038,2.387,1039,4.622,1061,2.372,1077,2.074,1085,5.484,1172,3.478,1173,5.908,1176,3.478,1179,3.478,1180,4.448,1208,2.486,1247,1.545,1257,1.43,1280,1.879,1321,2.694,1328,1.675,1457,1.938,1744,2.486,1745,3.228,1746,5.752,1749,4.792,1751,5.484,1754,5.484,1758,6.792,1759,3.812,1760,3.812,1761,2.944,1762,6.476,1772,3.812,1776,3.812,1799,3.228,1800,3.812,1803,3.812,1804,3.812,1808,3.812,1809,6.476,1810,5.253,1811,3.812,1812,3.812,1813,3.812,1814,2.721,1815,3.478,1816,4.792,1817,3.812,1820,2.863,1831,3.812,1832,3.812,1833,3.812,1834,3.812,1860,2.066,2007,3.901,2046,3.25,2047,3.945,2124,2.755,2128,3.228,2129,3.228,2130,2.863,2131,2.863,2132,3.228,2133,3.228,2134,3.844,2135,2.944,2205,3.945,2216,4.448,2274,4.448,2297,4.792,2308,3.228,2309,4.448,2314,4.173,2324,3.228,2338,4.448,2505,3.478,2506,5.908,2512,2.721,2516,5.253,2527,2.074,2528,5.483,2536,3.812,2537,4.448,2539,3.812,2540,2.597,2541,3.812,2542,3.812,2543,3.812,2544,3.812,2545,5.483,2546,3.812,2551,4.792,2554,2.597,2555,2.721,2556,3.578,2666,2.863,2690,2.863,2730,3.228,2731,4.775,2788,3.812,2805,3.812,2806,3.812,2857,3.478,3189,3.228,3190,4.448,3210,3.812,3217,3.812,3218,3.812,3862,5.253,3868,5.253,3869,5.253,3870,5.253,3893,5.253,3898,5.253,3899,5.253,3909,5.253,3910,5.253,3911,5.253,3936,5.253,3996,2.597,4000,5.253,4001,5.946,4003,5.089,4006,5.952,4007,5.483,4008,6.476,4009,4.32,4010,3.812,4011,4.32,4012,4.32,4013,4.32,4014,4.32,4015,4.32,4016,4.32,4017,4.32,4018,4.32,4019,4.32]],["title/index.html",[12,0.146,2076,2.109,3747,3.234]],["body/index.html",[4,0.122,5,0.107,19,0.007,47,2.192,83,2.009,109,2.968,116,1.526,126,0.546,145,0.005,146,0.007,147,0.005,148,0.584,150,1.904,163,5.369,167,1.572,215,0.753,237,7.112,361,1.942,388,5.722,393,5.075,419,3.837,436,3.424,457,2.411,505,4.385,537,1.812,578,2.358,593,2.455,678,3.837,683,2.38,716,2.472,733,0.974,792,1.858,854,3.149,856,1.723,886,2.192,892,2.181,896,2.121,921,3.444,979,2.181,999,2.244,1063,4.09,1083,4.09,1128,3.544,1208,4.638,1231,3.627,1301,2.617,1321,2.009,1354,3.567,1370,2.244,1445,2.804,1557,2.909,1590,2.533,1761,3.788,1858,4.406,1884,4.882,2123,5.637,2124,3.73,2130,4.614,2131,5.341,2275,6.7,2321,5.651,2376,2.707,2593,3.627,2599,3.627,2603,3.627,2772,6.757,2851,7.794,2934,4.406,3309,2.533,3310,2.533,3337,6.144,3343,4.83,3349,4.406,3350,4.406,3369,4.83,3396,6.757,3409,4.83,3424,4.83,3431,4.83,3640,5.605,3749,6.144,3770,6.144,3771,6.144,3774,4.83,3776,7.343,3779,6.144,3792,7.112,3800,4.83,3809,7.343,3813,4.83,3817,6.757,3819,6.144,3821,4.83,3823,4.83,3833,4.83,3842,4.83,3955,4.83,3965,7.506,3966,7.343,3973,4.83,3994,4.83,4020,8.506,4021,8.506,4022,7.657,4023,5.472,4024,5.472,4025,5.472,4026,5.472,4027,5.472,4028,6.962,4029,5.472,4030,6.962,4031,6.962,4032,8.059,4033,8.321,4034,5.472,4035,5.472,4036,5.472,4037,5.472,4038,8.642,4039,5.472,4040,5.472,4041,5.472,4042,5.472,4043,6.962,4044,8.059,4045,5.472,4046,5.472,4047,5.472,4048,5.472,4049,5.472,4050,5.472,4051,5.472,4052,5.472,4053,7.657,4054,8.059,4055,5.472,4056,5.472,4057,5.472,4058,5.472,4059,5.472,4060,5.472,4061,5.472,4062,5.472,4063,5.472,4064,6.962,4065,5.472,4066,5.472,4067,5.472,4068,5.472,4069,5.472,4070,5.472,4071,5.472,4072,8.506,4073,5.472,4074,5.472,4075,7.657,4076,6.962,4077,6.962,4078,8.059,4079,6.962,4080,6.962,4081,6.962,4082,6.962,4083,6.962,4084,6.962,4085,6.962,4086,8.059,4087,5.472,4088,5.472,4089,5.472,4090,5.472,4091,6.962,4092,8.059,4093,6.962,4094,5.472,4095,5.472,4096,5.472,4097,5.472,4098,5.472,4099,5.472,4100,5.472,4101,5.472]],["title/modules.html",[3309,2.791]],["body/modules.html",[19,0.008,145,0.007,146,0.008,147,0.007,878,3.905,2525,4.608,2564,5.56,3308,4.875,3309,3.218,3453,4.608,3577,4.875,3646,5.196,3652,4.608,3657,4.608,3658,4.608,3666,5.196,3669,4.875,3670,4.608,4102,9.25,4103,9.25]],["title/overview.html",[4104,5.32]],["body/overview.html",[2,1.039,19,0.009,48,4.786,145,0.005,146,0.007,147,0.005,149,3.519,150,1.169,319,1.756,326,2.636,330,2.573,333,3.327,335,2.282,337,2.771,341,2.629,343,2.925,345,2.629,346,3.519,350,3.404,353,3.404,355,3.313,357,3.519,360,3.225,363,2.636,365,3.519,368,1.552,369,2.104,371,3.313,374,3.151,378,1.591,508,2.537,954,1.591,979,2.115,1743,3.965,2525,6.175,2527,1.848,2531,2.456,2532,2.176,2871,5.001,2872,3.516,2981,4.343,3077,5.001,3188,5.001,3308,6.158,3309,2.456,3310,2.456,3311,2.718,3312,2.718,3313,4.682,3314,4.682,3315,4.682,3316,3.497,3453,5.869,3454,4.682,3455,4.682,3456,4.682,3577,6.251,3578,4.682,3579,4.682,3580,4.682,3581,4.682,3646,6.16,3647,4.682,3648,4.682,3649,4.682,3652,6.054,3653,4.682,3654,4.682,3655,4.682,3656,4.682,3657,5.869,3658,5.869,3666,6.617,3667,4.682,3668,4.682,3669,6.158,3670,6.135,3680,4.682,3681,4.682,3682,4.682,3684,4.682,3685,4.682,3686,4.682,3687,4.682,3713,4.682,3714,4.682,3715,4.682,3718,4.682,3719,4.682,3721,4.682,3724,4.682,3725,4.682,3726,4.682,4104,4.682,4105,5.305,4106,5.305,4107,5.305,4108,5.305]],["title/miscellaneous/typealiases.html",[3996,2.203,4109,5.299]],["body/miscellaneous/typealiases.html",[6,4.699,7,5.527,12,0.268,18,0.315,19,0.009,51,5.009,52,1.16,53,6.346,58,2.917,75,0.43,94,0.905,111,3.102,113,0.703,126,0.656,145,0.008,146,0.008,147,0.007,198,0.582,342,2.973,366,2.397,367,1.934,513,4.004,537,2.219,770,2.219,820,2.422,826,2.746,912,3.102,1038,3.703,1039,4.964,1169,6.346,1255,2.915,1320,3.315,1679,5.009,1680,5.89,2046,2.83,2134,3.649,2224,4.699,2226,6.346,2383,5.009,2384,5.89,2437,6.956,2585,4.442,2967,3.703,2968,3.562,3011,4.699,3012,5.89,3026,6.956,3323,4.699,3324,5.89,3595,6.346,3996,4.028,3998,5.915,4001,5.009,4002,5.915,4003,5.009,4007,5.396,4110,6.702,4111,6.702,4112,6.702,4113,5.915,4114,6.702,4115,6.702,4116,6.702]],["title/miscellaneous/variables.html",[3996,2.203,4117,4.677]],["body/miscellaneous/variables.html",[5,0.06,12,0.157,17,2.752,18,0.318,19,0.009,30,1.602,38,1.942,50,0.45,59,0.851,71,1.446,72,0.573,75,0.45,78,1.61,82,1.149,84,0.732,86,1.669,99,1.669,100,1.89,101,3.16,106,1.333,107,0.558,111,2.577,113,0.679,126,0.647,129,1.17,131,1.76,140,1.481,144,1.622,145,0.004,146,0.006,147,0.004,153,1.206,163,3.903,164,1.522,167,1.143,194,2.414,198,0.792,200,2.037,215,0.602,221,1.707,241,1.48,245,0.716,252,3.716,278,0.601,284,0.757,321,1.757,322,2.196,330,1.177,337,1.441,338,1.916,339,2.44,341,1.368,343,1.522,345,1.368,350,1.522,351,2.283,353,1.522,355,1.481,360,1.441,361,1.804,368,1.629,369,1.095,371,1.481,374,1.441,403,2.35,408,1.044,425,1.256,436,1.522,439,1.177,457,1.236,502,1.59,524,1.516,543,2.011,584,1.991,586,2.39,601,2.086,605,1.299,640,3.16,641,4.482,648,1.267,650,2.168,656,2.657,713,1.347,726,3.888,733,1.151,734,3.464,754,1.446,755,1.565,762,2.472,820,2.371,825,1.72,834,1.939,844,2.037,859,2.283,861,1.299,862,1.481,876,2.168,877,1.753,886,1.753,887,1.404,902,2.259,905,1.59,906,1.991,908,2.086,954,2.314,982,2.011,999,2.283,1006,1.61,1038,2.168,1039,4.074,1041,2.168,1042,3.16,1043,2.497,1047,3.689,1048,4.833,1049,3.606,1050,5.259,1051,3.573,1052,5.259,1053,3.346,1054,5.259,1060,3.16,1061,2.219,1062,4.16,1063,2.933,1064,3.16,1065,3.16,1066,2.359,1067,4.287,1068,3.16,1069,3.16,1070,1.76,1071,4.482,1072,3.16,1073,3.199,1074,5.207,1075,3.16,1076,3.903,1077,1.939,1078,3.16,1079,3.16,1080,3.16,1081,2.933,1082,3.16,1083,2.933,1084,3.16,1085,2.933,1086,3.16,1087,3.16,1088,3.16,1089,1.877,1090,3.16,1091,5.207,1092,4.482,1093,3.16,1094,4.482,1095,3.16,1096,4.482,1097,2.601,1098,3.16,1099,5.207,1100,3.16,1101,3.16,1102,3.16,1103,4.482,1104,4.482,1105,3.16,1106,5.207,1107,2.752,1108,3.16,1109,3.16,1110,3.16,1111,3.16,1112,3.16,1113,4.482,1114,3.16,1115,3.16,1116,3.16,1117,5.666,1118,3.16,1119,3.16,1120,4.482,1121,3.16,1122,4.482,1123,3.16,1124,3.16,1125,3.16,1126,3.16,1127,3.16,1128,2.577,1129,3.16,1130,3.16,1131,4.482,1132,3.16,1133,4.482,1134,5.666,1135,4.482,1136,3.689,1137,4.482,1138,1.877,1139,4.482,1140,3.16,1141,2.933,1142,3.16,1143,2.752,1144,3.16,1145,3.16,1146,3.16,1147,3.16,1148,3.16,1149,2.601,1150,3.16,1151,2.752,1152,2.933,1153,3.16,1154,3.16,1155,3.16,1156,4.482,1157,5.207,1158,4.482,1159,3.16,1160,3.16,1161,3.16,1162,3.16,1163,4.482,1164,5.666,1165,2.752,1166,2.752,1167,2.752,1168,2.752,1230,3.16,1231,2.601,1232,2.219,1233,3.16,1234,3.16,1236,1.942,1255,1.707,1258,2.35,1259,3.314,1260,2.086,1261,2.852,1262,2.011,1263,1.942,1264,1.942,1265,1.817,1266,2.959,1267,2.852,1268,2.852,1269,2.086,1270,3.047,1271,2.086,1272,2.852,1273,2.086,1274,2.086,1275,2.852,1276,2.086,1331,2.497,1644,2.577,1699,2.359,1744,2.259,1745,2.933,1746,4.16,1785,3.16,1798,4.482,1820,2.601,2046,2.35,2047,3.689,2091,1.942,2101,2.933,2102,2.933,2103,2.933,2104,3.903,2105,2.933,2124,1.817,2134,2.577,2136,2.601,2138,2.601,2172,1.877,2180,2.601,2279,4.16,2280,2.933,2282,2.752,2383,2.933,2384,4.16,2460,4.482,2461,4.912,2462,4.912,2463,4.912,2464,4.912,2465,3.464,2466,3.464,2531,3.258,2578,2.601,2731,3.903,2871,2.601,2872,3.689,2967,2.168,2968,2.086,2969,3.903,2979,3.903,2980,2.933,3066,2.933,3067,2.752,3087,3.464,3088,5.207,3177,3.16,3178,4.482,3179,4.912,3180,4.912,3181,4.482,3182,4.912,3183,3.464,3184,3.464,3185,3.464,3186,3.464,3187,3.464,3188,2.601,3189,2.933,3190,4.833,3202,4.482,3203,4.482,3317,3.16,3688,3.16,3722,3.16,3912,4.912,3922,3.464,3925,4.912,3926,4.912,3927,4.912,3928,4.912,3929,4.912,3996,2.359,3999,6.557,4001,4.16,4003,4.16,4007,3.16,4008,3.464,4010,4.912,4113,3.464,4117,3.464,4118,7.43,4119,3.925,4120,3.925,4121,7.037,4122,3.925,4123,3.925,4124,3.925,4125,3.925,4126,3.925,4127,3.925,4128,3.925,4129,3.925,4130,3.925,4131,3.925]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":241,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["0.0.2",{"_index":3959,"title":{},"body":{"dependencies.html":{}}}],["0.0.25",{"_index":3964,"title":{},"body":{"dependencies.html":{}}}],["0.0.6",{"_index":3956,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":3972,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":3993,"title":{},"body":{"dependencies.html":{}}}],["0.38.1",{"_index":3989,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3055,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"classes/Percent.html":{}}}],["0.6.2",{"_index":3968,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3863,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3915,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3891,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3906,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":144,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["1.0.2",{"_index":3978,"title":{},"body":{"dependencies.html":{}}}],["1.1.11",{"_index":3986,"title":{},"body":{"dependencies.html":{}}}],["1.1.2",{"_index":3976,"title":{},"body":{"dependencies.html":{}}}],["1.1.20150312",{"_index":3970,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":3991,"title":{},"body":{"dependencies.html":{}}}],["1.17.1",{"_index":3982,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":3983,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":3954,"title":{},"body":{"dependencies.html":{}}}],["1.6.5",{"_index":3980,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3861,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":3907,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3878,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3885,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3876,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":3062,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["10/10",{"_index":3890,"title":{},"body":{"coverage.html":{}}}],["10/12",{"_index":3935,"title":{},"body":{"coverage.html":{}}}],["10/15",{"_index":3881,"title":{},"body":{"coverage.html":{}}}],["10/22",{"_index":3889,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1006,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":982,"title":{},"body":{"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/Hertz.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"miscellaneous/variables.html":{}}}],["100px",{"_index":1056,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["11",{"_index":4105,"title":{},"body":{"overview.html":{}}}],["11/11",{"_index":3858,"title":{},"body":{"coverage.html":{}}}],["11/13",{"_index":3855,"title":{},"body":{"coverage.html":{}}}],["11/23",{"_index":3887,"title":{},"body":{"coverage.html":{}}}],["11/30",{"_index":3884,"title":{},"body":{"coverage.html":{}}}],["11/32",{"_index":3938,"title":{},"body":{"coverage.html":{}}}],["115",{"_index":4131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/18",{"_index":3853,"title":{},"body":{"coverage.html":{}}}],["12/24",{"_index":3882,"title":{},"body":{"coverage.html":{}}}],["13/18",{"_index":3901,"title":{},"body":{"coverage.html":{}}}],["14/17",{"_index":3874,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1260,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["15/19",{"_index":3848,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":2820,"title":{},"body":{"components/FormInputComponent.html":{}}}],["16",{"_index":2756,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["16/21",{"_index":3896,"title":{},"body":{"coverage.html":{}}}],["17/24",{"_index":3918,"title":{},"body":{"coverage.html":{}}}],["18x18",{"_index":3037,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["19",{"_index":4106,"title":{},"body":{"overview.html":{}}}],["2",{"_index":954,"title":{},"body":{"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"classes/CommonUtil.html":{},"classes/DatagridFilter.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/Hertz.html":{},"interfaces/MockRecord.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":3961,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":3974,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":3877,"title":{},"body":{"coverage.html":{}}}],["2/6",{"_index":3865,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1262,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["200px",{"_index":1058,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["2019",{"_index":3318,"title":{},"body":{"modules/PipesModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{}}}],["2020",{"_index":1784,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/ErrorBannerComponent.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["23/39",{"_index":3872,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":4107,"title":{},"body":{"overview.html":{}}}],["24/31",{"_index":3897,"title":{},"body":{"coverage.html":{}}}],["24px",{"_index":2382,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["25",{"_index":1005,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{}}}],["25/42",{"_index":3903,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":3054,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["255",{"_index":3057,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["27",{"_index":903,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["2d",{"_index":1755,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["3",{"_index":48,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/Bytes.html":{},"dependencies.html":{},"overview.html":{}}}],["3.1.3",{"_index":3949,"title":{},"body":{"dependencies.html":{}}}],["3/15",{"_index":3908,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3849,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3867,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3916,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2280,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":2105,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["31",{"_index":3913,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":3864,"title":{},"body":{"coverage.html":{}}}],["34",{"_index":3937,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":3883,"title":{},"body":{"coverage.html":{}}}],["36x36",{"_index":3041,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["37",{"_index":1273,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["37/41",{"_index":3924,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":956,"title":{},"body":{"classes/Bytes.html":{}}}],["4/4",{"_index":3859,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3931,"title":{},"body":{"coverage.html":{}}}],["4/8",{"_index":3880,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1269,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["400px",{"_index":1059,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["44",{"_index":3939,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":3888,"title":{},"body":{"coverage.html":{}}}],["47",{"_index":3886,"title":{},"body":{"coverage.html":{}}}],["48",{"_index":4108,"title":{},"body":{"overview.html":{}}}],["5/7",{"_index":3933,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1263,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":1196,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["52",{"_index":3904,"title":{},"body":{"coverage.html":{}}}],["54",{"_index":3941,"title":{},"body":{"coverage.html":{}}}],["58",{"_index":3871,"title":{},"body":{"coverage.html":{}}}],["59",{"_index":3902,"title":{},"body":{"coverage.html":{}}}],["5px",{"_index":2812,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["6.5.5",{"_index":3987,"title":{},"body":{"dependencies.html":{}}}],["6/11",{"_index":3942,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":3879,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2282,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["60/80",{"_index":3875,"title":{},"body":{"coverage.html":{}}}],["600",{"_index":3063,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["64",{"_index":3920,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":3852,"title":{},"body":{"coverage.html":{}}}],["6px",{"_index":2815,"title":{},"body":{"components/FormInputComponent.html":{}}}],["7/12",{"_index":3894,"title":{},"body":{"coverage.html":{}}}],["7/22",{"_index":3914,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":3860,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":3851,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":3857,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":3917,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":3932,"title":{},"body":{"coverage.html":{}}}],["72",{"_index":3900,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3866,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":3895,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":3856,"title":{},"body":{"coverage.html":{}}}],["78",{"_index":3847,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1781,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{}}}],["8.3.20",{"_index":4098,"title":{},"body":{"index.html":{}}}],["8/12",{"_index":3919,"title":{},"body":{"coverage.html":{}}}],["8/18",{"_index":3940,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3930,"title":{},"body":{"coverage.html":{}}}],["82",{"_index":3873,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":3934,"title":{},"body":{"coverage.html":{}}}],["84",{"_index":3854,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":3850,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":3995,"title":{},"body":{"dependencies.html":{}}}],["9.1.9",{"_index":3947,"title":{},"body":{"dependencies.html":{}}}],["9/12",{"_index":3892,"title":{},"body":{"coverage.html":{}}}],["9/14",{"_index":3921,"title":{},"body":{"coverage.html":{}}}],["9/17",{"_index":3905,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":3923,"title":{},"body":{"coverage.html":{}}}],["999",{"_index":4093,"title":{},"body":{"index.html":{}}}],["999].[0",{"_index":4092,"title":{},"body":{"index.html":{}}}],["_actiondisplayconfig",{"_index":173,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["_actions",{"_index":174,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["_buttonconfig",{"_index":1446,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_columns",{"_index":1348,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_config",{"_index":2054,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["_errormessage",{"_index":2344,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["_height",{"_index":1451,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_isrequestpending",{"_index":1938,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["_multiplier",{"_index":939,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["_open",{"_index":1927,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["_pagination",{"_index":1449,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_progress",{"_index":1940,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["_searchcriteria",{"_index":3363,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["_selectiontype",{"_index":1440,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["_size",{"_index":3018,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["_unit",{"_index":2210,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["_unitname",{"_index":940,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["_unitoptions",{"_index":2211,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["a.b.c",{"_index":3195,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["abort",{"_index":3408,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["above",{"_index":47,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["absolute",{"_index":1097,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["abstract",{"_index":447,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/Bytes.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["abstractcontrol",{"_index":1851,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["abstraction",{"_index":2586,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["acc",{"_index":3420,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["accepts",{"_index":2055,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/FormValidators.html":{}}}],["access",{"_index":569,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["accessors",{"_index":188,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["achieved",{"_index":3787,"title":{},"body":{"contributing.html":{}}}],["action",{"_index":63,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActionMenuModule.html":{},"miscellaneous/enumerations.html":{}}}],["action.actiontype",{"_index":276,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.availability",{"_index":291,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.availability(selection",{"_index":292,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.children",{"_index":298,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.children.length",{"_index":299,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.disabled",{"_index":315,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.disabled(this.selectedentities",{"_index":316,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.handler(this.selectedentities",{"_index":312,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["action.handlerdata",{"_index":313,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actionbar",{"_index":1624,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actiondisplayconfig",{"_index":1,"title":{"interfaces/ActionDisplayConfig.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"coverage.html":{}}}],["actiondisplayconfig(config",{"_index":279,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actionhandlertype",{"_index":53,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/typealiases.html":{}}}],["actionitem",{"_index":69,"title":{"interfaces/ActionItem.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"coverage.html":{}}}],["actionitem.handler",{"_index":51,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"miscellaneous/typealiases.html":{}}}],["actionitem.handlerdata",{"_index":239,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actionmenucomponent",{"_index":149,"title":{"components/ActionMenuComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActionMenuModule.html":{},"coverage.html":{},"overview.html":{}}}],["actionreporter",{"_index":1464,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["actions",{"_index":10,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{}}}],["actions(actions",{"_index":273,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actions.filter",{"_index":290,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actions.foreach(action",{"_index":297,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actions.map(action",{"_index":275,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actionstyling",{"_index":24,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["actionstyling.dropdown",{"_index":202,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actionstyling.inline",{"_index":209,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actiontype",{"_index":28,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["actiontype.contextual",{"_index":277,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actiontype.contextual_featured",{"_index":304,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actiontype.static",{"_index":262,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["actiontype.static_featured",{"_index":265,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["activate",{"_index":1202,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["activated",{"_index":2079,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["active",{"_index":1330,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["activites",{"_index":1462,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["activity",{"_index":328,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["activityindicatortype",{"_index":1292,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["activitypromiseresolver",{"_index":377,"title":{"classes/ActivityPromiseResolver.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["activitypromiseresolver.monitoractivities",{"_index":470,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activitypromiseresolver.monitoractivity",{"_index":465,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter",{"_index":431,"title":{"classes/ActivityReporter.html":{}},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["activityreporter:21",{"_index":532,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:27",{"_index":530,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:33",{"_index":531,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:38",{"_index":528,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:53",{"_index":529,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityreporter:73",{"_index":527,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresolutionpromise",{"_index":417,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresolutionpromises",{"_index":406,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["activityresponse",{"_index":422,"title":{"interfaces/ActivityResponse.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"coverage.html":{}}}],["acts",{"_index":1693,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["actual_component",{"_index":376,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["add",{"_index":1370,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"index.html":{}}}],["addcolumn",{"_index":1424,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["addcolumn(col",{"_index":1473,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["added",{"_index":79,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["adding",{"_index":1640,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["addition",{"_index":2246,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["additional",{"_index":105,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["adds",{"_index":2515,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["addwildcard",{"_index":2311,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["addwildcard(input",{"_index":2313,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["after(date",{"_index":2413,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["afterviewinit",{"_index":1243,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["against",{"_index":1811,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["age",{"_index":2279,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["alert",{"_index":476,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["alert').nativeelement.textcontent",{"_index":638,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["alertclosable",{"_index":2347,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["alerttype",{"_index":2348,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["aliases",{"_index":4110,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":3065,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["all(...conditions",{"_index":2484,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["all(conditions",{"_index":2417,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["allow",{"_index":1035,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/SearchSection.html":{}}}],["allowed",{"_index":1265,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["allows",{"_index":790,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/Unit.html":{},"miscellaneous/functions.html":{}}}],["allresults",{"_index":3418,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["allresults.indexof(this.selecteditem",{"_index":3423,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["along",{"_index":2922,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"interfaces/SearchSection.html":{},"classes/SubscriptionTracker.html":{}}}],["alongside",{"_index":3353,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["already",{"_index":3404,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["alternatives",{"_index":3794,"title":{},"body":{"contributing.html":{}}}],["alto",{"_index":3184,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["always",{"_index":31,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{}}}],["amend",{"_index":3826,"title":{},"body":{"contributing.html":{}}}],["analyzer",{"_index":4044,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":4048,"title":{},"body":{"index.html":{}}}],["ancestor",{"_index":2557,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["ancestor).queryall(by.css(query",{"_index":2669,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["and().or",{"_index":2391,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["and(...conditions",{"_index":2471,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["and(conditions",{"_index":2421,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["angular",{"_index":3965,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["angular/animations",{"_index":3946,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":3200,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":3948,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":271,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["angular/core/testing",{"_index":2523,"title":{},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["angular/forms",{"_index":725,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":2563,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["angular/router",{"_index":3690,"title":{},"body":{"modules/VcdDatagridModule.html":{},"dependencies.html":{}}}],["another",{"_index":1429,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["any(...conditions",{"_index":2486,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["any(conditions",{"_index":2424,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["any).href",{"_index":1490,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["anychoice",{"_index":2284,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["anychoice.display",{"_index":2310,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["api",{"_index":571,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["app",{"_index":2772,"title":{},"body":{"components/FormInputComponent.html":{},"index.html":{}}}],["appear",{"_index":1509,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["appears",{"_index":702,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["appends",{"_index":2987,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["application",{"_index":3369,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["application's",{"_index":4052,"title":{},"body":{"index.html":{}}}],["applied",{"_index":2567,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["approval",{"_index":4081,"title":{},"body":{"index.html":{}}}],["args",{"_index":688,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{}}}],["argument",{"_index":110,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["arguments",{"_index":240,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["around",{"_index":1825,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{}}}],["array",{"_index":879,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["array.from(classes",{"_index":3536,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["arrow",{"_index":2020,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["arrowup",{"_index":618,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["artifacts",{"_index":4059,"title":{},"body":{"index.html":{}}}],["ascending",{"_index":986,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["aside",{"_index":2814,"title":{},"body":{"components/FormInputComponent.html":{}}}],["assert",{"_index":2589,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["assertions",{"_index":2588,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["assign",{"_index":2782,"title":{},"body":{"components/FormInputComponent.html":{}}}],["assigned",{"_index":2064,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{}}}],["assigning",{"_index":2088,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["assignvalue",{"_index":1703,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["assignvalue(config",{"_index":1714,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["associated",{"_index":719,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["associating",{"_index":2179,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["assumed",{"_index":413,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["asterisk",{"_index":715,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["async",{"_index":443,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/FilterTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["attaches",{"_index":1698,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["attaching",{"_index":1726,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["attachrenderer",{"_index":1704,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["attempt",{"_index":3409,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["attribute",{"_index":2752,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["auto",{"_index":677,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["automatically",{"_index":2934,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"index.html":{}}}],["autosquash",{"_index":3830,"title":{},"body":{"contributing.html":{}}}],["availability",{"_index":93,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{}}}],["available",{"_index":83,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"index.html":{}}}],["availablefeaturedactions",{"_index":305,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["availablefeaturedactions.slice(0",{"_index":308,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["availableheight",{"_index":1625,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["availableunits",{"_index":975,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["avoid",{"_index":892,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["avoiding",{"_index":2572,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["await",{"_index":484,"title":{},"body":{"classes/ActivityReporter.html":{},"components/FilterTestHostComponent.html":{},"interfaces/SearchSection.html":{}}}],["b",{"_index":931,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["back",{"_index":2988,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["background",{"_index":3052,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["backing",{"_index":651,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["banner",{"_index":327,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{},"miscellaneous/enumerations.html":{}}}],["banner'},{'name",{"_index":348,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["banner.component",{"_index":3717,"title":{},"body":{"modules/VcdErrorBannerModule.html":{}}}],["banner.component.html",{"_index":2343,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.scss",{"_index":2342,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts",{"_index":2340,"title":{},"body":{"components/ErrorBannerComponent.html":{},"coverage.html":{}}}],["banner.component.ts:17",{"_index":2366,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:19",{"_index":2367,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:24",{"_index":2362,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:29",{"_index":2357,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:36",{"_index":2356,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:41",{"_index":2351,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:46",{"_index":2369,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:54",{"_index":2363,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.component.ts:59",{"_index":2365,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["banner.module",{"_index":3662,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{}}}],["banner.module.ts",{"_index":3716,"title":{},"body":{"modules/VcdErrorBannerModule.html":{}}}],["banneractivityreportercomponent",{"_index":326,"title":{"components/BannerActivityReporterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{},"overview.html":{}}}],["banneractivityreporterwidgetobject",{"_index":544,"title":{"classes/BannerActivityReporterWidgetObject.html":{}},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["bar",{"_index":205,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["base",{"_index":797,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["based",{"_index":221,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["baseformcontrol",{"_index":639,"title":{"classes/BaseFormControl.html":{}},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{},"coverage.html":{}}}],["baseformcontrol:105",{"_index":2712,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:109",{"_index":2713,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:113",{"_index":2714,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:117",{"_index":2715,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:21",{"_index":2718,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:26",{"_index":2720,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:31",{"_index":2721,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:36",{"_index":2716,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:41",{"_index":2711,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:46",{"_index":2710,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:52",{"_index":2707,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:57",{"_index":2709,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:62",{"_index":2708,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:67",{"_index":2717,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseformcontrol:72",{"_index":2719,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["baseunit",{"_index":3614,"title":{},"body":{"classes/Unit.html":{}}}],["basevalue",{"_index":1026,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["basically",{"_index":3339,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["batch",{"_index":91,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["become",{"_index":849,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["becomes",{"_index":2151,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["before",{"_index":713,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["before(date",{"_index":2426,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["before/aftereach",{"_index":2685,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["beforeeach",{"_index":2536,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["beforeeach(function(this",{"_index":2542,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["beginning",{"_index":2985,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["begins",{"_index":523,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["behavior",{"_index":474,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["being",{"_index":566,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["belong",{"_index":220,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["below",{"_index":703,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["benefit",{"_index":4101,"title":{},"body":{"index.html":{}}}],["best",{"_index":978,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["bestformat",{"_index":3627,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestformat(1000000",{"_index":3632,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestformat(value",{"_index":3629,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["bestunit",{"_index":1022,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["bestvalue",{"_index":3111,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["between",{"_index":435,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["betweennumbers",{"_index":2399,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["betweennumbers(values",{"_index":2428,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["binding",{"_index":3354,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["bl",{"_index":1054,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["blob",{"_index":1753,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["blob([csvfile",{"_index":1782,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["block",{"_index":3058,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["blocking",{"_index":3013,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["body",{"_index":1611,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["bold",{"_index":331,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/functions.html":{}}}],["boldtextrenderer",{"_index":776,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["boldtextrenderer(textextractor",{"_index":4011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boldtextrenderercomponent",{"_index":330,"title":{"components/BoldTextRendererComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["boldtextrendererconfig",{"_index":765,"title":{"interfaces/BoldTextRendererConfig.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["boldtextrendererwidgetobject",{"_index":780,"title":{"classes/BoldTextRendererWidgetObject.html":{}},"body":{"classes/BoldTextRendererWidgetObject.html":{},"coverage.html":{}}}],["boolean",{"_index":94,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["bootstrap",{"_index":3311,"title":{},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["boston",{"_index":3186,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["both",{"_index":133,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/Percent.html":{}}}],["bottom",{"_index":1053,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["bound",{"_index":2359,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["box",{"_index":830,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["br",{"_index":1052,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["branch",{"_index":3771,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["break",{"_index":1141,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["breaking",{"_index":704,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["breaks",{"_index":1367,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["browse",{"_index":4103,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2564,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{},"modules.html":{}}}],["bsd",{"_index":2380,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["btntext",{"_index":186,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["bubbles",{"_index":2032,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["bucket",{"_index":269,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["buckets",{"_index":49,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["bug",{"_index":1364,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{}}}],["bugs",{"_index":3843,"title":{},"body":{"contributing.html":{}}}],["build",{"_index":3337,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["build:components",{"_index":4057,"title":{},"body":{"index.html":{}}}],["build:i18n",{"_index":4058,"title":{},"body":{"index.html":{}}}],["builder",{"_index":2174,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["builder.is(\"created\").before(userinputdate",{"_index":2392,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.is(\"uptime\").greaterthan(user",{"_index":2393,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts",{"_index":2384,"title":{},"body":{"classes/FilterBuilder.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["builder.ts:106",{"_index":2418,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:126",{"_index":2457,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:160",{"_index":2425,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:180",{"_index":2459,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:190",{"_index":2441,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:198",{"_index":2455,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:206",{"_index":2451,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:214",{"_index":2453,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:222",{"_index":2445,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:230",{"_index":2447,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:238",{"_index":2427,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:246",{"_index":2414,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:256",{"_index":2429,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:270",{"_index":2439,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:282",{"_index":2435,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:291",{"_index":2434,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:39",{"_index":2412,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:40",{"_index":2411,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:41",{"_index":2410,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:52",{"_index":2449,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:62",{"_index":2442,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builder.ts:72",{"_index":2422,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builders",{"_index":2496,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["builders.push(new",{"_index":2497,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["buildpartial",{"_index":2400,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["button",{"_index":73,"title":{"interfaces/Button.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["button.class",{"_index":1393,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["button.handler(selection",{"_index":1526,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["button.inactivedisplaymode",{"_index":1516,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["button.isactive(selection",{"_index":1512,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["buttonconfig",{"_index":852,"title":{"interfaces/ButtonConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["buttonconfig(config",{"_index":1380,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["buttonconfig.inactivedisplaymode",{"_index":814,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["buttoncontents",{"_index":136,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["buttons",{"_index":123,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["by.css(selector",{"_index":2610,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["by.directive(selector",{"_index":2611,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["bytes",{"_index":928,"title":{"classes/Bytes.html":{}},"body":{"classes/Bytes.html":{},"coverage.html":{}}}],["bytes(1",{"_index":949,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes(1024",{"_index":951,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.b",{"_index":958,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.gb",{"_index":961,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.kb",{"_index":959,"title":{},"body":{"classes/Bytes.html":{}}}],["bytes.mb",{"_index":960,"title":{},"body":{"classes/Bytes.html":{}}}],["c",{"_index":860,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"pipes/NestedPropertyPipe.html":{},"classes/WidgetFinder.html":{},"miscellaneous/functions.html":{}}}],["ca",{"_index":2136,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["cache",{"_index":1426,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculate",{"_index":1629,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculated",{"_index":222,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["calculatepagesize",{"_index":1612,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["calculateposition(rect",{"_index":1154,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["calculates",{"_index":977,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["california",{"_index":2137,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["call",{"_index":111,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["callback",{"_index":684,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["called",{"_index":112,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["caller",{"_index":861,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["callers",{"_index":2583,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["calling",{"_index":246,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["canbereadonly",{"_index":654,"title":{"interfaces/CanBeReadOnly.html":{}},"body":{"classes/BaseFormControl.html":{},"interfaces/CanBeReadOnly.html":{},"coverage.html":{}}}],["cancel",{"_index":1889,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["canceltext",{"_index":1890,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["cards",{"_index":162,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["care",{"_index":2650,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["case",{"_index":87,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["catch",{"_index":3576,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["catch(error",{"_index":428,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["caused",{"_index":1074,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["causes",{"_index":1662,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["causing",{"_index":3797,"title":{},"body":{"contributing.html":{}}}],["cd",{"_index":4082,"title":{},"body":{"index.html":{}}}],["cell",{"_index":755,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["cell's",{"_index":1808,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["cell_tag",{"_index":3925,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cellelement",{"_index":799,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["cells",{"_index":866,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["cellvalue",{"_index":1809,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["cellvalue.tolocalestring",{"_index":1821,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["cellvalue.tostring",{"_index":1819,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["center",{"_index":1152,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["certificate",{"_index":3755,"title":{},"body":{"contributing.html":{}}}],["certifies",{"_index":3760,"title":{},"body":{"contributing.html":{}}}],["cfr",{"_index":1708,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["chance",{"_index":1086,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":683,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["changed",{"_index":1699,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["changedetectorref",{"_index":1244,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["changes",{"_index":578,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{}}}],["changing",{"_index":1664,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["character",{"_index":1758,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["characters",{"_index":2754,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["check",{"_index":2603,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["checkbox",{"_index":1903,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/enumerations.html":{}}}],["checkbox'},{'name",{"_index":352,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["checkbox.component",{"_index":3723,"title":{},"body":{"modules/VcdFormModule.html":{}}}],["checkbox.component.html",{"_index":2693,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts",{"_index":2692,"title":{},"body":{"components/FormCheckboxComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["checkbox.component.ts:34",{"_index":2706,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:39",{"_index":2705,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:44",{"_index":2702,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:49",{"_index":2700,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:51",{"_index":2723,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox.component.ts:53",{"_index":2698,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkbox/form",{"_index":2691,"title":{},"body":{"components/FormCheckboxComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["checkbox:nth",{"_index":2042,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["checkboxes",{"_index":2035,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["checkboxstyling",{"_index":2703,"title":{},"body":{"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["checkboxstyling.checkbox",{"_index":2704,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["checkout",{"_index":3810,"title":{},"body":{"contributing.html":{}}}],["checkposition",{"_index":2336,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["checks",{"_index":2857,"title":{},"body":{"classes/FormValidators.html":{},"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["child",{"_index":2780,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["children",{"_index":121,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["chrome",{"_index":1785,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormInputComponent.html":{},"miscellaneous/variables.html":{}}}],["ci",{"_index":3819,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["ci/cd",{"_index":4074,"title":{},"body":{"index.html":{}}}],["city",{"_index":3179,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["clarity",{"_index":116,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["claritymodule",{"_index":3586,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["class",{"_index":77,"title":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/CommonUtil.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"classes/FilterBuilder.html":{},"classes/FormValidators.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["classes",{"_index":378,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/CommonUtil.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"classes/FormValidators.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"overview.html":{}}}],["classlist.js",{"_index":3969,"title":{},"body":{"dependencies.html":{}}}],["classname",{"_index":2558,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["clause",{"_index":2381,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["clear",{"_index":2401,"title":{},"body":{"classes/FilterBuilder.html":{},"interfaces/SearchSection.html":{}}}],["cleared",{"_index":2360,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["clearhidetimeout",{"_index":1123,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["clears",{"_index":1543,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clearselectioninformation",{"_index":1570,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["cleartimeout(tip.hidetimeout",{"_index":1124,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["cli",{"_index":3966,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["click",{"_index":551,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["click(cssselector",{"_index":572,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["clickcancel",{"_index":2008,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clickcolumncheckbox",{"_index":2009,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clickcolumncheckbox(index",{"_index":2017,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clickcolumndropdown",{"_index":2010,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clicked",{"_index":103,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["clickexport",{"_index":2011,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["clicks",{"_index":576,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["client",{"_index":387,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/ObjectAndResponse.html":{}}}],["clientheight",{"_index":1266,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["clientrect",{"_index":1155,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["clipped",{"_index":820,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cliptext",{"_index":904,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{}}}],["cliptextconfig",{"_index":818,"title":{"interfaces/CliptextConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"coverage.html":{}}}],["clone",{"_index":4068,"title":{},"body":{"index.html":{}}}],["cloning",{"_index":4067,"title":{},"body":{"index.html":{}}}],["closable",{"_index":2353,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["close",{"_index":2215,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["closed",{"_index":2345,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["closer",{"_index":2984,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["closes",{"_index":517,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["closing",{"_index":2766,"title":{},"body":{"components/FormInputComponent.html":{}}}],["closure",{"_index":3393,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["closures",{"_index":2687,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["cloud",{"_index":4020,"title":{},"body":{"index.html":{}}}],["clr",{"_index":1270,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["clr/angular",{"_index":1254,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{}}}],["clr/angular/data/datagrid/interfaces/filter.interface",{"_index":2098,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["clr/core",{"_index":3950,"title":{},"body":{"dependencies.html":{}}}],["clr/icons",{"_index":3951,"title":{},"body":{"dependencies.html":{}}}],["clr/ui",{"_index":3952,"title":{},"body":{"dependencies.html":{}}}],["clrdatagrid",{"_index":1250,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["clrdatagridcssclass",{"_index":1442,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridfilter",{"_index":1251,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridfilterinterface",{"_index":2053,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["clrdatagridpagination",{"_index":1252,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridstateinterface",{"_index":1253,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdatagridwidgetobject",{"_index":791,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["clrdatagridwidgetobject(this.fixture",{"_index":3711,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["clrdatarowcssclassgetter(row",{"_index":1537,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["clrdgcolumnclassname",{"_index":910,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["clrdropdown",{"_index":1853,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["cluster_pipesmodule",{"_index":3313,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_pipesmodule_declarations",{"_index":3314,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_pipesmodule_exports",{"_index":3315,"title":{},"body":{"modules/PipesModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule",{"_index":3454,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule_declarations",{"_index":3455,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_showclippedtextdirectivemodule_exports",{"_index":3456,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"overview.html":{}}}],["cluster_spotlightsearchmodule",{"_index":3578,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"overview.html":{}}}],["cluster_spotlightsearchmodule_declarations",{"_index":3579,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"overview.html":{}}}],["cluster_spotlightsearchmodule_exports",{"_index":3580,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"overview.html":{}}}],["cluster_spotlightsearchmodule_providers",{"_index":3581,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule",{"_index":3647,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule_declarations",{"_index":3648,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactionmenumodule_exports",{"_index":3649,"title":{},"body":{"modules/VcdActionMenuModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule",{"_index":3653,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_declarations",{"_index":3654,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_exports",{"_index":3656,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdactivityreportermodule_imports",{"_index":3655,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"overview.html":{}}}],["cluster_vcdcomponentsmodule",{"_index":3667,"title":{},"body":{"modules/VcdComponentsModule.html":{},"overview.html":{}}}],["cluster_vcdcomponentsmodule_exports",{"_index":3668,"title":{},"body":{"modules/VcdComponentsModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule",{"_index":3680,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule_declarations",{"_index":3681,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddataexportermodule_exports",{"_index":3682,"title":{},"body":{"modules/VcdDataExporterModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule",{"_index":3684,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_declarations",{"_index":3685,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_exports",{"_index":3687,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcddatagridmodule_imports",{"_index":3686,"title":{},"body":{"modules/VcdDatagridModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule",{"_index":3713,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule_declarations",{"_index":3714,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcderrorbannermodule_exports",{"_index":3715,"title":{},"body":{"modules/VcdErrorBannerModule.html":{},"overview.html":{}}}],["cluster_vcdformmodule",{"_index":3718,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdformmodule_declarations",{"_index":3719,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdformmodule_exports",{"_index":3720,"title":{},"body":{"modules/VcdFormModule.html":{}}}],["cluster_vcdformmodule_providers",{"_index":3721,"title":{},"body":{"modules/VcdFormModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule",{"_index":3724,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule_declarations",{"_index":3725,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cluster_vcdloadingindicatormodule_exports",{"_index":3726,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["cmd+space",{"_index":3329,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["co",{"_index":3152,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["co.value",{"_index":3153,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["code",{"_index":1761,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["codecov.io",{"_index":3971,"title":{},"body":{"dependencies.html":{}}}],["col",{"_index":1474,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["col.displayname",{"_index":1483,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["colindex",{"_index":1475,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["collect",{"_index":108,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["color",{"_index":2809,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["cols",{"_index":1351,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column",{"_index":754,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["column.displayname",{"_index":1484,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.fieldname",{"_index":2004,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["column.filter",{"_index":1657,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.filter.config.queryfield",{"_index":1658,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.hideable",{"_index":1592,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.interface",{"_index":772,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.interface.ts",{"_index":804,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["column.queryfieldname",{"_index":1656,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column.renderer",{"_index":1648,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["column_css_selector",{"_index":3926,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["column_selector",{"_index":3927,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["columnbubbles",{"_index":2013,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["columncheckboxes",{"_index":2014,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["columncomponentrendererspec",{"_index":769,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["columncomponentrendererspec(componentrendererspec",{"_index":927,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["columncomponentrendererspec({type",{"_index":914,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["columnconfig",{"_index":1647,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldcolumnrendererspec",{"_index":1652,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldname",{"_index":1653,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfig.fieldrenderer",{"_index":1650,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnconfiginternal",{"_index":1235,"title":{"interfaces/ColumnConfigInternal.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["columndropdown",{"_index":1878,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["columndropdown(columndropdown",{"_index":1877,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["columnrendererspec",{"_index":770,"title":{"interfaces/ColumnRendererSpec.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["columnrendererspec#type",{"_index":1683,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["columnrendererspec).config",{"_index":1651,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnrendererspec.config",{"_index":1697,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["columns",{"_index":758,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columns(cols",{"_index":1349,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columns.map(column",{"_index":1646,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnsconfig",{"_index":1344,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["columnsupdated",{"_index":1423,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["combination",{"_index":424,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["combooption",{"_index":3097,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combooptions",{"_index":3108,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combooptionunitmap",{"_index":3110,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combounitoptions",{"_index":3121,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combounitoptions.disable",{"_index":3127,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["combounitoptions.enable",{"_index":3129,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["commands",{"_index":4087,"title":{},"body":{"index.html":{}}}],["commas",{"_index":1804,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["comment",{"_index":3832,"title":{},"body":{"contributing.html":{}}}],["commit",{"_index":3774,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["commits",{"_index":3772,"title":{},"body":{"contributing.html":{}}}],["common",{"_index":3640,"title":{},"body":{"injectables/UnitFormatter.html":{},"contributing.html":{},"index.html":{}}}],["common/activity",{"_index":633,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["common/error/error",{"_index":3673,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["common/interfaces",{"_index":272,"title":{},"body":{"components/ActionMenuComponent.html":{},"directives/MinMaxValidator.html":{}}}],["common/interfaces/action",{"_index":816,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["common/interfaces/select",{"_index":2171,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["common/loading/loading",{"_index":3674,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["common/pipes/pipes.module",{"_index":3691,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["common/subscription",{"_index":1855,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"directives/MinMaxValidator.html":{}}}],["commonmodule",{"_index":3583,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["commonutil",{"_index":1665,"title":{"classes/CommonUtil.html":{}},"body":{"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["commonutil.roundto(inputunit.getoutputvalue(value",{"_index":3643,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["community",{"_index":3753,"title":{},"body":{"contributing.html":{}}}],["compared",{"_index":3288,"title":{},"body":{"classes/Percent.html":{}}}],["compatibility",{"_index":2933,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["compilecomponents",{"_index":2535,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["complete",{"_index":1450,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{}}}],["completed",{"_index":3407,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["complex",{"_index":2387,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["comply",{"_index":3592,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["compodoc",{"_index":3985,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":148,"title":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["component's",{"_index":570,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["component(filtertesthostcomponent",{"_index":4013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component({@link",{"_index":2538,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["component_template",{"_index":324,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["componentconstructor",{"_index":2655,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentfactory",{"_index":1732,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentfactoryresolver",{"_index":1709,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentfixture",{"_index":2562,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentfixture#detectchanges",{"_index":2604,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentinstance",{"_index":3462,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["componentref",{"_index":1701,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["componentrenderer",{"_index":752,"title":{"interfaces/ComponentRenderer.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["componentrenderer#config",{"_index":858,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["componentrenderer.config",{"_index":773,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["componentrendererconstructor",{"_index":826,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["componentrendereroutletdirective",{"_index":369,"title":{"directives/ComponentRendererOutletDirective.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["componentrendereroutletdirective#assignvalue",{"_index":2109,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["componentrendererspec",{"_index":827,"title":{"interfaces/ComponentRendererSpec.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["componentroots",{"_index":2668,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["componentroots.map",{"_index":2670,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["components",{"_index":150,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SubscriptionTracker.html":{},"miscellaneous/functions.html":{},"index.html":{},"overview.html":{}}}],["components.git",{"_index":4096,"title":{},"body":{"index.html":{}}}],["components/master",{"_index":4080,"title":{},"body":{"index.html":{}}}],["componenttype",{"_index":1702,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["compound",{"_index":3399,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["computebestunitandvalue(value",{"_index":3140,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["concurrent",{"_index":441,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["condition",{"_index":81,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/FilterBuilder.html":{},"interfaces/ObjectAndResponse.html":{}}}],["condition(operator",{"_index":2436,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["condition.buildpartial",{"_index":2483,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["condition.clear",{"_index":2488,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions",{"_index":2420,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.foreach(condition",{"_index":2482,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.length",{"_index":2472,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["conditions.shift",{"_index":2480,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["config",{"_index":196,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["config(config",{"_index":1188,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config(context",{"_index":1737,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["config(record",{"_index":778,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["config(val",{"_index":2110,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["config.disabled",{"_index":1193,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.mouseoutdelay",{"_index":1189,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.options.foreach(option",{"_index":2186,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["config.options.map(option",{"_index":2183,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["config.size",{"_index":1191,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["config.text",{"_index":764,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["config.unit",{"_index":2259,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["config.unitoptions",{"_index":2258,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["config[key",{"_index":283,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["configuration",{"_index":9,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["configurationcomponentrenderer",{"_index":1739,"title":{},"body":{"interfaces/ComponentRendererSpec.html":{}}}],["configuration{@link",{"_index":1687,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["configured",{"_index":228,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/SearchSection.html":{}}}],["configures",{"_index":2325,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["configuretestingmodule",{"_index":2528,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["conjunct",{"_index":2423,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["considered",{"_index":3795,"title":{},"body":{"contributing.html":{}}}],["consists",{"_index":614,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["const",{"_index":284,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["constelement",{"_index":3709,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["constelement.componentinstance",{"_index":3712,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["construct",{"_index":1015,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["constructed",{"_index":3107,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["constructor",{"_index":451,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/IdGenerator.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SubscriptionTracker.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["constructor(@inject(activitypromiseresolver",{"_index":3565,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["constructor(@inject(locale_id",{"_index":3204,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["constructor(@self",{"_index":2727,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["constructor(componentconstructor",{"_index":2657,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["constructor(controldirective",{"_index":2697,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{}}}],["constructor(destroyable",{"_index":2939,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["constructor(filtercontainer",{"_index":2060,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["constructor(fixture",{"_index":3477,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"classes/WidgetObject.html":{}}}],["constructor(host",{"_index":3438,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["constructor(multiplier",{"_index":3295,"title":{},"body":{"classes/Percent.html":{},"classes/Unit.html":{}}}],["constructor(ngcontrol",{"_index":670,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormSelectComponent.html":{}}}],["constructor(parent",{"_index":2409,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["constructor(prefix",{"_index":2957,"title":{},"body":{"classes/IdGenerator.html":{}}}],["constructor(private",{"_index":480,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["constructor(promiseresolver",{"_index":452,"title":{},"body":{"classes/ActivityReporter.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["constructor(translationservice",{"_index":510,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"injectables/UnitFormatter.html":{}}}],["constructor(viewcontainerref",{"_index":1706,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["constructors",{"_index":1695,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["constructs",{"_index":2936,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["contain",{"_index":3785,"title":{},"body":{"contributing.html":{}}}],["contained",{"_index":429,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["container",{"_index":164,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["containing",{"_index":160,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["contains",{"_index":856,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["content",{"_index":200,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["content/dimensions",{"_index":1129,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":1089,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":33,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/SearchSection.html":{}}}],["context(.modal",{"_index":3059,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["context(.modal):not(.adjust",{"_index":2819,"title":{},"body":{"components/FormInputComponent.html":{}}}],["contextual",{"_index":15,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["contextual_featured",{"_index":44,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["contextualactions",{"_index":309,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["contextualbutton",{"_index":842,"title":{"interfaces/ContextualButton.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["contextualbutton.ids",{"_index":1740,"title":{},"body":{"interfaces/ContextualButtonConfig.html":{}}}],["contextualbutton.id}s",{"_index":848,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["contextualbuttonconfig",{"_index":846,"title":{"interfaces/ContextualButtonConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["contextualbuttonposition",{"_index":843,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["contextualbuttonposition.row",{"_index":1521,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["contextualbuttonposition.top",{"_index":1383,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["continue",{"_index":3413,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["contract",{"_index":434,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["contributing",{"_index":3748,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":3763,"title":{},"body":{"contributing.html":{}}}],["contributions",{"_index":3752,"title":{},"body":{"contributing.html":{}}}],["contributor's",{"_index":3767,"title":{},"body":{"contributing.html":{}}}],["control",{"_index":650,"title":{},"body":{"classes/BaseFormControl.html":{},"injectables/CsvExporterService.html":{},"components/DatagridNumericFilterComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["control's",{"_index":2849,"title":{},"body":{"classes/FormValidators.html":{}}}],["control.ts",{"_index":641,"title":{},"body":{"classes/BaseFormControl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["control.ts:105",{"_index":690,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:109",{"_index":692,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:113",{"_index":695,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:117",{"_index":698,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:21",{"_index":676,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:26",{"_index":682,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:31",{"_index":685,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:36",{"_index":673,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:41",{"_index":714,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:46",{"_index":712,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:52",{"_index":701,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:57",{"_index":710,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:62",{"_index":706,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:67",{"_index":674,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:72",{"_index":672,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:85",{"_index":718,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:91",{"_index":721,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.ts:98",{"_index":723,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["control.value",{"_index":2867,"title":{},"body":{"classes/FormValidators.html":{}}}],["controldirective",{"_index":2699,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["controlling",{"_index":3355,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["controls",{"_index":1033,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["controlvalueaccessor",{"_index":653,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["conventions",{"_index":3836,"title":{},"body":{"contributing.html":{}}}],["conversion",{"_index":2295,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["convert",{"_index":1014,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["converted",{"_index":981,"title":{},"body":{"classes/Bytes.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/ExportColumn.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["converts",{"_index":1872,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["copy/paste",{"_index":1088,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["copyright",{"_index":2375,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["correct",{"_index":1597,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["correctly",{"_index":2672,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["corresponding",{"_index":872,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["correspondingformctrl",{"_index":2190,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["correspondingformctrl.setvalue(true",{"_index":2195,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["count",{"_index":229,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["coverage",{"_index":2636,"title":{"coverage.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{}}}],["covering",{"_index":3217,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["create",{"_index":886,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["createcsv",{"_index":1747,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["createcsv(rows",{"_index":1750,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["created",{"_index":1061,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/ShowClippedTextDirective.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["createdatagridfiltertesthelper",{"_index":2545,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdatagridfiltertesthelper(filtertype",{"_index":4012,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdatagridfiltertesthelperwithfinder",{"_index":2551,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdatagridfiltertesthelperwithfinder(filtertype",{"_index":4014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createformgroup",{"_index":2056,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["createid",{"_index":2979,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createnullsafevalidator",{"_index":2844,"title":{},"body":{"classes/FormValidators.html":{}}}],["createnullsafevalidator(validator",{"_index":2846,"title":{},"body":{"classes/FormValidators.html":{}}}],["creates",{"_index":454,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":913,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["creation",{"_index":1845,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["criteria",{"_index":3593,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["css",{"_index":76,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["cssselector",{"_index":581,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["csv",{"_index":1754,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/functions.html":{}}}],["csvexporterservice",{"_index":1742,"title":{"injectables/CsvExporterService.html":{}},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{}}}],["csvfile",{"_index":1768,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["current",{"_index":990,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["currentdirective",{"_index":1075,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["currenthost",{"_index":1079,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":439,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["currentoperator",{"_index":2398,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["currentselection.map((selected",{"_index":1564,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["currentvalue",{"_index":1972,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["custom",{"_index":65,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["customfiql",{"_index":2297,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"miscellaneous/functions.html":{}}}],["cycle",{"_index":2791,"title":{},"body":{"components/FormInputComponent.html":{}}}],["danger",{"_index":2354,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["data",{"_index":60,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"miscellaneous/functions.html":{}}}],["data.id",{"_index":3005,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.order",{"_index":2996,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.provider",{"_index":3009,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.section",{"_index":3010,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["data.ts",{"_index":3178,"title":{},"body":{"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dataexportercomponent",{"_index":333,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDataExporterModule.html":{},"coverage.html":{},"overview.html":{}}}],["dataexporterwidgetobject",{"_index":2005,"title":{"classes/DataExporterWidgetObject.html":{}},"body":{"classes/DataExporterWidgetObject.html":{},"coverage.html":{}}}],["dataexportrequest",{"_index":1933,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dataexportrequestevent",{"_index":1836,"title":{"interfaces/DataExportRequestEvent.html":{}},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{}}}],["dataexportrequestevent.exportdata",{"_index":1934,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["datagrid",{"_index":905,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["datagrid'},{'name",{"_index":336,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["datagrid.component",{"_index":3692,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["datagrid.component.html",{"_index":1341,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagrid.component.scss",{"_index":1342,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagrid.wo",{"_index":786,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts",{"_index":3700,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{}}}],["datagrid.wo.ts:14",{"_index":3702,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts:19",{"_index":3704,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid.wo.ts:26",{"_index":3706,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid/datagrid.component",{"_index":3707,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["datagrid/datagrid.module",{"_index":3676,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["datagrid/mock",{"_index":2526,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["datagridcomponent",{"_index":335,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{},"overview.html":{}}}],["datagridcomponent.gridrefresh",{"_index":1325,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridfilter",{"_index":1257,"title":{"classes/DatagridFilter.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridfilter#config",{"_index":2121,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["datagridfilter.queryfield",{"_index":1655,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridfilter:107",{"_index":2161,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:112",{"_index":2155,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:117",{"_index":2162,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:122",{"_index":2157,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:127",{"_index":2158,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:132",{"_index":2159,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:137",{"_index":2154,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:59",{"_index":2168,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:60",{"_index":2169,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:71",{"_index":2166,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:72",{"_index":2143,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:87",{"_index":2167,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:89",{"_index":2160,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridfilter:99",{"_index":2156,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["datagridmultiselectfilter",{"_index":2205,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridmultiselectfilter(options",{"_index":4015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridmultiselectfiltercomponent",{"_index":337,"title":{"components/DatagridMultiSelectFilterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridmultiselectfiltercomponent.options",{"_index":2177,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["datagridmultiselectfilterconfig",{"_index":2149,"title":{"interfaces/DatagridMultiSelectFilterConfig.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["datagridnumericfilter",{"_index":2274,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridnumericfilter(value",{"_index":4016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridnumericfiltercomponent",{"_index":341,"title":{"components/DatagridNumericFilterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridnumericfiltercomponent.close",{"_index":2767,"title":{},"body":{"components/FormInputComponent.html":{}}}],["datagridnumericfilterconfig",{"_index":2224,"title":{"interfaces/DatagridNumericFilterConfig.html":{}},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["datagridnumericfiltervalue",{"_index":2226,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"miscellaneous/typealiases.html":{}}}],["datagridselectfilter",{"_index":2309,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridselectfilter(options",{"_index":4017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridselectfiltercomponent",{"_index":343,"title":{"components/DatagridSelectFilterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridselectfiltercomponent#getvalue",{"_index":2296,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["datagridselectfilterconfig",{"_index":2293,"title":{"interfaces/DatagridSelectFilterConfig.html":{}},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"coverage.html":{}}}],["datagridselection",{"_index":1418,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["datagridstringfilter",{"_index":2338,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["datagridstringfilter(wildcardposition",{"_index":4018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["datagridstringfiltercomponent",{"_index":345,"title":{"components/DatagridStringFilterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["datagridstringfilterconfig",{"_index":2326,"title":{"interfaces/DatagridStringFilterConfig.html":{}},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"coverage.html":{}}}],["datarow",{"_index":1534,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["date",{"_index":1820,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/FilterBuilder.html":{},"components/FormInputComponent.html":{},"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["date().gettime",{"_index":2980,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["date(getformatteddatevalue(value)).toisostring",{"_index":2797,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date(value",{"_index":2799,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date.getfullyear",{"_index":2800,"title":{},"body":{"components/FormInputComponent.html":{}}}],["date.toisostring",{"_index":2495,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["date_object_class",{"_index":3203,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datepipe",{"_index":3198,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["datepipe(this.localeid).transform(returnvalue",{"_index":3216,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["datetime",{"_index":2733,"title":{},"body":{"components/FormInputComponent.html":{}}}],["deactivate",{"_index":1217,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["debounce_time_for_grid_filter_changes",{"_index":2104,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["debouncetime",{"_index":2099,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["debugelement",{"_index":574,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["debugelements",{"_index":2580,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["decimal",{"_index":1677,"title":{},"body":{"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{}}}],["decimalpipe",{"_index":3199,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["decimalpipe(this.localeid).transform(returnvalue",{"_index":3215,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["decisions",{"_index":645,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["declarations",{"_index":2531,"title":{},"body":{"components/FilterTestHostComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":2230,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/FormInputComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["deep",{"_index":2276,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{}}}],["default",{"_index":129,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["default_pagination_translation_key",{"_index":1275,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_size",{"_index":1259,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_size_options",{"_index":1261,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":134,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["defaultspinnersize",{"_index":3019,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["define",{"_index":3613,"title":{},"body":{"classes/Unit.html":{}}}],["defined",{"_index":192,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["defines",{"_index":1639,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["definition",{"_index":1536,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["defualts",{"_index":1379,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["delay",{"_index":1041,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["delayed",{"_index":2102,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["depend",{"_index":219,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["dependencies",{"_index":3310,"title":{"dependencies.html":{}},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependends",{"_index":841,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["dependent",{"_index":46,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["depends",{"_index":854,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"index.html":{}}}],["derived",{"_index":2086,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["descibes",{"_index":845,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["described",{"_index":3759,"title":{},"body":{"contributing.html":{}}}],["describes",{"_index":141,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["describing",{"_index":2974,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["descriptive",{"_index":3790,"title":{},"body":{"contributing.html":{}}}],["deselect",{"_index":1882,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["desired",{"_index":1407,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["destroy",{"_index":1107,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["destroyable",{"_index":3607,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["destroyable.ngondestroy",{"_index":2941,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["destroyed",{"_index":2935,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["detaching",{"_index":1725,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["detachrenderer",{"_index":1705,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["detail",{"_index":1313,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["detailcomponent",{"_index":1434,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["detailpane",{"_index":1319,"title":{"interfaces/DetailPane.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["detailpaneconfig",{"_index":1317,"title":{"interfaces/DetailPaneConfig.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["detailrowconfig",{"_index":1314,"title":{"interfaces/DetailRowConfig.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["details",{"_index":163,"title":{},"body":{"components/ActionMenuComponent.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/MockRecord.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["detectchanges",{"_index":552,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["detects",{"_index":577,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["determine",{"_index":815,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["determining",{"_index":114,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["dev",{"_index":4039,"title":{},"body":{"index.html":{}}}],["developer",{"_index":3336,"title":{},"body":{"interfaces/SearchSection.html":{},"contributing.html":{}}}],["developers",{"_index":4031,"title":{},"body":{"index.html":{}}}],["developing",{"_index":1337,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["dg",{"_index":338,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/variables.html":{}}}],["dialog",{"_index":1870,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dialogheader",{"_index":1886,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dialogs",{"_index":3015,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["didn't",{"_index":1997,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["different",{"_index":833,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/Unit.html":{},"miscellaneous/enumerations.html":{}}}],["differentiate",{"_index":1239,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["differentiating",{"_index":1642,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["differently",{"_index":3287,"title":{},"body":{"classes/Percent.html":{}}}],["digits",{"_index":1670,"title":{},"body":{"classes/CommonUtil.html":{},"injectables/UnitFormatter.html":{}}}],["dimensions",{"_index":1153,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["direct",{"_index":2652,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["direction",{"_index":1149,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["directive",{"_index":322,"title":{"directives/ComponentRendererOutletDirective.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["directives",{"_index":368,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["directives/component",{"_index":3693,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":4056,"title":{},"body":{"index.html":{}}}],["directly",{"_index":2581,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["director",{"_index":4021,"title":{},"body":{"index.html":{}}}],["directory",{"_index":4061,"title":{},"body":{"index.html":{}}}],["disable",{"_index":234,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["disabled",{"_index":96,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["disabled(disabled",{"_index":3522,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["disables",{"_index":1281,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["disabling",{"_index":204,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["disjunct",{"_index":2458,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["dismissed",{"_index":2349,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["dismisses",{"_index":2361,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["display",{"_index":34,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["displayability",{"_index":839,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["displaycombounit",{"_index":3168,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["displayed",{"_index":30,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/SpotlightSearchResult.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["displaying",{"_index":62,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["displayname",{"_index":760,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["displays",{"_index":1183,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/ErrorBannerComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["displaytext",{"_index":3596,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{}}}],["displayunit",{"_index":3169,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["displayvalue",{"_index":3159,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["dist",{"_index":4060,"title":{},"body":{"index.html":{}}}],["div",{"_index":3548,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["div2",{"_index":3550,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["dividing",{"_index":1630,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["docs",{"_index":3350,"title":{},"body":{"interfaces/SearchSection.html":{},"dependencies.html":{},"index.html":{}}}],["document",{"_index":2633,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["document.body.appendchild(link",{"_index":1795,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.body.appendchild(tip.container",{"_index":1101,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.body.removechild(link",{"_index":1797,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.body.removechild(tip.container",{"_index":1108,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.createelement('a",{"_index":1789,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["document.createelement('div",{"_index":1092,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["document.queryselector('.tooltip.vcd",{"_index":3544,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["document.queryselectorall('.tooltip.vcd",{"_index":3539,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["documentation",{"_index":3845,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":3783,"title":{},"body":{"contributing.html":{}}}],["doesn't",{"_index":3090,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["dom",{"_index":153,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":887,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"directives/ShowClippedTextDirective.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["done",{"_index":2643,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["dosearch",{"_index":3383,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["dot",{"_index":882,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["double",{"_index":1822,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["doubled",{"_index":1823,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["down",{"_index":3106,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["download",{"_index":1767,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloadcsvfile",{"_index":1748,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["downloadcsvfile(csvfile",{"_index":1763,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["downloaddata(data",{"_index":1990,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloaded",{"_index":1769,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloading",{"_index":1917,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["downloadingmessage",{"_index":1918,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["dr",{"_index":1271,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["drop",{"_index":3105,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["dropdown",{"_index":140,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["due",{"_index":1362,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["duplicate",{"_index":2585,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/typealiases.html":{}}}],["duplication",{"_index":2573,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["during",{"_index":1455,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["dynamic",{"_index":1694,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"dependencies.html":{}}}],["dynamically",{"_index":1682,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["e",{"_index":1170,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/CommonUtil.html":{},"directives/ShowClippedTextDirective.html":{}}}],["e.g",{"_index":2080,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["e2e",{"_index":4065,"title":{},"body":{"index.html":{}}}],["each",{"_index":1016,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["earlier",{"_index":3828,"title":{},"body":{"contributing.html":{}}}],["edit",{"_index":1034,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["edited",{"_index":1759,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["editing",{"_index":1036,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["el",{"_index":601,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["el.addeventlistener('mouseenter",{"_index":1174,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.addeventlistener('mouseleave",{"_index":1175,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.getboundingclientrect",{"_index":1132,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["el.innerhtml",{"_index":1148,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["el.nativeelement.textcontent.trim",{"_index":2640,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["el.removeeventlistener('mouseenter",{"_index":1177,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["el.removeeventlistener('mouseleave",{"_index":1178,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["element",{"_index":321,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["element's",{"_index":1227,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormInputComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["element.innerhtml",{"_index":3285,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["elementref",{"_index":1044,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["elements",{"_index":598,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["ellipsis",{"_index":1209,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["emission",{"_index":2074,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["emits",{"_index":1421,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["emitted",{"_index":1324,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["emitting",{"_index":2103,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":411,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["emptycolumnplaceholder",{"_index":895,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["emptygridplaceholder",{"_index":1448,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["encoded",{"_index":1810,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["encodes",{"_index":1774,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["encodevalue",{"_index":3868,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encodevalue(cell",{"_index":1806,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["encodevalue(cellvalue",{"_index":1817,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["encourage",{"_index":2582,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["end",{"_index":2321,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/SearchSection.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["enforce",{"_index":643,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["ensure",{"_index":3406,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["ensurefirstsectionisloaded",{"_index":3400,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["enter",{"_index":616,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["enterclicked",{"_index":2744,"title":{},"body":{"components/FormInputComponent.html":{}}}],["entire",{"_index":583,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["entities",{"_index":208,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["entity",{"_index":39,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["entityurn",{"_index":187,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["entrycomponents",{"_index":3660,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["enum",{"_index":27,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":3997,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":4128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eq",{"_index":2465,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":2303,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["equals",{"_index":3151,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["equalto",{"_index":2402,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["equalto(value",{"_index":2440,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["equivalent",{"_index":3218,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["error",{"_index":347,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"modules/VcdErrorBannerModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error('could",{"_index":3574,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["error('featured",{"_index":1396,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["error('query",{"_index":2126,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["error('the",{"_index":2302,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["error('unsubscribing",{"_index":2949,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["error(`a",{"_index":2192,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["error(`did",{"_index":2680,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error(`expected",{"_index":2681,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["error/error",{"_index":3661,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["errorbannercomponent",{"_index":346,"title":{"components/ErrorBannerComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdErrorBannerModule.html":{},"coverage.html":{},"overview.html":{}}}],["errorkeys",{"_index":669,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["errorlabels",{"_index":664,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["errormessage",{"_index":2341,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errormessage(val",{"_index":2371,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errormessagechange",{"_index":2350,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["errors",{"_index":438,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/BaseFormControl.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["errortext",{"_index":475,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["escape",{"_index":617,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["escapeclicked",{"_index":2745,"title":{},"body":{"components/FormInputComponent.html":{}}}],["etc",{"_index":619,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["evaluator",{"_index":3963,"title":{},"body":{"dependencies.html":{}}}],["event",{"_index":586,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["event('input",{"_index":2626,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["event.preventdefault",{"_index":3376,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["eventemitter",{"_index":1245,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["eventemitter(false",{"_index":2779,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/SearchSection.html":{}}}],["eventhandler",{"_index":1169,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/typealiases.html":{}}}],["events",{"_index":459,"title":{},"body":{"classes/ActivityReporter.html":{},"components/ErrorBannerComponent.html":{}}}],["everywhere",{"_index":3330,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["ex",{"_index":1001,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["examine",{"_index":3411,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["example",{"_index":396,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["examples",{"_index":2130,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["excluding",{"_index":1560,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["execute",{"_index":237,"title":{},"body":{"components/ActionMenuComponent.html":{},"index.html":{}}}],["executed",{"_index":102,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["executing",{"_index":2875,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["exist",{"_index":2194,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["existing",{"_index":1555,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{}}}],["expand",{"_index":1439,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["expanded",{"_index":1436,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["experience",{"_index":3338,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["explain",{"_index":3788,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":26,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["export.csv",{"_index":1885,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportalltext",{"_index":1892,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportcolumn",{"_index":1848,"title":{"interfaces/ExportColumn.html":{}},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{}}}],["exportdata",{"_index":1840,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exportdata(records",{"_index":1980,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exported",{"_index":1799,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/functions.html":{}}}],["exporter",{"_index":1873,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["exporter'},{'name",{"_index":334,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["exporter.component",{"_index":2036,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"modules/VcdDataExporterModule.html":{}}}],["exporter.component.html",{"_index":1874,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.component.scss",{"_index":1875,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.component.ts",{"_index":1838,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["exporter.module",{"_index":3675,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["exporter.module.ts",{"_index":3683,"title":{},"body":{"modules/VcdDataExporterModule.html":{}}}],["exporter.service",{"_index":1856,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.service.ts",{"_index":1746,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exporter.service.ts:21",{"_index":1752,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.service.ts:29",{"_index":1771,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.service.ts:38",{"_index":1765,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["exporter.title",{"_index":1888,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporter.wo.ts",{"_index":2006,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"coverage.html":{}}}],["exporter.wo.ts:13",{"_index":2015,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:18",{"_index":2026,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:25",{"_index":2030,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:32",{"_index":2034,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:40",{"_index":2024,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:48",{"_index":2018,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:55",{"_index":2016,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:62",{"_index":2022,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter.wo.ts:69",{"_index":2019,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["exporter/csv",{"_index":1745,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exporter/data",{"_index":1837,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["exports",{"_index":3312,"title":{},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["exportstage",{"_index":1941,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["exporttext",{"_index":1896,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["expose",{"_index":2578,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["exposed",{"_index":1294,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["expresses",{"_index":433,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["expression",{"_index":2416,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["expressionchangedafterithasbeencheckederror",{"_index":1663,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["expressions",{"_index":2388,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["extended",{"_index":2048,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["extends",{"_index":503,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["extension",{"_index":2597,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["extra",{"_index":1641,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["extract",{"_index":3109,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["extracting",{"_index":3191,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["extremely",{"_index":4070,"title":{},"body":{"index.html":{}}}],["fa",{"_index":4090,"title":{},"body":{"index.html":{}}}],["fails",{"_index":3818,"title":{},"body":{"contributing.html":{}}}],["failure",{"_index":421,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["false",{"_index":99,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["falsy",{"_index":2292,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["fast",{"_index":3802,"title":{},"body":{"contributing.html":{}}}],["fb",{"_index":2285,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"classes/FilterBuilder.html":{},"directives/MinMaxValidator.html":{}}}],["fb.result",{"_index":2469,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["feature",{"_index":3811,"title":{},"body":{"contributing.html":{}}}],["featurebe",{"_index":3831,"title":{},"body":{"contributing.html":{}}}],["featured",{"_index":118,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredactions",{"_index":296,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["featuredactions.concat(this.getflattenedactionlist(action.children",{"_index":300,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["featuredactions.push(action",{"_index":301,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["featuredbutton",{"_index":1399,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredbutton.class",{"_index":1398,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredbuttonclass",{"_index":1391,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredbuttons",{"_index":1447,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featuredcount",{"_index":128,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featureif",{"_index":3827,"title":{},"body":{"contributing.html":{}}}],["features",{"_index":1323,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["featureupdating",{"_index":3816,"title":{},"body":{"contributing.html":{}}}],["female",{"_index":3187,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":1839,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"contributing.html":{}}}],["fetched",{"_index":1843,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fetching",{"_index":1355,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["field",{"_index":679,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["field:after",{"_index":2808,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["fieldcolumnrendererspec",{"_index":1240,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fieldname",{"_index":1241,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fieldrenderer",{"_index":1242,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fields",{"_index":1757,"title":{},"body":{"injectables/CsvExporterService.html":{},"components/FormInputComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["filed",{"_index":1654,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filename",{"_index":1764,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["files",{"_index":2593,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["fills",{"_index":1409,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filter",{"_index":825,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["filter'},{'name",{"_index":340,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["filter(button",{"_index":1499,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filter(formcontrol",{"_index":2198,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filter.component",{"_index":3695,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["filter.component.html",{"_index":2141,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filter.component.scss",{"_index":2209,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filter.component.ts",{"_index":2134,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["filter.component.ts:101",{"_index":2145,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:102",{"_index":2289,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:105",{"_index":2153,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:115",{"_index":2146,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:120",{"_index":2222,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:122",{"_index":2147,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:128",{"_index":2220,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:129",{"_index":2148,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:132",{"_index":2223,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:32",{"_index":2319,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:36",{"_index":2312,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:40",{"_index":2234,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:42",{"_index":2232,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:43",{"_index":2236,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:48",{"_index":2229,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:49",{"_index":2219,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:55",{"_index":2238,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:57",{"_index":2320,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:58",{"_index":2291,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:62",{"_index":2228,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:63",{"_index":2218,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:64",{"_index":2316,"title":{},"body":{"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:67",{"_index":2286,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:69",{"_index":2142,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:70",{"_index":2241,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:73",{"_index":2221,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:76",{"_index":2287,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["filter.component.ts:77",{"_index":2164,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:78",{"_index":2217,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:79",{"_index":2144,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:80",{"_index":2290,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:84",{"_index":2225,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["filter.component.ts:87",{"_index":2150,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{}}}],["filter.component.ts:89",{"_index":2227,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{}}}],["filter.component.ts:98",{"_index":2288,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{}}}],["filter.getvalue",{"_index":1584,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filter.ts",{"_index":2047,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["filter.ts:107",{"_index":2084,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:112",{"_index":2071,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:117",{"_index":2090,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:122",{"_index":2075,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:127",{"_index":2078,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:132",{"_index":2081,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:137",{"_index":2069,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:147",{"_index":2097,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:59",{"_index":2068,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:60",{"_index":2061,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:71",{"_index":2063,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:72",{"_index":2092,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:80",{"_index":2094,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:87",{"_index":2066,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:89",{"_index":2082,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter.ts:99",{"_index":2073,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["filter_selector",{"_index":3928,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filterable/sortable",{"_index":875,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["filterbuilder",{"_index":2172,"title":{"classes/FilterBuilder.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filterbuilder().any(...selectedfilters).getstring",{"_index":2202,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filterbuilder().is('').and(...builders",{"_index":2500,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder().is(this.queryfield",{"_index":2266,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filterbuilder().is(this.queryfield).equalto(selectedoption",{"_index":2201,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filterbuilder().is(this.result).condition(operators.ge",{"_index":2498,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder().is(this.result).condition(operators.le",{"_index":2499,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder(this",{"_index":2468,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["filterbuilder.betweennumbers([from",{"_index":2271,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filterbuilder.equalto(value).getstring",{"_index":2307,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filterbuilder.greaterthan(from).getstring",{"_index":2269,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filterbuilder.lessthan(to).getstring",{"_index":2270,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["filtercolumn",{"_index":2508,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["filtercomponentrendererspec",{"_index":2135,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filtercomponentrendererspec(componentrendererspec",{"_index":2133,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["filtercomponentrendererspec({type",{"_index":2129,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["filterconfig",{"_index":822,"title":{"interfaces/FilterConfig.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["filtercontainer",{"_index":2062,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["filtercontainer.setfilter(this",{"_index":2108,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["filtered",{"_index":2106,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["filtering",{"_index":863,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filtering/sorting/paging",{"_index":1456,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["filterrendererspec",{"_index":823,"title":{"interfaces/FilterRendererSpec.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filters",{"_index":1331,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filters/datagrid",{"_index":824,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{}}}],["filterselect",{"_index":2298,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["filtertesthostcomponent",{"_index":349,"title":{"components/FilterTestHostComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filtertesthostcomponent.filtercolumn",{"_index":2517,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["filtertext",{"_index":2327,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["filtertype",{"_index":2516,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["find",{"_index":1541,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["find(item",{"_index":3276,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["find(params",{"_index":3732,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["find>(params",{"_index":2675,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findablewidget",{"_index":2642,"title":{"interfaces/FindableWidget.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["findbestunit",{"_index":944,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["findbestunit(value",{"_index":974,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["findcolumnindex(col",{"_index":1481,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["findelement",{"_index":553,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findelement(selector",{"_index":589,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findelements",{"_index":554,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["findelements(selector",{"_index":595,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["finder",{"_index":2512,"title":{},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["finder.detectchanges",{"_index":2553,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["finder.find(clrdatagridwidgetobject",{"_index":2548,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["finder.hostcomponent.setfilter(filtertype",{"_index":2549,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["findparams",{"_index":2554,"title":{"interfaces/FindParams.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["findparams).woconstructor",{"_index":2683,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["finds",{"_index":591,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findwidgets",{"_index":2663,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["findwidgets(params",{"_index":3734,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["finished",{"_index":1847,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fiql",{"_index":1328,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["fired",{"_index":101,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/variables.html":{}}}],["fires",{"_index":1930,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["firetiptransitionendfortests",{"_index":3912,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["first",{"_index":35,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["first.buildpartial",{"_index":2481,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["first.clear",{"_index":2487,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["firstitem",{"_index":1334,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["fix",{"_index":2775,"title":{},"body":{"components/FormInputComponent.html":{}}}],["fixes",{"_index":3796,"title":{},"body":{"contributing.html":{}}}],["fixture",{"_index":2561,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture's",{"_index":2560,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture.componentinstance",{"_index":563,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixture.debugelement",{"_index":2608,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["fixup",{"_index":3829,"title":{},"body":{"contributing.html":{}}}],["flat",{"_index":3417,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["flattenedfeaturedactionlist",{"_index":302,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["flex",{"_index":2816,"title":{},"body":{"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["float",{"_index":1675,"title":{},"body":{"classes/CommonUtil.html":{}}}],["floating",{"_index":1673,"title":{},"body":{"classes/CommonUtil.html":{}}}],["flow",{"_index":3764,"title":{},"body":{"contributing.html":{}}}],["focused",{"_index":4126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folder",{"_index":4071,"title":{},"body":{"index.html":{}}}],["follow",{"_index":3835,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":1208,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["font",{"_index":775,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["footer",{"_index":1298,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["footer').offsetheight",{"_index":1621,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["footerheight",{"_index":1619,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["force",{"_index":3814,"title":{},"body":{"contributing.html":{}}}],["forcedropdownopen",{"_index":1929,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["fork",{"_index":3777,"title":{},"body":{"contributing.html":{}}}],["form",{"_index":351,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["form.scss",{"_index":2778,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["form.scss,./form",{"_index":2735,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["form/form.module",{"_index":3677,"title":{},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["format",{"_index":1860,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"classes/Percent.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["format(1000",{"_index":3639,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["format(value",{"_index":3636,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formats",{"_index":3290,"title":{},"body":{"classes/Percent.html":{}}}],["formatted",{"_index":1329,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{}}}],["formatter",{"_index":3078,"title":{},"body":{"directives/MinMaxValidator.html":{},"modules/VcdFormModule.html":{}}}],["formatter.ts",{"_index":3625,"title":{},"body":{"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["formatter.ts:15",{"_index":3628,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatter.ts:29",{"_index":3638,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatter.ts:46",{"_index":3630,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["formatting",{"_index":2308,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["formbuilder",{"_index":2243,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["formcheckboxcomponent",{"_index":350,"title":{"components/FormCheckboxComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formcontrol",{"_index":667,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["formcontrol(false",{"_index":2188,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["formcontrol(null",{"_index":2256,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formcontrol(true",{"_index":1944,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["formcontrol.value",{"_index":2729,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["formcontrol.value:min.tostring():max",{"_index":2807,"title":{},"body":{"components/FormInputComponent.html":{}}}],["formcontrolname",{"_index":675,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["formcontrolnamedirective",{"_index":655,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["formfields",{"_index":2245,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"miscellaneous/enumerations.html":{}}}],["formfields.from",{"_index":2255,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formfields.to",{"_index":2257,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["formgroup",{"_index":1852,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["formgroup(controls",{"_index":1976,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["forminputcomponent",{"_index":353,"title":{"components/FormInputComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formselectcomponent",{"_index":355,"title":{"components/FormSelectComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["formsmodule",{"_index":3584,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{}}}],["formvalidators",{"_index":2840,"title":{"classes/FormValidators.html":{}},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{},"coverage.html":{}}}],["formvalidators.createnullsafevalidator((control",{"_index":2863,"title":{},"body":{"classes/FormValidators.html":{}}}],["formvalidators.isnumberinrange",{"_index":3116,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["formvalidators.isnumberinrange(this.min",{"_index":3113,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["forward",{"_index":3803,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":604,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["four",{"_index":4024,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":1902,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlyfieldscontrol",{"_index":1959,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynames",{"_index":1863,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["friendlynamescheckboxlabel",{"_index":1904,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynameshint",{"_index":1909,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["friendlynamesinfomessage",{"_index":1906,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["frmctrl",{"_index":2193,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["frominput",{"_index":2212,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["full",{"_index":1184,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{}}}],["function",{"_index":52,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":1368,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["functionrenderer",{"_index":836,"title":{"interfaces/FunctionRenderer.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["functionrendererpipe",{"_index":2871,"title":{"pipes/FunctionRendererPipe.html":{}},"body":{"pipes/FunctionRendererPipe.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":2537,"title":{"miscellaneous/functions.html":{}},"body":{"components/FilterTestHostComponent.html":{},"pipes/FunctionRendererPipe.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":4033,"title":{},"body":{"index.html":{}}}],["gave",{"_index":426,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["gb",{"_index":932,"title":{},"body":{"classes/Bytes.html":{},"injectables/UnitFormatter.html":{}}}],["ge",{"_index":2462,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["gender",{"_index":3180,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":393,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/IdGenerator.html":{},"interfaces/ObjectAndResponse.html":{},"contributing.html":{},"index.html":{}}}],["generated",{"_index":678,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"index.html":{}}}],["generates",{"_index":419,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/IdGenerator.html":{},"interfaces/ObjectAndResponse.html":{},"index.html":{}}}],["generator",{"_index":729,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["generator.ts",{"_index":2955,"title":{},"body":{"classes/IdGenerator.html":{},"coverage.html":{}}}],["generator.ts:10",{"_index":2960,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator.ts:15",{"_index":2961,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator.ts:17",{"_index":2958,"title":{},"body":{"classes/IdGenerator.html":{}}}],["generator/id",{"_index":728,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["generic",{"_index":805,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["generics",{"_index":925,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["getactiondisplayconfig",{"_index":256,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getactions",{"_index":253,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getallunittypes",{"_index":941,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/ThousandsUnit.html":{}}}],["getavailableactions",{"_index":179,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getavailableactions(actions",{"_index":211,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getbasevalue",{"_index":945,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getbasevalue(value",{"_index":991,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getboldtext(row",{"_index":798,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["getclrdatagrid",{"_index":3705,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["getcolumnbubbles",{"_index":2029,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getcolumncheckboxes",{"_index":2033,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getcolumnsconfig(columns",{"_index":1645,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getconfig",{"_index":2093,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["getcontextualactions",{"_index":180,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getcontextualactions(selection",{"_index":217,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getcontextualfeaturedactions",{"_index":181,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getcontextualfeaturedactions(selection",{"_index":223,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getdebouncetimems",{"_index":2057,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["getdetailpanerenderspec(record",{"_index":1532,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getdetailrowrenderspec(record",{"_index":1530,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getdisplaymode(button",{"_index":1515,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getdisplaynameforfield(fieldname",{"_index":2003,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["getdisplayvalue",{"_index":3243,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["geterrorkeys",{"_index":722,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["geterrortext",{"_index":627,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["getfeaturedbuttons(records",{"_index":1497,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getflattenedactionlist",{"_index":182,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getflattenedactionlist(actions",{"_index":230,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getformatteddatevalue",{"_index":3898,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getformatteddatevalue(value",{"_index":2788,"title":{},"body":{"components/FormInputComponent.html":{},"miscellaneous/functions.html":{}}}],["getformcontrol",{"_index":717,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getgridheader",{"_index":3703,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["getischeckbox",{"_index":2722,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["getisloopingprogressbar",{"_index":2025,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["getistooltipvisible",{"_index":3502,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["getisunitdropdowndisplayed",{"_index":3258,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getloadingtext",{"_index":631,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["getmaxfeaturedbuttonsonrow",{"_index":1505,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getmultiplier",{"_index":946,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getnativeelement",{"_index":3221,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getnativeelement(cssselector",{"_index":3234,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getnodetext",{"_index":555,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["getnodetext(el",{"_index":599,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["getoutputvalue",{"_index":947,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["getoutputvalue(value",{"_index":994,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getpagesize",{"_index":1603,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getpagesizeoptions",{"_index":1606,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getpaginationtranslation(paginationdata",{"_index":1598,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["getqueryfield",{"_index":2096,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["getreadonlytext",{"_index":3245,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getregisteredproviders",{"_index":3007,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["getrunning",{"_index":625,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["gets",{"_index":115,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"contributing.html":{}}}],["getselectedoption",{"_index":2828,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["getselectedunit",{"_index":3254,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getselectedunitdisplayvalue",{"_index":3256,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getshouldshowcontextualactions",{"_index":266,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getshowerrors",{"_index":720,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["getsingleunitdisplaytext",{"_index":3260,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getsize",{"_index":3045,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["getspinner",{"_index":3567,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["getstaticactions",{"_index":259,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getstaticfeaturedactions",{"_index":263,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["getstring",{"_index":2403,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["getsucesstext",{"_index":629,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["getter",{"_index":2962,"title":{},"body":{"classes/IdGenerator.html":{}}}],["gettext",{"_index":556,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["gettext(cssselector",{"_index":602,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["gettexts",{"_index":557,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["gettexts(cssselector",{"_index":607,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["getting",{"_index":2076,"title":{"contributing.html":{},"index.html":{}},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["gettooltip",{"_index":3514,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipcontent",{"_index":3512,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipcount",{"_index":3508,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipposition",{"_index":3506,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipsize",{"_index":3500,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltiptext",{"_index":3504,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["gettooltipvisibility",{"_index":3510,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["getunit",{"_index":2240,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["getunitformcontrol",{"_index":3252,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getunitname",{"_index":948,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getunitnametranslationkey",{"_index":942,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getunitoptions",{"_index":2237,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["getunlimitedformcontrol",{"_index":3248,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getvalue",{"_index":2058,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["getvalueformcontrol",{"_index":3250,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["getvaluewithunittranslationkey",{"_index":943,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["getwrapcharacter(inputposition",{"_index":2335,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["getwrapcharacter(position",{"_index":2332,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["gfm",{"_index":3839,"title":{},"body":{"contributing.html":{}}}],["ghpages",{"_index":3967,"title":{},"body":{"dependencies.html":{}}}],["ghz",{"_index":1002,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["git",{"_index":3809,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["git@github.com:vmware/vmware",{"_index":4095,"title":{},"body":{"index.html":{}}}],["github",{"_index":3833,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["given",{"_index":245,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["gives",{"_index":605,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":29,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["globalbutton",{"_index":840,"title":{"interfaces/GlobalButton.html":{}},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{}}}],["globalbuttons",{"_index":853,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["go",{"_index":1321,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["goes",{"_index":1320,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["going",{"_index":899,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["greater",{"_index":2431,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthan",{"_index":2404,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthan(value",{"_index":2444,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthanorequalto",{"_index":2405,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["greaterthanorequalto(value",{"_index":2446,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["grid",{"_index":806,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["grid's",{"_index":2541,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["grid.getfilter(filtertype",{"_index":2550,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["grid.parentnode.clientheight",{"_index":1615,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('.datagrid",{"_index":1617,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('.vcd",{"_index":1626,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grid.queryselector('clr",{"_index":1620,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridcolumn",{"_index":759,"title":{"interfaces/GridColumn.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["gridcolumn.filter",{"_index":2050,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["gridcolumn.filterrendererspec",{"_index":2132,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["gridcolumn.renderer",{"_index":919,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["gridcolumnhideable",{"_index":828,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["gridcolumnhideable.never",{"_index":1593,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["griddata",{"_index":2509,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["griddata(result",{"_index":1356,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["griddatafetchresult",{"_index":1284,"title":{"interfaces/GridDataFetchResult.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["gridheader",{"_index":3701,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["gridheight",{"_index":1614,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridrefresh",{"_index":1458,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["grids",{"_index":161,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["gridselectiontype",{"_index":1277,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["gridselectiontype.multi",{"_index":1548,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridselectiontype.none",{"_index":1441,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridselectiontype.single",{"_index":1539,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gridstate",{"_index":1327,"title":{"interfaces/GridState.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["gridstatechanged(state",{"_index":1576,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["gropued",{"_index":3345,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["group",{"_index":2813,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["group.hide",{"_index":2818,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["grouped",{"_index":119,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["groups",{"_index":1024,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["grow",{"_index":2817,"title":{},"body":{"components/FormInputComponent.html":{}}}],["gt",{"_index":2461,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["guidelines",{"_index":4100,"title":{},"body":{"index.html":{}}}],["h",{"_index":2649,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["handle",{"_index":2765,"title":{},"body":{"components/FormInputComponent.html":{}}}],["handled",{"_index":3286,"title":{},"body":{"classes/Percent.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["handleitem(item",{"_index":3428,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["handler",{"_index":67,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["handlerdata",{"_index":56,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["happen",{"_index":2923,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["happens",{"_index":4073,"title":{},"body":{"index.html":{}}}],["hascontextualbuttons",{"_index":1522,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hasdgstringfilter",{"_index":2543,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["hasfinder",{"_index":2688,"title":{"interfaces/HasFinder.html":{}},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["haspotentialinjection",{"_index":1749,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["haspotentialinjection(row",{"_index":1800,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["haspotentialinjection(rows",{"_index":1770,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["head",{"_index":4088,"title":{},"body":{"index.html":{}}}],["header",{"_index":862,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/VcdDatagridWidgetObject.html":{},"miscellaneous/variables.html":{}}}],["header').offsetheight",{"_index":1618,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["header.offsetheight",{"_index":1627,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["headerheight",{"_index":1616,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["heading",{"_index":867,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["headless",{"_index":4127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["height",{"_index":1138,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["height(height",{"_index":1410,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["heightcssvalue",{"_index":1412,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["help",{"_index":2131,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["helper.ts",{"_index":3460,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{}}}],["helper.ts:102",{"_index":3511,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:106",{"_index":3486,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:110",{"_index":3513,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:114",{"_index":3515,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:126",{"_index":3552,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:127",{"_index":3554,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:128",{"_index":3555,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:13",{"_index":3478,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:130",{"_index":3556,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:131",{"_index":3557,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:132",{"_index":3553,"title":{},"body":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["helper.ts:16",{"_index":3479,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:18",{"_index":3481,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:20",{"_index":3483,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:22",{"_index":3485,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:24",{"_index":3493,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:28",{"_index":3495,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:44",{"_index":3497,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:49",{"_index":3499,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:54",{"_index":3501,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:58",{"_index":3489,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:62",{"_index":3490,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:66",{"_index":3491,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:70",{"_index":3487,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:74",{"_index":3488,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:78",{"_index":3503,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:82",{"_index":3505,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:86",{"_index":3507,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helper.ts:98",{"_index":3509,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["helps",{"_index":915,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["hence",{"_index":3347,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["here",{"_index":1306,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["here;(created=lt=datetime,uptime=gt=3600000",{"_index":2397,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["hertz",{"_index":2882,"title":{"classes/Hertz.html":{}},"body":{"classes/Hertz.html":{},"coverage.html":{}}}],["hertz(1",{"_index":2888,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e12",{"_index":2894,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e3",{"_index":2890,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e6",{"_index":2892,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz(1e9",{"_index":2886,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.ghz",{"_index":2899,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.hz",{"_index":2896,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.khz",{"_index":2897,"title":{},"body":{"classes/Hertz.html":{}}}],["hertz.mhz",{"_index":2898,"title":{},"body":{"classes/Hertz.html":{}}}],["hidden",{"_index":100,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["hide",{"_index":832,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["hideable",{"_index":869,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["hidedelay",{"_index":3463,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hides",{"_index":3562,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["hidetimeout",{"_index":1072,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hidetooltip(delay",{"_index":1116,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hiding",{"_index":1071,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["hint",{"_index":1908,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["hintposition",{"_index":2740,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["hook",{"_index":2792,"title":{},"body":{"components/FormInputComponent.html":{}}}],["host",{"_index":1077,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["host(.site",{"_index":2839,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["hostbinding",{"_index":1246,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hostbinding('class.fill",{"_index":1416,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["hostcomponent",{"_index":2654,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["hostelement",{"_index":1199,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["hostposition",{"_index":3470,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["hostposition(quadrant",{"_index":3518,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hosttext",{"_index":3471,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["hosttext(text",{"_index":3524,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["hover",{"_index":1087,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["href",{"_index":1489,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["html",{"_index":320,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["htmlbaseelement",{"_index":2615,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmlelement",{"_index":1067,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["htmlelements",{"_index":2579,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmlinputelement",{"_index":2622,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["htmltextareaelement",{"_index":2623,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["http://localhost:4200",{"_index":4041,"title":{},"body":{"index.html":{}}}],["https://github.com/vmware/clarity/issues/2265",{"_index":1365,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["https://github.com/vmware/vmware",{"_index":4069,"title":{},"body":{"index.html":{}}}],["https://jira.eng.vmware.com/browse/vducc",{"_index":902,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/questions/59055154/typescript",{"_index":924,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["hz",{"_index":2883,"title":{},"body":{"classes/Hertz.html":{}}}],["i.e",{"_index":3387,"title":{},"body":{"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["i18n",{"_index":70,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["i18nmodule",{"_index":3587,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["icon",{"_index":117,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["icon_and_text",{"_index":4005,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["icons",{"_index":251,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["iconshape",{"_index":2694,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["id",{"_index":656,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["idcounter",{"_index":2956,"title":{},"body":{"classes/IdGenerator.html":{}}}],["identifier",{"_index":1488,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"interfaces/SortedColumn.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{}}}],["identifiers",{"_index":1857,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["identify",{"_index":884,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["idgenerator",{"_index":726,"title":{"classes/IdGenerator.html":{}},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["idgenerator#id",{"_index":2965,"title":{},"body":{"classes/IdGenerator.html":{}}}],["idgenerator('base",{"_index":734,"title":{},"body":{"classes/BaseFormControl.html":{},"miscellaneous/variables.html":{}}}],["idgenerator('vcd",{"_index":2180,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["idgenerator.generate",{"_index":737,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["idgenerator.idcounter",{"_index":2964,"title":{},"body":{"classes/IdGenerator.html":{}}}],["ids",{"_index":2178,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"classes/IdGenerator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["ie",{"_index":1786,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["ignore",{"_index":2635,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["ignored",{"_index":2070,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["ime",{"_index":2773,"title":{},"body":{"components/FormInputComponent.html":{}}}],["immediately",{"_index":579,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implement",{"_index":1031,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implementation",{"_index":2565,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implementations",{"_index":2594,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["implemented",{"_index":1681,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["implements",{"_index":652,"title":{},"body":{"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{}}}],["implies",{"_index":1032,"title":{},"body":{"interfaces/CanBeReadOnly.html":{}}}],["import",{"_index":270,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["imports",{"_index":2530,"title":{},"body":{"components/FilterTestHostComponent.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["inactive",{"_index":812,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["inactivebuttondisplaymode",{"_index":810,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["inactivebuttondisplaymode.disable",{"_index":1386,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["inactivedisplaymode",{"_index":807,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["inc",{"_index":2377,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["include",{"_index":3060,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["included",{"_index":2433,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["including",{"_index":4050,"title":{},"body":{"index.html":{}}}],["indefinite",{"_index":2027,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["indeterminate",{"_index":1866,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexofsubscription",{"_index":2947,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["indicate",{"_index":1849,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["indicates",{"_index":95,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["indicating",{"_index":1865,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"contributing.html":{}}}],["indicator",{"_index":525,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["indicator'},{'name",{"_index":359,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["indicator.component",{"_index":3728,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{}}}],["indicator.component.html",{"_index":3017,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.scss",{"_index":3016,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts",{"_index":3012,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indicator.component.ts:27",{"_index":3044,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:38",{"_index":3030,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:43",{"_index":3022,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:49",{"_index":3024,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:55",{"_index":3023,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:62",{"_index":3027,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.component.ts:73",{"_index":3046,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["indicator.module",{"_index":3664,"title":{},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{}}}],["indicator.module.ts",{"_index":3727,"title":{},"body":{"modules/VcdLoadingIndicatorModule.html":{}}}],["indicators",{"_index":1291,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["indicatortype",{"_index":1432,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["infer",{"_index":926,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["inference",{"_index":922,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["information",{"_index":792,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["inheritdoc",{"_index":2122,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["inherited",{"_index":526,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["initial",{"_index":681,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["initialize",{"_index":2072,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["initializing",{"_index":1688,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["initially",{"_index":2107,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["initialvalue",{"_index":657,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["initiate",{"_index":1844,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["inject",{"_index":536,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"pipes/NestedPropertyPipe.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["inject(activitypromiseresolver",{"_index":538,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["injectable",{"_index":1741,"title":{"injectables/CsvExporterService.html":{},"injectables/SpotlightSearchService.html":{},"injectables/UnitFormatter.html":{}},"body":{"injectables/CsvExporterService.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["injectables",{"_index":1743,"title":{},"body":{"injectables/CsvExporterService.html":{},"injectables/SpotlightSearchService.html":{},"injectables/UnitFormatter.html":{},"overview.html":{}}}],["injection",{"_index":1762,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["inline",{"_index":139,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"miscellaneous/enumerations.html":{}}}],["inner",{"_index":1068,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["innerheight",{"_index":1157,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["innervalue",{"_index":1818,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["innervalue.replace(/\"/g",{"_index":1824,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["innerwidth",{"_index":1156,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["input",{"_index":107,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["input'},{'name",{"_index":354,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["input('vcdshowclippedtext",{"_index":1187,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["input.component",{"_index":3264,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/VcdFormModule.html":{}}}],["input.component.html",{"_index":2737,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["input.component.scss",{"_index":2736,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["input.component.ts",{"_index":2731,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["input.component.ts:104",{"_index":2771,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:121",{"_index":2769,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:127",{"_index":2768,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:38",{"_index":3074,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.component.ts:39",{"_index":3073,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.component.ts:40",{"_index":2760,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["input.component.ts:46",{"_index":2758,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:52",{"_index":2751,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:57",{"_index":2762,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:62",{"_index":2761,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:67",{"_index":2753,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:72",{"_index":2749,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:77",{"_index":2747,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:82",{"_index":2777,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:88",{"_index":2763,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.component.ts:93",{"_index":2746,"title":{},"body":{"components/FormInputComponent.html":{}}}],["input.disable",{"_index":3126,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.enable",{"_index":3128,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input.widget",{"_index":3220,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"coverage.html":{}}}],["input/form",{"_index":2730,"title":{},"body":{"components/FormInputComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["input/number",{"_index":3067,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["input[max",{"_index":3071,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["input[max]'},{'name",{"_index":373,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["input[min],vcd",{"_index":372,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["inputchanged",{"_index":2739,"title":{},"body":{"components/FormInputComponent.html":{}}}],["inputposition",{"_index":2337,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["inputs",{"_index":185,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["inputunit",{"_index":3162,"title":{},"body":{"directives/MinMaxValidator.html":{},"injectables/UnitFormatter.html":{}}}],["inputunit.findbestunit(value",{"_index":3645,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["inputvalueunit",{"_index":3104,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["insert",{"_index":2995,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["insertindex",{"_index":2991,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["inside",{"_index":248,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["inspired",{"_index":3326,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["installed",{"_index":4051,"title":{},"body":{"index.html":{}}}],["instance",{"_index":565,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["instancecount",{"_index":1186,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["instanceof",{"_index":1649,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["instances",{"_index":1066,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/ShowClippedTextDirective.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["instancetype",{"_index":2664,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["instantiate",{"_index":2165,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["instantiated",{"_index":1716,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["instantiating",{"_index":2598,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["instead",{"_index":708,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["insures",{"_index":3368,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["intellij",{"_index":3331,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["interact",{"_index":2601,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ActivityResponse.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{}},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ActivityResponse.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"overview.html":{}}}],["interfaces/can",{"_index":730,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["interfaces/component",{"_index":767,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["interfaces/datagrid",{"_index":771,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["internalization",{"_index":4034,"title":{},"body":{"index.html":{}}}],["internally",{"_index":2176,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["internalregistrationdata",{"_index":2966,"title":{"interfaces/InternalRegistrationData.html":{}},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{}}}],["internals",{"_index":2571,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["interrupt",{"_index":1993,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["invoking",{"_index":3193,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["irrespective",{"_index":32,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["is(\"isvapptemplate\").equalto(true",{"_index":2389,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["is(\"vcd\").equalto(vcdid",{"_index":2390,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["is(property",{"_index":2448,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["isactiondisabled",{"_index":183,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["isactiondisabled(action",{"_index":232,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["isactive",{"_index":808,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["isbuttondisabled(button",{"_index":1514,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isbuttonshown(button",{"_index":1510,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ischeckbox",{"_index":2696,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["iscolumnhideable(column",{"_index":1591,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isdisabled",{"_index":696,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["isdropdownopen",{"_index":1947,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isexportenabled",{"_index":1961,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isfindparamsobject",{"_index":3936,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isfindparamsobject(params",{"_index":2666,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["isfinite(control.value",{"_index":2866,"title":{},"body":{"classes/FormValidators.html":{}}}],["isloading",{"_index":1452,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["isloopingprogressbar",{"_index":2012,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["ismouseover",{"_index":1078,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["isn't",{"_index":1542,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isnan(parsefloat(control.value",{"_index":2865,"title":{},"body":{"classes/FormValidators.html":{}}}],["isnullorundefined",{"_index":3862,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnullorundefined(item[property",{"_index":3213,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["isnullorundefined(value",{"_index":3210,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["isnullorundefined(value[nestedprop",{"_index":3211,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["isnumber",{"_index":2864,"title":{},"body":{"classes/FormValidators.html":{}}}],["isnumberinrange",{"_index":2845,"title":{},"body":{"classes/FormValidators.html":{}}}],["isnumberinrange(min",{"_index":2853,"title":{},"body":{"classes/FormValidators.html":{}}}],["isodatevalue",{"_index":2796,"title":{},"body":{"components/FormInputComponent.html":{}}}],["isoverflowing",{"_index":1225,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["isreadonly",{"_index":665,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/CanBeReadOnly.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["isrequestpending",{"_index":1936,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["isrowexpanded",{"_index":1437,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["isspinnerspinning",{"_index":3568,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["issue",{"_index":3798,"title":{},"body":{"contributing.html":{}}}],["issues",{"_index":3842,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["istanbul",{"_index":2641,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["istooltipvisible",{"_index":3472,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["istranslatable",{"_index":3436,"title":{},"body":{"interfaces/SelectOption.html":{}}}],["isubscriptiontracker",{"_index":2908,"title":{"interfaces/ISubscriptionTracker.html":{}},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["isunitdropdowndisplayed",{"_index":3231,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["isvapptemplate==true;vcd==some",{"_index":2395,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["it's",{"_index":859,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":64,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/InternalRegistrationData.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{}}}],["item.getmultiplier",{"_index":3277,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["item.handler",{"_index":3429,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["item.interface",{"_index":817,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["item.interface.ts",{"_index":7,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["item.object",{"_index":493,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["item.response.error",{"_index":495,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["item[property",{"_index":3214,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["itemclicked(item",{"_index":3372,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["itemindex",{"_index":1567,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["items",{"_index":403,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"miscellaneous/variables.html":{}}}],["itemsperpage",{"_index":1297,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["itself",{"_index":3333,"title":{},"body":{"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{}}}],["jan",{"_index":1783,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["jasmine",{"_index":3461,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["job",{"_index":4083,"title":{},"body":{"index.html":{}}}],["js",{"_index":3958,"title":{},"body":{"dependencies.html":{}}}],["js/ts",{"_index":2590,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["json",{"_index":1858,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"index.html":{}}}],["justify",{"_index":3064,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["karma",{"_index":3973,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["kb",{"_index":933,"title":{},"body":{"classes/Bytes.html":{}}}],["kbdshortcut",{"_index":3597,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{}}}],["keep",{"_index":4099,"title":{},"body":{"index.html":{}}}],["key",{"_index":71,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["keyboard",{"_index":613,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keyboardevent",{"_index":3375,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["keyboardevent('keydown",{"_index":2620,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keyboardevent('keyup",{"_index":2621,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keydow",{"_index":615,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["keyof",{"_index":3048,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["keys",{"_index":709,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["khz",{"_index":2884,"title":{},"body":{"classes/Hertz.html":{}}}],["kinds",{"_index":1643,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["know",{"_index":392,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["known",{"_index":1363,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["knows",{"_index":2911,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["label",{"_index":132,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["label:first",{"_index":2836,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["label:nth",{"_index":2040,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["labels",{"_index":707,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["last",{"_index":1073,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["lastitem",{"_index":1335,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["later",{"_index":2783,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/SearchSection.html":{}}}],["latest",{"_index":3396,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["lazy",{"_index":3343,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["lazystring",{"_index":513,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/typealiases.html":{}}}],["le",{"_index":2464,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["leading_control_char",{"_index":1798,"title":{},"body":{"injectables/CsvExporterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["leading_control_char.test(encodevalue(cell",{"_index":1802,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["leading_control_char.test(value",{"_index":1835,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["leaks",{"_index":2587,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["leaky",{"_index":2686,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["lease",{"_index":3815,"title":{},"body":{"contributing.html":{}}}],["left",{"_index":1049,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":319,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["length",{"_index":226,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["lengthy",{"_index":1869,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["less",{"_index":227,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["lessthan",{"_index":2406,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthan(value",{"_index":2450,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthanorequalto",{"_index":2407,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lessthanorequalto(value",{"_index":2452,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["level",{"_index":898,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["lg",{"_index":907,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["lg(large",{"_index":3042,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["lib/directives/show",{"_index":819,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["library",{"_index":388,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"index.html":{}}}],["license",{"_index":2379,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["life",{"_index":2790,"title":{},"body":{"components/FormInputComponent.html":{}}}],["limit",{"_index":125,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["limited",{"_index":3119,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["line",{"_index":2638,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["line:directive",{"_index":3080,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["line:triple",{"_index":3150,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["line:typedef",{"_index":794,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["lines",{"_index":1828,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link",{"_index":50,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["link.click",{"_index":1796,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.setattribute('download",{"_index":1793,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.setattribute('href",{"_index":1792,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["link.style.visibility",{"_index":1794,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["list",{"_index":20,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["listed",{"_index":1285,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["listen",{"_index":1471,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["listeners",{"_index":1347,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["lit",{"_index":3975,"title":{},"body":{"dependencies.html":{}}}],["literal",{"_index":17,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/MockRecord.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["live",{"_index":3349,"title":{},"body":{"interfaces/SearchSection.html":{},"dependencies.html":{},"index.html":{}}}],["load",{"_index":894,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["loaded",{"_index":1557,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["loading",{"_index":358,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["loading/loading",{"_index":3663,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["loadingindicatorcomponent",{"_index":357,"title":{"components/LoadingIndicatorComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{},"overview.html":{}}}],["loadingmessage",{"_index":509,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["loadingtext",{"_index":561,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["loadingtextkey",{"_index":3020,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["local",{"_index":2734,"title":{},"body":{"components/FormInputComponent.html":{}}}],["locale_id",{"_index":3201,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["localeid",{"_index":3205,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["localized",{"_index":3626,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["logic",{"_index":1238,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["logical",{"_index":3773,"title":{},"body":{"contributing.html":{}}}],["long",{"_index":1083,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["longer",{"_index":1185,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["look",{"_index":3348,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["looks",{"_index":3769,"title":{},"body":{"contributing.html":{}}}],["looping",{"_index":2028,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["lower",{"_index":2430,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["lt",{"_index":2463,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["ma",{"_index":2138,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"miscellaneous/variables.html":{}}}],["mac",{"_index":3327,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["made",{"_index":896,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["magic",{"_index":1307,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["magically",{"_index":1660,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["main",{"_index":41,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["make",{"_index":649,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["makes",{"_index":921,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["making",{"_index":916,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["male",{"_index":3185,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":567,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["manipulate",{"_index":2653,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["manual",{"_index":3793,"title":{},"body":{"contributing.html":{}}}],["manually",{"_index":543,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["many",{"_index":122,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"injectables/UnitFormatter.html":{}}}],["map",{"_index":1389,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["map(selectedoption",{"_index":2200,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["mapped",{"_index":1558,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["mapselectedrecords(currentselection",{"_index":1562,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["margin",{"_index":2278,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FormInputComponent.html":{}}}],["mark",{"_index":3391,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["marked",{"_index":261,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["marks",{"_index":2352,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["massachusetts",{"_index":2139,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["master",{"_index":3813,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["match",{"_index":2415,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["matching",{"_index":146,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.hostelement.getboundingclientrect().width",{"_index":1229,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["math.floor(availableheight",{"_index":1631,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["math.max(default_size",{"_index":1632,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["math.max(this.getfeaturedbuttons([item]).length",{"_index":1508,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["matter",{"_index":2519,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["max",{"_index":1506,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["max_header_height",{"_index":1268,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1264,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":2741,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["maxnumberlength",{"_index":2213,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["mb",{"_index":934,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["md",{"_index":1057,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["md(medium",{"_index":3038,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["mean",{"_index":414,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["means",{"_index":2986,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["measure",{"_index":3040,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["measures",{"_index":3036,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["medium",{"_index":3039,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["members",{"_index":3782,"title":{},"body":{"contributing.html":{}}}],["menu",{"_index":42,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["menu'},{'name",{"_index":325,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["menu.component",{"_index":3651,"title":{},"body":{"modules/VcdActionMenuModule.html":{}}}],["menu.component.html",{"_index":171,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.scss",{"_index":169,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts",{"_index":157,"title":{},"body":{"components/ActionMenuComponent.html":{},"coverage.html":{}}}],["menu.component.ts:103",{"_index":212,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:112",{"_index":260,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:120",{"_index":264,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:125",{"_index":231,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:142",{"_index":224,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:154",{"_index":218,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:165",{"_index":236,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:172",{"_index":233,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:179",{"_index":267,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:20",{"_index":206,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:26",{"_index":199,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:31",{"_index":203,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:36",{"_index":207,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:41",{"_index":210,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:46",{"_index":244,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:47",{"_index":197,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:55",{"_index":254,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:59",{"_index":243,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:71",{"_index":193,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:81",{"_index":257,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:88",{"_index":247,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:93",{"_index":249,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.component.ts:98",{"_index":250,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["menu.module.ts",{"_index":3650,"title":{},"body":{"modules/VcdActionMenuModule.html":{}}}],["menu/action",{"_index":156,"title":{},"body":{"components/ActionMenuComponent.html":{},"modules/VcdActionMenuModule.html":{},"coverage.html":{}}}],["merge",{"_index":3800,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["message",{"_index":386,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"contributing.html":{}}}],["messageformat",{"_index":3977,"title":{},"body":{"dependencies.html":{}}}],["messages",{"_index":3775,"title":{},"body":{"contributing.html":{}}}],["messaging",{"_index":2859,"title":{},"body":{"classes/FormValidators.html":{}}}],["metadata",{"_index":165,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"directives/ComponentRendererOutletDirective.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"pipes/FunctionRendererPipe.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["method",{"_index":408,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":178,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["mhz",{"_index":1003,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["milliseconds",{"_index":2101,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/variables.html":{}}}],["mimetype",{"_index":1779,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["min",{"_index":2742,"title":{},"body":{"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["minimum",{"_index":2759,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["minmaxvalidator",{"_index":371,"title":{"directives/MinMaxValidator.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["miscellaneou",{"_index":4125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":3996,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixin",{"_index":789,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"components/LoadingIndicatorComponent.html":{},"miscellaneous/functions.html":{}}}],["mockdata",{"_index":3181,"title":{},"body":{"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockrecord",{"_index":762,"title":{"interfaces/MockRecord.html":{}},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mocktranslationservice",{"_index":2524,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["modal",{"_index":3014,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["mode",{"_index":711,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["modifiers(eg",{"_index":1470,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["modify",{"_index":1472,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["module",{"_index":2527,"title":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}},"body":{"components/FilterTestHostComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["modules",{"_index":3309,"title":{"modules.html":{}},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["monitor",{"_index":458,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["monitoredit",{"_index":444,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitoredit(activityresolutionpromise",{"_index":461,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorget",{"_index":445,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorget(activityresolutionpromise",{"_index":466,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorgetall",{"_index":446,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitorgetall(activityresolutionpromises",{"_index":468,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monitors",{"_index":463,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["monorepo",{"_index":4023,"title":{},"body":{"index.html":{}}}],["more",{"_index":3431,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["morevalues",{"_index":2438,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["morevalues.foreach(val",{"_index":2502,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["morevalues.length",{"_index":2501,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["mouse",{"_index":1042,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["mouseevent",{"_index":1171,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["mouseevent('mouseenter",{"_index":3528,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["mouseevent('mouseleave",{"_index":3531,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["mousein",{"_index":1173,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["mouseout",{"_index":1085,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mouseoutdelay",{"_index":908,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["mousetrap",{"_index":3979,"title":{},"body":{"dependencies.html":{}}}],["movemouseoffhost",{"_index":3465,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseofftooltip",{"_index":3466,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseoverhost",{"_index":3467,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseoversecondhost",{"_index":3468,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["movemouseovertooltip",{"_index":3469,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["multi",{"_index":1280,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["multiple",{"_index":90,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["multiplier",{"_index":987,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["multiselect",{"_index":339,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["multiselection",{"_index":1454,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["multiselectoption",{"_index":2175,"title":{"interfaces/MultiSelectOption.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["multiselectoptioninternal",{"_index":2163,"title":{"interfaces/MultiSelectOptionInternal.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{}}}],["name",{"_index":215,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":2595,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["names",{"_index":1756,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["nativeelement",{"_index":2614,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.click",{"_index":2617,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.dispatchevent(new",{"_index":2619,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["nativeelement.value",{"_index":2624,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["navigate",{"_index":4040,"title":{},"body":{"index.html":{}}}],["navigator.mssaveblob",{"_index":1787,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["navigator.mssaveblob(blob",{"_index":1788,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["nbsp",{"_index":735,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["nc",{"_index":2140,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["need",{"_index":877,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["needed",{"_index":874,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["needs",{"_index":1713,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{}}}],["negative",{"_index":2994,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["neq",{"_index":2466,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/variables.html":{}}}],["ness",{"_index":647,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["nested",{"_index":885,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"pipes/NestedPropertyPipe.html":{},"modules/PipesModule.html":{}}}],["nestedprop",{"_index":3209,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["nestedproperty",{"_index":3194,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["nestedpropertypipe",{"_index":3188,"title":{"pipes/NestedPropertyPipe.html":{}},"body":{"pipes/NestedPropertyPipe.html":{},"modules/PipesModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["never",{"_index":831,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["new",{"_index":733,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":1559,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["newrecords",{"_index":1563,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["newrecords.find",{"_index":1566,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["next",{"_index":716,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["nextdisabled",{"_index":1192,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["nextselection",{"_index":1549,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ng",{"_index":2275,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"index.html":{}}}],["ng_validators",{"_index":3069,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["ngafterviewinit",{"_index":1659,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ngcontrol",{"_index":671,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["ngcontrol.valueaccessor",{"_index":738,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["ngmodule",{"_index":3319,"title":{},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["ngondestroy",{"_index":1216,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"directives/ShowClippedTextDirective.html":{}}}],["ngoninit",{"_index":1201,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["node",{"_index":584,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["nodes",{"_index":609,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["non",{"_index":98,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["none",{"_index":1282,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["normal",{"_index":2838,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["normally",{"_index":1288,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["note",{"_index":920,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["notequalto",{"_index":2408,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["notequalto(value",{"_index":2454,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["notext",{"_index":1900,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["nothing",{"_index":3403,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["notification",{"_index":3834,"title":{},"body":{"contributing.html":{}}}],["notifications",{"_index":1346,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["nowrap",{"_index":1214,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["npm",{"_index":4038,"title":{},"body":{"index.html":{}}}],["null",{"_index":194,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["num",{"_index":2806,"title":{},"body":{"components/FormInputComponent.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":126,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdFormModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["number(math.round(number(value",{"_index":1678,"title":{},"body":{"classes/CommonUtil.html":{}}}],["number.max_safe_integer",{"_index":2750,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["number.max_safe_integer.tostring().length",{"_index":2233,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["number.min_safe_integer",{"_index":2757,"title":{},"body":{"components/FormInputComponent.html":{}}}],["numbers",{"_index":1676,"title":{},"body":{"classes/CommonUtil.html":{},"classes/FilterBuilder.html":{}}}],["numberwithunitforminputcomponent",{"_index":360,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/PipesModule.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["numberwithunitforminputcomponent.formcontrol",{"_index":3068,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["numberwithunitforminputwidgetobject",{"_index":3219,"title":{"classes/NumberWithUnitFormInputWidgetObject.html":{}},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"coverage.html":{}}}],["numeric",{"_index":342,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["numerical",{"_index":3089,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["obj",{"_index":3192,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["object",{"_index":425,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.assign(defaults",{"_index":3520,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.assign(el.style",{"_index":1182,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["object.assign(this.host.style",{"_index":3521,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.keys(config).foreach(key",{"_index":281,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["object.keys(rec).map(key",{"_index":1986,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["object.keys(records[0]).map(fieldname",{"_index":1982,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["object.keys(sizes).indexof(size",{"_index":3050,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["object.keys(this.formcontrol.errors",{"_index":746,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["object.keys(this.formgroup.controls).foreach(control",{"_index":2184,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(this.formgroup.getrawvalue",{"_index":2197,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(this.formgroup.getrawvalue()).filter(frmctrl",{"_index":2203,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["object.keys(tooltipposition",{"_index":3537,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["object.ts",{"_index":2556,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["object.ts:101",{"_index":3746,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:115",{"_index":3743,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:123",{"_index":3744,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:127",{"_index":3742,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:15",{"_index":3233,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:17",{"_index":3242,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:173",{"_index":3730,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:178",{"_index":3729,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:192",{"_index":3735,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:21",{"_index":3244,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:217",{"_index":3733,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:229",{"_index":3731,"title":{},"body":{"classes/WidgetFinder.html":{}}}],["object.ts:27",{"_index":3736,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:28",{"_index":3246,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:32",{"_index":3249,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:36",{"_index":3251,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:40",{"_index":3253,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:42",{"_index":3737,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:44",{"_index":3237,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:45",{"_index":3739,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:48",{"_index":3239,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:52",{"_index":3255,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:54",{"_index":3740,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:56",{"_index":3257,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:62",{"_index":3741,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:65",{"_index":3241,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:72",{"_index":3240,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:73",{"_index":3738,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:77",{"_index":3235,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:81",{"_index":3259,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object.ts:87",{"_index":3745,"title":{},"body":{"classes/WidgetObject.html":{}}}],["object.ts:88",{"_index":3261,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["object_property_separator",{"_index":3202,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["objectandresponse",{"_index":394,"title":{"interfaces/ObjectAndResponse.html":{}},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"coverage.html":{}}}],["objects",{"_index":3334,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["objet",{"_index":1318,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["obs",{"_index":2115,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["observable",{"_index":1255,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["observable.subscribe(tosubscriber(observerornext",{"_index":2944,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["observables",{"_index":2914,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["observerornext",{"_index":2917,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["old",{"_index":3385,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onalertclosedchange",{"_index":2346,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["onalertclosedchange(closed",{"_index":2364,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["onarrowdown(event",{"_index":3374,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onarrowup(event",{"_index":3378,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onbeforesetconfig",{"_index":2059,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{}}}],["onbeforesetconfig(config",{"_index":2083,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["once",{"_index":1846,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["onchange",{"_index":658,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["onclickexport",{"_index":1948,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["ondestroy",{"_index":1045,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"directives/ShowClippedTextDirective.html":{},"classes/SubscriptionTracker.html":{}}}],["ondestroy.ngondestroy",{"_index":2938,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["one",{"_index":440,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["onenterkey(event",{"_index":3380,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["onerrorclosed",{"_index":506,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["ones",{"_index":3424,"title":{},"body":{"interfaces/SearchSection.html":{},"index.html":{}}}],["oninit",{"_index":1046,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["only.interface",{"_index":732,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["only.interface.ts",{"_index":1030,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"coverage.html":{}}}],["onmouseenter",{"_index":1112,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["onmousein",{"_index":1220,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["onmouseleave",{"_index":1114,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["onmouseout",{"_index":1224,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["onsuccessclosed",{"_index":507,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["ontop",{"_index":1431,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["ontouch",{"_index":659,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ontouched",{"_index":693,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ontransitionend",{"_index":1233,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["ontransitionend(e",{"_index":1125,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["opacity",{"_index":1099,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":1923,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{},"contributing.html":{}}}],["open(open",{"_index":3356,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["open(value",{"_index":1924,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["open/close",{"_index":2021,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["openchange",{"_index":1931,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["opened",{"_index":1880,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["opening",{"_index":3367,"title":{},"body":{"interfaces/SearchSection.html":{},"contributing.html":{}}}],["opens",{"_index":2539,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["operation",{"_index":88,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["operator",{"_index":2419,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["operators",{"_index":2460,"title":{},"body":{"classes/FilterBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["operators.and",{"_index":2479,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["operators.or",{"_index":2474,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["opposite",{"_index":1150,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["option",{"_index":1310,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{}}}],["option.display",{"_index":2207,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/FormSelectComponent.html":{}}}],["option.istranslatable",{"_index":2206,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/FormSelectComponent.html":{}}}],["option.ts",{"_index":3435,"title":{},"body":{"interfaces/SelectOption.html":{},"coverage.html":{}}}],["option.value",{"_index":2301,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{}}}],["option.value.tostring",{"_index":2832,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["optional",{"_index":14,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":138,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["options.indexof(this.pagesize",{"_index":1608,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["options.push(this.pagesize",{"_index":1609,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["options.sort((a",{"_index":1610,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["optionsformgroup",{"_index":1942,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["or(...conditions",{"_index":2485,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["or(conditions",{"_index":2456,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["order",{"_index":2774,"title":{},"body":{"components/FormInputComponent.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{}}}],["ordered",{"_index":847,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["origin",{"_index":3756,"title":{},"body":{"contributing.html":{}}}],["originalondestroy",{"_index":2940,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["originalondestroy.call(destroyable",{"_index":2943,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["osx",{"_index":3328,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["otherwise",{"_index":2334,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"contributing.html":{}}}],["out",{"_index":979,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"contributing.html":{},"index.html":{},"overview.html":{}}}],["outlet",{"_index":1712,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive",{"_index":3694,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["outlet.directive.ts",{"_index":1692,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"coverage.html":{}}}],["outlet.directive.ts:29",{"_index":1719,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:30",{"_index":1710,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:40",{"_index":1711,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:52",{"_index":1717,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:63",{"_index":1715,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outlet.directive.ts:70",{"_index":1718,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["outline",{"_index":3766,"title":{},"body":{"contributing.html":{}}}],["output",{"_index":1247,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["outputnumber",{"_index":1027,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["outputs",{"_index":1338,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["outputunit",{"_index":995,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["outputunit.multiplier",{"_index":1020,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["outputunit.unitname",{"_index":3631,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["outside",{"_index":2091,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["over",{"_index":1076,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["overflow",{"_index":1212,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overflowing",{"_index":1210,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overflows",{"_index":1226,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["overlay",{"_index":3025,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["override",{"_index":389,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["overrides",{"_index":813,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["overview",{"_index":4104,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwriting",{"_index":1428,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["p:first",{"_index":2821,"title":{},"body":{"components/FormInputComponent.html":{}}}],["package",{"_index":3945,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":4053,"title":{},"body":{"index.html":{}}}],["pad",{"_index":3899,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["pad(date.getdate",{"_index":2802,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.gethours",{"_index":2803,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.getminutes",{"_index":2804,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(date.getmonth",{"_index":2801,"title":{},"body":{"components/FormInputComponent.html":{}}}],["pad(num",{"_index":2805,"title":{},"body":{"components/FormInputComponent.html":{},"miscellaneous/functions.html":{}}}],["padding",{"_index":2811,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["page",{"_index":1258,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["page(they",{"_index":1304,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagenumber",{"_index":1296,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pages",{"_index":1302,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pagesize",{"_index":1308,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagesizeoptions",{"_index":1300,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagination",{"_index":1274,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["pagination(pagination",{"_index":1401,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationcallback",{"_index":1333,"title":{"interfaces/PaginationCallback.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["paginationcomponent",{"_index":1461,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationconfiguration",{"_index":1299,"title":{"interfaces/PaginationConfiguration.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["paginationdata.firstitem",{"_index":1600,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdata.lastitem",{"_index":1601,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdata.totalitems",{"_index":1602,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationdropdowntext",{"_index":1444,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["paginationtranslationkey",{"_index":1468,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagionation",{"_index":1293,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pagionationinformation",{"_index":1295,"title":{"interfaces/PagionationInformation.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["palo",{"_index":3183,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["pane",{"_index":1316,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["param",{"_index":84,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":412,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/ObjectAndResponse.html":{}}}],["parameters",{"_index":214,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/FunctionRendererPipe.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1457,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["params.tagname",{"_index":2678,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["params.woconstructor.tagname",{"_index":2677,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent",{"_index":573,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.query(by.css(cssselector)).nativeelement",{"_index":2616,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.query(query",{"_index":2612,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["parent.queryall(query",{"_index":2613,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["part",{"_index":901,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["partial",{"_index":1181,"title":{},"body":{"interfaces/CliptextConfig.html":{},"classes/FilterBuilder.html":{},"directives/ShowClippedTextDirective.html":{}}}],["partialobserver",{"_index":2918,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["pased",{"_index":2634,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pass",{"_index":582,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["passed",{"_index":66,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["passes",{"_index":2921,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["passing",{"_index":238,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["patch",{"_index":3762,"title":{},"body":{"contributing.html":{}}}],["pattern",{"_index":2566,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["peer",{"_index":3994,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["per",{"_index":1303,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["percent",{"_index":3263,"title":{"classes/Percent.html":{}},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"coverage.html":{}}}],["percent(0.01",{"_index":3302,"title":{},"body":{"classes/Percent.html":{}}}],["percent(1",{"_index":3300,"title":{},"body":{"classes/Percent.html":{}}}],["percent.zero_to_1",{"_index":3280,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["percent.zero_to_100",{"_index":3279,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["perform",{"_index":2087,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["performed",{"_index":68,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{}}}],["performer",{"_index":456,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["performer.resolveactivities(activityresolutionpromises",{"_index":490,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["performer.resolveactivity(activityresolutionpromise",{"_index":485,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["person",{"_index":3182,"title":{},"body":{"interfaces/MockRecord.html":{},"miscellaneous/variables.html":{}}}],["pipe",{"_index":2870,"title":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{},"coverage.html":{}}}],["pipeline",{"_index":4075,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":2872,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["pipes/function",{"_index":3696,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["pipesmodule",{"_index":3308,"title":{"modules/PipesModule.html":{}},"body":{"modules/PipesModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["pipetransform",{"_index":2880,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["pixels",{"_index":1267,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["placed",{"_index":1443,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["placeholder",{"_index":2743,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/SearchSection.html":{}}}],["please",{"_index":1231,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["plugin",{"_index":4030,"title":{},"body":{"index.html":{}}}],["point",{"_index":1674,"title":{},"body":{"classes/CommonUtil.html":{}}}],["popup",{"_index":1064,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":648,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["possible",{"_index":142,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["possibly",{"_index":2651,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["posts",{"_index":464,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["potential",{"_index":2584,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["potentially",{"_index":1868,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["pr",{"_index":3817,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pre",{"_index":984,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["precision",{"_index":3637,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["predefined",{"_index":3165,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["prefer",{"_index":2600,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["prefix",{"_index":2959,"title":{},"body":{"classes/IdGenerator.html":{}}}],["prefixed",{"_index":1815,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/IdGenerator.html":{},"miscellaneous/functions.html":{}}}],["prefixing",{"_index":1832,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["present",{"_index":1561,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["preserving",{"_index":1427,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["pressed",{"_index":809,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["presses",{"_index":3598,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{}}}],["prevent",{"_index":1760,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["prevents",{"_index":1831,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["previousvalue",{"_index":1974,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["previousvalue[currentvalue.fieldname",{"_index":1973,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["primitives",{"_index":2437,"title":{},"body":{"classes/FilterBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["prismjs",{"_index":3981,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":172,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["process",{"_index":390,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/ObjectAndResponse.html":{}}}],["processes",{"_index":395,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["processrow",{"_index":3869,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["processrow(row",{"_index":1776,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["produce",{"_index":2394,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["produces",{"_index":3196,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["programmatically",{"_index":3167,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["progress",{"_index":1850,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{}}}],["project",{"_index":3749,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["projects",{"_index":4026,"title":{},"body":{"index.html":{}}}],["projects/.../action",{"_index":3998,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../base",{"_index":4122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../bold",{"_index":4006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../component",{"_index":4111,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../csv",{"_index":4008,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/.../data",{"_index":4004,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../datagrid",{"_index":4001,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../datagrid.component.ts",{"_index":3999,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/.../datagrid.module.ts",{"_index":4121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../datagrid.wo.ts",{"_index":4118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../filter",{"_index":4007,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../form",{"_index":4000,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["projects/.../form.module.ts",{"_index":4119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../loading",{"_index":4002,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../mock",{"_index":4123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../nested",{"_index":4010,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/.../number",{"_index":4124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../pipes.module.ts",{"_index":4120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../show",{"_index":4003,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../spotlight",{"_index":4113,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../types.ts",{"_index":4112,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../widget",{"_index":4009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects//package.json",{"_index":4077,"title":{},"body":{"index.html":{}}}],["projects/components",{"_index":4027,"title":{},"body":{"index.html":{}}}],["projects/components/src/action",{"_index":155,"title":{},"body":{"components/ActionMenuComponent.html":{},"modules/VcdActionMenuModule.html":{},"coverage.html":{}}}],["projects/components/src/common/activity",{"_index":379,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{}}}],["projects/components/src/common/error/error",{"_index":2339,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/VcdErrorBannerModule.html":{},"coverage.html":{}}}],["projects/components/src/common/interfaces/action",{"_index":6,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/common/interfaces/select",{"_index":3434,"title":{},"body":{"interfaces/SelectOption.html":{},"coverage.html":{}}}],["projects/components/src/common/loading/loading",{"_index":3011,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"modules/VcdLoadingIndicatorModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/common/pipes/nested",{"_index":3189,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/common/pipes/pipes.module.ts",{"_index":3317,"title":{},"body":{"modules/PipesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/common/subscription/subscription",{"_index":2909,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["projects/components/src/components.module.ts",{"_index":3671,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["projects/components/src/data",{"_index":1744,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"modules/VcdDataExporterModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/datagrid.component.ts",{"_index":1236,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/datagrid.module.ts",{"_index":3688,"title":{},"body":{"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/directives/component",{"_index":1691,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{},"coverage.html":{}}}],["projects/components/src/datagrid/filters/datagrid",{"_index":2046,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/interfaces/component",{"_index":1679,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["projects/components/src/datagrid/interfaces/datagrid",{"_index":803,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/datagrid/mock",{"_index":3177,"title":{},"body":{"interfaces/MockRecord.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/datagrid/pipes/function",{"_index":2873,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"coverage.html":{}}}],["projects/components/src/datagrid/renderers/bold",{"_index":750,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/form/base",{"_index":640,"title":{},"body":{"classes/BaseFormControl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/form",{"_index":2690,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/form/form.module.ts",{"_index":3722,"title":{},"body":{"modules/VcdFormModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/interfaces/can",{"_index":1029,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"coverage.html":{}}}],["projects/components/src/form/number",{"_index":3066,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/form/validators.ts",{"_index":2841,"title":{},"body":{"classes/FormValidators.html":{},"coverage.html":{}}}],["projects/components/src/form/validators.ts:17",{"_index":2847,"title":{},"body":{"classes/FormValidators.html":{}}}],["projects/components/src/form/validators.ts:32",{"_index":2855,"title":{},"body":{"classes/FormValidators.html":{}}}],["projects/components/src/lib/directives/show",{"_index":1038,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/spotlight",{"_index":2967,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/common",{"_index":1666,"title":{},"body":{"classes/CommonUtil.html":{},"coverage.html":{}}}],["projects/components/src/utils/filter",{"_index":2383,"title":{},"body":{"classes/FilterBuilder.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/id",{"_index":2954,"title":{},"body":{"classes/IdGenerator.html":{},"coverage.html":{}}}],["projects/components/src/utils/test/activity",{"_index":545,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["projects/components/src/utils/test/datagrid/datagrid.wo.ts",{"_index":3922,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/components/src/utils/test/datagrid/filter",{"_index":2505,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/utils/test/datagrid/vcd",{"_index":3699,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{}}}],["projects/components/src/utils/test/widget",{"_index":2555,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/components/src/utils/types.ts",{"_index":4114,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/components/src/utils/unit/unit",{"_index":3624,"title":{},"body":{"injectables/UnitFormatter.html":{},"coverage.html":{}}}],["projects/components/src/utils/unit/unit.ts",{"_index":929,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{}}}],["projects/components/src/utils/unit/unit.ts:105",{"_index":3612,"title":{},"body":{"classes/ThousandsUnit.html":{}}}],["projects/components/src/utils/unit/unit.ts:109",{"_index":2904,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:11",{"_index":3616,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:110",{"_index":2902,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:111",{"_index":2889,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:112",{"_index":2891,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:113",{"_index":2893,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:114",{"_index":2887,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:115",{"_index":2895,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:116",{"_index":2900,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:118",{"_index":2905,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:12",{"_index":3615,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:122",{"_index":2907,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:126",{"_index":2906,"title":{},"body":{"classes/Hertz.html":{}}}],["projects/components/src/utils/unit/unit.ts:132",{"_index":966,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:133",{"_index":964,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:134",{"_index":950,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:135",{"_index":953,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:136",{"_index":955,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:137",{"_index":952,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:138",{"_index":957,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:139",{"_index":962,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:141",{"_index":971,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:145",{"_index":973,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:149",{"_index":972,"title":{},"body":{"classes/Bytes.html":{}}}],["projects/components/src/utils/unit/unit.ts:162",{"_index":3299,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:163",{"_index":3296,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:171",{"_index":3301,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:172",{"_index":3303,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:174",{"_index":3307,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:178",{"_index":3306,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:188",{"_index":3305,"title":{},"body":{"classes/Percent.html":{}}}],["projects/components/src/utils/unit/unit.ts:24",{"_index":3619,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:28",{"_index":3621,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:37",{"_index":3620,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:45",{"_index":3618,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:54",{"_index":3623,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:61",{"_index":3622,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:71",{"_index":3617,"title":{},"body":{"classes/Unit.html":{}}}],["projects/components/src/utils/unit/unit.ts:89",{"_index":3611,"title":{},"body":{"classes/ThousandsUnit.html":{}}}],["projects/examples",{"_index":4036,"title":{},"body":{"index.html":{}}}],["projects/i18n",{"_index":4035,"title":{},"body":{"index.html":{}}}],["projects/route",{"_index":4045,"title":{},"body":{"index.html":{}}}],["promise",{"_index":58,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["promise(resolve",{"_index":1992,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["promiseresolver",{"_index":460,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["proper",{"_index":2858,"title":{},"body":{"classes/FormValidators.html":{},"contributing.html":{}}}],["properties",{"_index":13,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"dependencies.html":{}}}],["property",{"_index":871,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["property.pipe",{"_index":3320,"title":{},"body":{"modules/PipesModule.html":{}}}],["property.pipe.ts",{"_index":3190,"title":{},"body":{"pipes/NestedPropertyPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["property.pipe.ts:32",{"_index":3197,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["property.split(object_property_separator",{"_index":3207,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["protected",{"_index":550,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["protractor",{"_index":4066,"title":{},"body":{"index.html":{}}}],["provide",{"_index":473,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["provided",{"_index":889,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["providedin",{"_index":1773,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["provider",{"_index":2978,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["providers",{"_index":2532,"title":{},"body":{"components/FilterTestHostComponent.html":{},"interfaces/InternalRegistrationData.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["provides",{"_index":1871,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["providing",{"_index":1689,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["prs",{"_index":3804,"title":{},"body":{"contributing.html":{}}}],["public",{"_index":549,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["public/exported",{"_index":3781,"title":{},"body":{"contributing.html":{}}}],["publish",{"_index":4085,"title":{},"body":{"index.html":{}}}],["published",{"_index":4089,"title":{},"body":{"index.html":{}}}],["publishing",{"_index":4072,"title":{},"body":{"index.html":{}}}],["pull",{"_index":3779,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pure",{"_index":2876,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["purpose",{"_index":2570,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["push",{"_index":3776,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pushes",{"_index":1345,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["put",{"_index":851,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["px",{"_index":1134,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["quad",{"_index":1164,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["quadrant",{"_index":1151,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["queries",{"_index":2574,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["query",{"_index":1326,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["queryfield",{"_index":2052,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["queryfieldname",{"_index":881,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["querying",{"_index":880,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["quotes",{"_index":1813,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["r",{"_index":55,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["range",{"_index":2856,"title":{},"body":{"classes/FormValidators.html":{}}}],["rbradford",{"_index":3984,"title":{},"body":{"dependencies.html":{}}}],["re",{"_index":2607,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["reactiveformsmodule",{"_index":3585,"title":{},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{}}}],["read",{"_index":731,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/SearchSection.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["readme",{"_index":4032,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":646,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["readonlytext",{"_index":3226,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["reads",{"_index":3247,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["ready",{"_index":1932,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"contributing.html":{}}}],["really",{"_index":3395,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["rebase",{"_index":3812,"title":{},"body":{"contributing.html":{}}}],["rec",{"_index":837,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["rec[key",{"_index":1987,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["recalculating",{"_index":1633,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["receive",{"_index":585,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["receiving",{"_index":1198,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["recent",{"_index":3824,"title":{},"body":{"contributing.html":{}}}],["recommended",{"_index":2592,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["record",{"_index":89,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["record.name",{"_index":763,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["records",{"_index":85,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["records.map(rec",{"_index":1985,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["rect",{"_index":1131,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.height",{"_index":1139,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.left",{"_index":1135,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.top",{"_index":1133,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rect.width",{"_index":1137,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter",{"_index":1159,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter.x",{"_index":1162,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["rectcenter.y",{"_index":1163,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["red",{"_index":2810,"title":{},"body":{"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["reduce",{"_index":2385,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["redundant",{"_index":1724,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["references",{"_index":3838,"title":{},"body":{"contributing.html":{}}}],["referencing",{"_index":3841,"title":{},"body":{"contributing.html":{}}}],["reflects",{"_index":890,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["refs/tags",{"_index":4097,"title":{},"body":{"index.html":{}}}],["register",{"_index":2983,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{}}}],["registered",{"_index":2975,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["registeredproviders",{"_index":2971,"title":{"interfaces/RegisteredProviders.html":{}},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{}}}],["registering",{"_index":3003,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registeronchange",{"_index":660,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registeronchange(onchange",{"_index":687,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerontouched",{"_index":661,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerontouched(ontouched",{"_index":691,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["registerprovider",{"_index":3600,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["registerprovider(provider",{"_index":2989,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registration",{"_index":2992,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrationdata",{"_index":2990,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrationdata.id",{"_index":2999,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrationid",{"_index":3002,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["registrations",{"_index":2982,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["regular",{"_index":2645,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["related",{"_index":3823,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["relative",{"_index":1535,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["release",{"_index":4076,"title":{},"body":{"index.html":{}}}],["released",{"_index":2764,"title":{},"body":{"components/FormInputComponent.html":{}}}],["reload",{"_index":4042,"title":{},"body":{"index.html":{}}}],["remember",{"_index":3384,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["remote",{"_index":4078,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1232,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["removecolumn",{"_index":1425,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["removecolumn(col",{"_index":1479,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["removecolumn(index",{"_index":2023,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["removed",{"_index":1037,"title":{},"body":{"interfaces/CanBeReadOnly.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["render",{"_index":1315,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rendered",{"_index":835,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["renderer",{"_index":761,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["renderer'},{'name",{"_index":332,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["renderer(item",{"_index":2881,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["renderer.component",{"_index":788,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"modules/VcdDatagridModule.html":{}}}],["renderer.component.ts",{"_index":751,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["renderer.component.ts:41",{"_index":766,"title":{},"body":{"components/BoldTextRendererComponent.html":{}}}],["renderer.context",{"_index":1730,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["renderer.interface",{"_index":768,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["renderer.interface.ts",{"_index":1680,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["renderer.pipe",{"_index":3697,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["renderer.pipe.ts",{"_index":2874,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"coverage.html":{}}}],["renderer.pipe.ts:17",{"_index":2879,"title":{},"body":{"pipes/FunctionRendererPipe.html":{}}}],["renderer.rendererspec.type",{"_index":1723,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["renderer.wo.ts",{"_index":781,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["renderer.wo.ts:28",{"_index":782,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["renderer.wo.ts:30",{"_index":783,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["renderers",{"_index":1644,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["renderers/bold",{"_index":3698,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["rendererspec",{"_index":757,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"directives/ComponentRendererOutletDirective.html":{}}}],["rendering",{"_index":753,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["renders",{"_index":158,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["repeat",{"_index":3799,"title":{},"body":{"contributing.html":{}}}],["replace",{"_index":1469,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["repo",{"_index":4022,"title":{},"body":{"index.html":{}}}],["repo(vmware/vmware",{"_index":4094,"title":{},"body":{"index.html":{}}}],["reporter",{"_index":455,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter'},{'name",{"_index":329,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component",{"_index":3665,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["reporter.component.html",{"_index":504,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts",{"_index":500,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["reporter.component.ts:20",{"_index":534,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:21",{"_index":533,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:22",{"_index":535,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:27",{"_index":3560,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:28",{"_index":512,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:36",{"_index":3564,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:40",{"_index":522,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:44",{"_index":3561,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:49",{"_index":519,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:52",{"_index":3563,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["reporter.component.ts:57",{"_index":520,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:67",{"_index":516,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:74",{"_index":518,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.component.ts:83",{"_index":521,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["reporter.module",{"_index":3672,"title":{},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["reporter.module.ts",{"_index":3659,"title":{},"body":{"modules/VcdActivityReporterModule.html":{}}}],["reporter.ts",{"_index":432,"title":{},"body":{"classes/ActivityReporter.html":{},"coverage.html":{}}}],["reporter.ts:13",{"_index":453,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:21",{"_index":479,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:27",{"_index":472,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:33",{"_index":478,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:38",{"_index":467,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:53",{"_index":469,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.ts:73",{"_index":462,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["reporter.wo.ts",{"_index":546,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["reporter.wo.ts:10",{"_index":562,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:11",{"_index":3569,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:12",{"_index":626,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:13",{"_index":3571,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:16",{"_index":628,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:17",{"_index":3572,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:20",{"_index":630,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:24",{"_index":632,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter.wo.ts:33",{"_index":3570,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["reporter/activity",{"_index":380,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{}}}],["reporter/banner",{"_index":499,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["reporter/spinner",{"_index":3558,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["reporterror",{"_index":448,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporterror(errortext",{"_index":471,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reporting",{"_index":437,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"contributing.html":{}}}],["reportsuccess",{"_index":449,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["reportsuccess(successmessage",{"_index":477,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["repository",{"_index":3757,"title":{},"body":{"contributing.html":{}}}],["represent",{"_index":501,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/Percent.html":{}}}],["representation",{"_index":1283,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["represented",{"_index":3289,"title":{},"body":{"classes/Percent.html":{}}}],["representing",{"_index":2443,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["represents",{"_index":2646,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["request",{"_index":1884,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{},"contributing.html":{},"index.html":{}}}],["requested",{"_index":1081,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":3791,"title":{},"body":{"contributing.html":{}}}],["require",{"_index":104,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["required",{"_index":61,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["requirements",{"_index":3780,"title":{},"body":{"contributing.html":{}}}],["requires",{"_index":2606,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["res",{"_index":2860,"title":{},"body":{"classes/FormValidators.html":{}}}],["reset",{"_index":508,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"directives/MinMaxValidator.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}],["resets",{"_index":1594,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["resettopageone",{"_index":1595,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["resolve(csvfile",{"_index":2001,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["resolveactivities",{"_index":397,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resolveactivities(activityresolutionpromises",{"_index":399,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolveactivity",{"_index":398,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolveactivity(activityresolutionpromise",{"_index":415,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resolver",{"_index":418,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["resolver.ts",{"_index":381,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{},"coverage.html":{}}}],["resolver.ts:51",{"_index":416,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resolver.ts:71",{"_index":401,"title":{},"body":{"classes/ActivityPromiseResolver.html":{}}}],["resource",{"_index":498,"title":{},"body":{"interfaces/ActivityResponse.html":{}}}],["response",{"_index":385,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{}}}],["response.length",{"_index":494,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.map(item",{"_index":492,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.object",{"_index":489,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["response.response.error",{"_index":486,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["responsible",{"_index":1685,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["rest",{"_index":1661,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["restitem",{"_index":1690,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["result",{"_index":145,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.items",{"_index":1359,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["result.search(/[\",\\n]/g",{"_index":1829,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["result.totalitems",{"_index":1361,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["result.ts",{"_index":3595,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["result[0",{"_index":430,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["resulting",{"_index":1867,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["results",{"_index":147,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":606,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["return",{"_index":278,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":225,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/RegisteredProviders.html":{},"components/SpinnerActivityReporterComponent.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/functions.html":{}}}],["returns",{"_index":213,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["returnvalue",{"_index":491,"title":{},"body":{"classes/ActivityReporter.html":{},"pipes/NestedPropertyPipe.html":{}}}],["reusable",{"_index":4029,"title":{},"body":{"index.html":{}}}],["reused",{"_index":2569,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["reverse",{"_index":1290,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["reversed",{"_index":1289,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["review",{"_index":3820,"title":{},"body":{"contributing.html":{}}}],["rgba(250",{"_index":3053,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["rgba(255",{"_index":3056,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["right",{"_index":1051,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FormCheckboxComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rightlabel",{"_index":2695,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["risk",{"_index":1772,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":594,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["root.componentinstance",{"_index":2674,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["rough",{"_index":3765,"title":{},"body":{"contributing.html":{}}}],["roughly",{"_index":3844,"title":{},"body":{"contributing.html":{}}}],["rounds",{"_index":1672,"title":{},"body":{"classes/CommonUtil.html":{}}}],["roundto",{"_index":1668,"title":{},"body":{"classes/CommonUtil.html":{}}}],["roundto(value",{"_index":1669,"title":{},"body":{"classes/CommonUtil.html":{}}}],["route",{"_index":4043,"title":{},"body":{"index.html":{}}}],["routermodule",{"_index":3689,"title":{},"body":{"modules/VcdDatagridModule.html":{}}}],["routes",{"_index":4049,"title":{},"body":{"index.html":{}}}],["row",{"_index":834,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["row.map(cell",{"_index":1805,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["row.some(cell",{"_index":1801,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["row_height",{"_index":1272,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["row_tag",{"_index":3929,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rowheight",{"_index":1309,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rows",{"_index":1279,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rows.map(row",{"_index":1775,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["rows.some(haspotentialinjection",{"_index":1778,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["rules",{"_index":2576,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["run",{"_index":2851,"title":{},"body":{"classes/FormValidators.html":{},"index.html":{}}}],["runactionhandler",{"_index":184,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["runactionhandler(action",{"_index":235,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["runbuttonhandler(button",{"_index":1525,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["running",{"_index":505,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/FormValidators.html":{},"interfaces/SearchSection.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"index.html":{}}}],["runs",{"_index":1524,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["rxjs",{"_index":1256,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"dependencies.html":{}}}],["rxjs/internal",{"_index":2932,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["rxjs/operators",{"_index":2100,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["safety",{"_index":912,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["same",{"_index":597,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["sanitize",{"_index":1864,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["sanitizecheckboxhint",{"_index":1913,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizecheckboxlabel",{"_index":1911,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizecontrol",{"_index":1957,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizeinfomessage",{"_index":1915,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sanitizestring",{"_index":3870,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sanitizestring(result",{"_index":1830,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["sanitizestring(value",{"_index":1834,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["saving",{"_index":1336,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["scaffolding",{"_index":4055,"title":{},"body":{"index.html":{}}}],["screen",{"_index":23,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["screens",{"_index":159,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["scrollwidth",{"_index":1228,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["search",{"_index":367,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["search(criteria",{"_index":3590,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["search.component",{"_index":3588,"title":{},"body":{"modules/SpotlightSearchModule.html":{}}}],["search.component.html",{"_index":3351,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["search.component.scss",{"_index":3352,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["search.component.ts",{"_index":3322,"title":{},"body":{"interfaces/SearchSection.html":{},"coverage.html":{}}}],["search.module",{"_index":3679,"title":{},"body":{"modules/VcdComponentsModule.html":{}}}],["search.module.ts",{"_index":3582,"title":{},"body":{"modules/SpotlightSearchModule.html":{}}}],["search.provider",{"_index":2973,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["search.provider.ts",{"_index":3589,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{},"coverage.html":{}}}],["search.provider.ts:16",{"_index":3591,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["search.service",{"_index":3325,"title":{},"body":{"interfaces/SearchSection.html":{},"modules/SpotlightSearchModule.html":{}}}],["search.service.ts",{"_index":2969,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["search.service.ts:42",{"_index":3605,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search.service.ts:51",{"_index":3603,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search.service.ts:85",{"_index":3604,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search.service.ts:96",{"_index":3602,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["search/spotlight",{"_index":2968,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"modules/VcdComponentsModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["searchcriteria",{"_index":3359,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchcriteria(value",{"_index":3361,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchid",{"_index":3366,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchinput",{"_index":3365,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection",{"_index":3321,"title":{"interfaces/SearchSection.html":{}},"body":{"interfaces/SearchSection.html":{},"coverage.html":{}}}],["searchsection.isloading",{"_index":3392,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection.provider.search(this.searchcriteria",{"_index":3390,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection.results",{"_index":3397,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsection.results.length",{"_index":3433,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchsections",{"_index":3370,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["searchservice",{"_index":3358,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["secondhost",{"_index":3464,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["section",{"_index":43,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["section.isloading",{"_index":3412,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["section.results[0",{"_index":3414,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["sections",{"_index":3346,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["see",{"_index":2123,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/LoadingIndicatorComponent.html":{},"contributing.html":{},"index.html":{}}}],["select",{"_index":344,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/VcdDatagridModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["select'},{'name",{"_index":356,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["select.component",{"_index":3079,"title":{},"body":{"directives/MinMaxValidator.html":{},"modules/VcdFormModule.html":{}}}],["select.component.html",{"_index":2825,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.scss",{"_index":2824,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.ts",{"_index":2823,"title":{},"body":{"components/FormSelectComponent.html":{},"coverage.html":{}}}],["select.component.ts:23",{"_index":2827,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select.component.ts:29",{"_index":2829,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["select/form",{"_index":2822,"title":{},"body":{"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{},"modules/VcdFormModule.html":{},"coverage.html":{}}}],["selectall",{"_index":1862,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["selectallcontrol",{"_index":1955,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectcolumn(column",{"_index":1969,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectcolumnstext",{"_index":1894,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selected",{"_index":40,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["selectedcolumns",{"_index":1841,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["selectedcombounit",{"_index":3148,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["selectedentities",{"_index":54,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{}}}],["selectedfilters",{"_index":2196,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["selectedindex",{"_index":1565,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selecteditem",{"_index":3371,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selecteditemindex",{"_index":3422,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selectedoption",{"_index":2826,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedoption.display",{"_index":2835,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedoption.istranslatable",{"_index":2834,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["selectedunit",{"_index":3155,"title":{},"body":{"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["selectedunit(value",{"_index":3172,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["selectedunit.getoutputvalue(value",{"_index":3157,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["selectedunitdisplayvalue",{"_index":3230,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["selectfirst(ensurefirstsectionisloaded",{"_index":3402,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selecting",{"_index":1278,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selection",{"_index":92,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["selectionchanged",{"_index":1422,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectiontype",{"_index":1377,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectiontype(selectiontype",{"_index":1375,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["selectnext(down",{"_index":3415,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["selectoption",{"_index":2170,"title":{"interfaces/SelectOption.html":{}},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/SelectOption.html":{},"coverage.html":{}}}],["selectoption.display",{"_index":3437,"title":{},"body":{"interfaces/SelectOption.html":{}}}],["selector",{"_index":166,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["selects",{"_index":1438,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{}}}],["selectunit",{"_index":3222,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["selectunit(unit",{"_index":3236,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["self",{"_index":2724,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["sending",{"_index":1883,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["sendkeyboardevent",{"_index":558,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["sendkeyboardevent(key",{"_index":610,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["sends",{"_index":612,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["separate",{"_index":4025,"title":{},"body":{"index.html":{}}}],["separated",{"_index":883,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["serve",{"_index":3091,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["server",{"_index":1301,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["serves",{"_index":1696,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["service",{"_index":2970,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{}}}],["set",{"_index":36,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/functions.html":{}}}],["setactiondisplayconfig(config",{"_index":258,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["setactions(actions",{"_index":255,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["setconfig(config",{"_index":3452,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["setconfig(val",{"_index":2095,"title":{},"body":{"classes/DatagridFilter.html":{}}}],["setdisabled(disabled",{"_index":3496,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["setdisabledstate",{"_index":662,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["setdisabledstate(isdisabled",{"_index":694,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"directives/MinMaxValidator.html":{}}}],["seterrormessage(val",{"_index":2368,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["setfilter",{"_index":2510,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["setfilter(filtertype",{"_index":2511,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["sethostposition(quadrant",{"_index":3494,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["sethosttext(text",{"_index":3498,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["setinputvalue",{"_index":559,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetObject.html":{}}}],["setinputvalue(value",{"_index":621,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["setinputvalueunit",{"_index":3223,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setinputvalueunit(unit",{"_index":3238,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["sets",{"_index":623,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["setsize(size",{"_index":3047,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["setstyle",{"_index":3909,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setstyle(el",{"_index":1179,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["setstyle(this.hostelement",{"_index":1211,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["setstyle(tip.container",{"_index":1096,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["setstyle(tip.content",{"_index":1142,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["setter",{"_index":2085,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/LoadingIndicatorComponent.html":{}}}],["settimeout",{"_index":1070,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":1686,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["setunit(val",{"_index":2242,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["setunitoptions(val",{"_index":2239,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["setunitoptionstonone",{"_index":3224,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setunitoptionstopercent",{"_index":3225,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["setvalue",{"_index":2051,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["setvalue(value",{"_index":2089,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["setvalue(values",{"_index":2152,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["setvcdcomponentrendereroutlet(renderer",{"_index":1720,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["setwidth(width",{"_index":3492,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{}}}],["shape",{"_index":2701,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["share",{"_index":2684,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["shared",{"_index":1065,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["shift+shift",{"_index":3332,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["shortcut",{"_index":3599,"title":{},"body":{"interfaces/SpotlightSearchResult.html":{}}}],["shoulddisplaybuttonsonrow",{"_index":1520,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shoulddisplaybuttonsontop",{"_index":1517,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldfillparent",{"_index":1417,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldsanitize",{"_index":1751,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/functions.html":{}}}],["shouldsanitize)).join",{"_index":1807,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["shouldsanitize)).join('\\n",{"_index":1777,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["shouldshowactionbar",{"_index":1492,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowbubbles",{"_index":1965,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["shouldshowcontextualactions",{"_index":191,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["shouldshowicon",{"_index":175,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowpagenumberinput",{"_index":1312,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowpagesizeselector",{"_index":1311,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowtext",{"_index":176,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["shouldshowtooltip",{"_index":177,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["show",{"_index":524,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"miscellaneous/variables.html":{}}}],["show/hide",{"_index":268,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["showasterisk",{"_index":666,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["showcases",{"_index":4037,"title":{},"body":{"index.html":{}}}],["showclippedtextdirective",{"_index":374,"title":{"directives/ShowClippedTextDirective.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["showclippedtextdirective.instancecount",{"_index":1203,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["showclippedtextdirectivemodule",{"_index":3453,"title":{"modules/ShowClippedTextDirectiveModule.html":{}},"body":{"modules/ShowClippedTextDirectiveModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["showclippedtextdirectivetesthelper",{"_index":3458,"title":{"classes/ShowClippedTextDirectiveTestHelper.html":{}},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{}}}],["showclippedtextdirectivetesthostcomponent",{"_index":362,"title":{"components/ShowClippedTextDirectiveTestHostComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"coverage.html":{}}}],["showerrors",{"_index":668,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["showing",{"_index":893,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["shown",{"_index":127,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{},"miscellaneous/enumerations.html":{}}}],["shows",{"_index":21,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["showsectiontitle(searchsection",{"_index":3430,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["showspinner",{"_index":3021,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["showunlimitedoption",{"_index":3094,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["side",{"_index":1766,"title":{},"body":{"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["signature",{"_index":2869,"title":{},"body":{"interfaces/FunctionRenderer.html":{},"interfaces/PaginationCallback.html":{},"contributing.html":{}}}],["signed",{"_index":3758,"title":{},"body":{"contributing.html":{}}}],["signpost",{"_index":2748,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["simplifying",{"_index":1237,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["simply",{"_index":3825,"title":{},"body":{"contributing.html":{}}}],["single",{"_index":86,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["singleselected",{"_index":1453,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["singleton",{"_index":1060,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["singleunitdisplaytext",{"_index":3232,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["sit",{"_index":1430,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["site",{"_index":923,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["sixty",{"_index":2283,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["size",{"_index":906,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["size(size",{"_index":3049,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sized",{"_index":3028,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sizes",{"_index":3033,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"miscellaneous/enumerations.html":{}}}],["sizes.md",{"_index":3043,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["sizing",{"_index":3035,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["skip",{"_index":3410,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["slice(0",{"_index":1502,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["sm",{"_index":1055,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{}}}],["sm(small",{"_index":3034,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["smaller",{"_index":1305,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["somerecord.property",{"_index":868,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["something",{"_index":2605,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["sortable",{"_index":909,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["sortcolumn",{"_index":1332,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["sorted",{"_index":985,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["sortedcolumn",{"_index":1287,"title":{"interfaces/SortedColumn.html":{}},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"coverage.html":{}}}],["sorting",{"_index":864,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["sorting/filtering",{"_index":873,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["sound",{"_index":1433,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"modules/PipesModule.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{}}}],["space",{"_index":705,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["spaces",{"_index":1812,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["spdx",{"_index":2378,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{}}}],["spec",{"_index":1529,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["special",{"_index":1833,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["specific",{"_index":391,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["specification",{"_index":855,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/functions.html":{}}}],["specifications",{"_index":2128,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"miscellaneous/functions.html":{}}}],["specified",{"_index":2127,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{}}}],["specifies",{"_index":1435,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["specify",{"_index":3087,"title":{},"body":{"directives/MinMaxValidator.html":{},"miscellaneous/variables.html":{}}}],["specs",{"_index":2662,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["spinner",{"_index":364,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"miscellaneous/enumerations.html":{}}}],["spinneractivityreportercomponent",{"_index":363,"title":{"components/SpinnerActivityReporterComponent.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"modules/VcdActivityReporterModule.html":{},"coverage.html":{},"overview.html":{}}}],["spinneractivityreporterwidgetobject",{"_index":3566,"title":{"classes/SpinnerActivityReporterWidgetObject.html":{}},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{},"coverage.html":{}}}],["spinners",{"_index":3031,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["spinnersize",{"_index":3026,"title":{},"body":{"components/LoadingIndicatorComponent.html":{},"miscellaneous/typealiases.html":{}}}],["splitproperty",{"_index":3206,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["splitproperty.length",{"_index":3208,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["spotlight",{"_index":366,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"modules/VcdComponentsModule.html":{},"miscellaneous/typealiases.html":{}}}],["spotlightsearchcomponent",{"_index":365,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/SearchSection.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"modules/SpotlightSearchModule.html":{},"coverage.html":{},"overview.html":{}}}],["spotlightsearchmodule",{"_index":3577,"title":{"modules/SpotlightSearchModule.html":{}},"body":{"modules/SpotlightSearchModule.html":{},"modules/VcdComponentsModule.html":{},"modules.html":{},"overview.html":{}}}],["spotlightsearchprovider",{"_index":2972,"title":{"interfaces/SpotlightSearchProvider.html":{}},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{}}}],["spotlightsearchprovider}spotlightsearchprovider",{"_index":3342,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["spotlightsearchresult",{"_index":3323,"title":{"interfaces/SpotlightSearchResult.html":{}},"body":{"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchResult.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["spotlightsearchresulttype",{"_index":3324,"title":{},"body":{"interfaces/SearchSection.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"miscellaneous/typealiases.html":{}}}],["spotlightsearchservice",{"_index":2981,"title":{"injectables/SpotlightSearchService.html":{}},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"modules/SpotlightSearchModule.html":{},"interfaces/SpotlightSearchProvider.html":{},"injectables/SpotlightSearchService.html":{},"coverage.html":{},"overview.html":{}}}],["spotlightsearchservice}spotlightsearchservice",{"_index":3341,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["squash",{"_index":3822,"title":{},"body":{"contributing.html":{}}}],["stackblitz/sdk",{"_index":3953,"title":{},"body":{"dependencies.html":{}}}],["stale",{"_index":1556,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["start",{"_index":593,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["startactivity",{"_index":450,"title":{},"body":{"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["started",{"_index":3747,"title":{"contributing.html":{},"index.html":{}},"body":{}}],["starting",{"_index":481,"title":{},"body":{"classes/ActivityReporter.html":{},"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["starts",{"_index":1814,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["start}${input}${end",{"_index":2333,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["state",{"_index":502,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/variables.html":{}}}],["state.filters",{"_index":1581,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.filters.map((filter",{"_index":1583,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page",{"_index":1578,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page.current",{"_index":1579,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.page.size",{"_index":1580,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort",{"_index":1585,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort.by",{"_index":1586,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["state.sort.reverse",{"_index":1588,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["statements",{"_index":3846,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":25,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/CommonUtil.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{}}}],["static/featured",{"_index":11,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["static_featured",{"_index":37,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"miscellaneous/enumerations.html":{}}}],["staticactions",{"_index":189,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["staticactionstyling",{"_index":16,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{}}}],["statically",{"_index":4047,"title":{},"body":{"index.html":{}}}],["staticfeaturedactions",{"_index":190,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["status",{"_index":405,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["staying",{"_index":3805,"title":{},"body":{"contributing.html":{}}}],["steps",{"_index":3792,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["still",{"_index":2637,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"interfaces/SearchSection.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["store",{"_index":680,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["stored",{"_index":1445,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["strictnullchecks",{"_index":2639,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["string",{"_index":75,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string(index",{"_index":1491,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["string(value",{"_index":2625,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["strings",{"_index":2031,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["striving",{"_index":3786,"title":{},"body":{"contributing.html":{}}}],["structure",{"_index":1063,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":1180,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["styles",{"_index":152,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{}}}],["styleurls",{"_index":168,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["styling",{"_index":130,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"components/FormCheckboxComponent.html":{}}}],["sub",{"_index":45,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BaseFormControl.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["subclass",{"_index":2575,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["subclasses",{"_index":2577,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["subject",{"_index":2065,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["submit",{"_index":3778,"title":{},"body":{"contributing.html":{}}}],["subscribable",{"_index":2930,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribe",{"_index":2912,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribe(observable",{"_index":2916,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscribes",{"_index":2920,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscription",{"_index":2924,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscription.unsubscribe",{"_index":2946,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscriptions",{"_index":2929,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["subscriptiontracker",{"_index":1854,"title":{"classes/SubscriptionTracker.html":{}},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["subscriptiontracker(this",{"_index":1928,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"directives/MinMaxValidator.html":{}}}],["substracting",{"_index":1623,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["subtext",{"_index":2277,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{}}}],["succeeded",{"_index":410,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["succeeds",{"_index":409,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["success",{"_index":407,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["successmessage",{"_index":400,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["sucesss",{"_index":420,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["sucesstext",{"_index":560,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["such",{"_index":4130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super(controldirective",{"_index":2728,"title":{},"body":{"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["super(filtercontainer",{"_index":2181,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["super(ngcontrol",{"_index":2830,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["super(promiseresolver",{"_index":539,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["supply",{"_index":1400,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["support",{"_index":878,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"modules.html":{}}}],["supported",{"_index":442,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["supports",{"_index":2732,"title":{},"body":{"components/FormInputComponent.html":{}}}],["sure",{"_index":917,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["svg",{"_index":4102,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2294,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["sync",{"_index":3806,"title":{},"body":{"contributing.html":{}}}],["syntax",{"_index":3840,"title":{},"body":{"contributing.html":{}}}],["system",{"_index":2976,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["t",{"_index":57,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tab",{"_index":1816,"title":{},"body":{"injectables/CsvExporterService.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":3944,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3943,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":4086,"title":{},"body":{"index.html":{}}}],["tag(npm",{"_index":4084,"title":{},"body":{"index.html":{}}}],["tagname",{"_index":548,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tagname`on",{"_index":2644,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tagnameon",{"_index":2689,"title":{},"body":{"interfaces/FindableWidget.html":{}}}],["take",{"_index":383,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"directives/MinMaxValidator.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/SearchSection.html":{}}}],["takes",{"_index":402,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["task",{"_index":1994,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["tb",{"_index":935,"title":{},"body":{"classes/Bytes.html":{}}}],["tbase",{"_index":796,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["team",{"_index":3750,"title":{},"body":{"contributing.html":{}}}],["technically",{"_index":2632,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["template",{"_index":151,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["templateref",{"_index":888,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["templateurl",{"_index":170,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["test",{"_index":2540,"title":{},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["test:components",{"_index":4062,"title":{},"body":{"index.html":{}}}],["test:i18n",{"_index":4063,"title":{},"body":{"index.html":{}}}],["testbed",{"_index":2522,"title":{},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["testbed.configuretestingmodule",{"_index":2529,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["testbed.createcomponent(componentconstructor",{"_index":2659,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["testhostcomponent",{"_index":2507,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["testing",{"_index":2007,"title":{},"body":{"classes/DataExporterWidgetObject.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["testinput",{"_index":2546,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":2124,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tests's",{"_index":2656,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["text",{"_index":72,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"modules/VcdDatagridModule.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["text').length",{"_index":3540,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["text.directive",{"_index":821,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["text.directive.module",{"_index":3678,"title":{},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{}}}],["text.directive.module.ts",{"_index":3457,"title":{},"body":{"modules/ShowClippedTextDirectiveModule.html":{}}}],["text.directive.test",{"_index":3459,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"coverage.html":{}}}],["text.directive.ts",{"_index":1039,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["text.directive.ts:222",{"_index":3447,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:225",{"_index":3440,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:244",{"_index":3448,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:245",{"_index":3451,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:246",{"_index":3446,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:251",{"_index":3439,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:255",{"_index":3445,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:261",{"_index":3441,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:274",{"_index":3444,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:280",{"_index":3442,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:288",{"_index":3449,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:299",{"_index":3450,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text.directive.ts:303",{"_index":3443,"title":{},"body":{"directives/ShowClippedTextDirective.html":{}}}],["text/csv;charset=utf",{"_index":1780,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["text2",{"_index":3545,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["textarea",{"_index":624,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["textcontent",{"_index":2631,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["textextractor",{"_index":777,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"miscellaneous/functions.html":{}}}],["textextractor(record",{"_index":779,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["texticon",{"_index":137,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{}}}],["texticon.icon",{"_index":287,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["texticon.text",{"_index":242,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["texting",{"_index":3551,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["textinput",{"_index":2738,"title":{},"body":{"components/FormInputComponent.html":{}}}],["textkey",{"_index":74,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["textoverflow",{"_index":1215,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["then(result",{"_index":427,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["thing",{"_index":1827,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["thirty",{"_index":2281,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this._actiondisplayconfig",{"_index":280,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this._actiondisplayconfig[key",{"_index":282,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this._actions",{"_index":274,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this._buttonconfig",{"_index":1381,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig",{"_index":1382,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.buttoncontents",{"_index":1384,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.buttons",{"_index":1498,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.buttons.find",{"_index":1392,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.buttons.length",{"_index":1523,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.buttons.map(featuredbutton",{"_index":1397,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.featured",{"_index":1387,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.featured.map(featuredbuttonclass",{"_index":1390,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.featuredcount",{"_index":1503,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.contextualbuttonconfig.position",{"_index":1518,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._buttonconfig.inactivedisplaymode",{"_index":1385,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns",{"_index":1350,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns.push(col",{"_index":1478,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns.splice(colindex",{"_index":1480,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._columns[colindex",{"_index":1477,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._config",{"_index":2112,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._config.queryfield",{"_index":2125,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._config.value",{"_index":2113,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this._errormessage",{"_index":2370,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this._height",{"_index":1411,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._isrequestpending",{"_index":1937,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this._multiplier",{"_index":1017,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this._open",{"_index":1925,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["this._pagination",{"_index":1402,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.pagesizeoptions",{"_index":1403,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.shouldshowpagenumberinput",{"_index":1405,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._pagination.shouldshowpagesizeselector",{"_index":1404,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._progress",{"_index":1939,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this._searchcriteria",{"_index":3360,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this._selectiontype",{"_index":1376,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this._size",{"_index":3051,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["this._unit",{"_index":2254,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this._unitname",{"_index":1018,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this._unitoptions",{"_index":2248,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.actiondisplayconfig.contextual.buttoncontents",{"_index":285,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.actiondisplayconfig.contextual.featuredcount",{"_index":307,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.actionreporter",{"_index":1527,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actionreporter.monitorget(response",{"_index":1528,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.actions.filter",{"_index":310,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.actions.filter(action",{"_index":294,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.activate",{"_index":1195,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.addwildcard(value",{"_index":2331,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.assignvalue(renderer.rendererspec.config",{"_index":1729,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.attachrenderer",{"_index":1728,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.bestunit",{"_index":3141,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.bestunit.getmultiplier",{"_index":3122,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.bestvalue",{"_index":3120,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.buildpartial",{"_index":2470,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.buttonconfig.contextualbuttonconfig.buttoncontents",{"_index":1495,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.buttonconfig.contextualbuttonconfig.buttons.length",{"_index":1494,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.buttonconfig.globalbuttons.length",{"_index":1493,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.calculatepagesize",{"_index":1605,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.cfr.resolvecomponentfactory(this.componenttype",{"_index":1733,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.changedetectorref.detectchanges",{"_index":1373,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{}}}],["this.changes.next",{"_index":2120,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.clearselectioninformation",{"_index":1378,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.click('.cancel",{"_index":2043,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.click('.dropdown",{"_index":2045,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.click('.export",{"_index":2044,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.click(`.column",{"_index":2039,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.closed",{"_index":2372,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.clrdatagrid.getcell(row",{"_index":800,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.column.filter",{"_index":2552,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["this.columns",{"_index":1963,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columns.filter(col",{"_index":1967,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columns.findindex(column",{"_index":1482,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.columns.reduce((previousvalue",{"_index":1971,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.columnsconfig",{"_index":1486,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.columnsupdated.emit",{"_index":1353,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.combooptions.find",{"_index":3149,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptions.push(combooption",{"_index":3102,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.get(displaycombounit",{"_index":3170,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.get(selectedcombounit",{"_index":3156,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.get(this.unitdropdown.selectedoption",{"_index":3163,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.combooptionunitmap.set(combooption",{"_index":3100,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.component.displayvalue",{"_index":3266,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.errortext",{"_index":635,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.component.formcontrol",{"_index":3265,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('combounitoptions",{"_index":3270,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('combounitoptions').value",{"_index":3274,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('limited",{"_index":3269,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.formgroup.get('unlimited",{"_index":3268,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.inputvalueunit",{"_index":3273,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.running",{"_index":634,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.component.selectedunit",{"_index":3271,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.component.successmessage",{"_index":636,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["this.component.unitoptions",{"_index":3275,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.componentinstance.directive.mouseoutdelay",{"_index":3480,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.disabled",{"_index":3523,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.div.nativeelement",{"_index":3482,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.div2.nativeelement",{"_index":3484,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentinstance.text",{"_index":3525,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.componentref",{"_index":1727,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componentref.instance",{"_index":1735,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componentref.instance.config",{"_index":1736,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.componenttype",{"_index":1722,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.computebestunitandvalue(this.initialvalue",{"_index":3117,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.computebestunitandvalue(value",{"_index":3137,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.condition(operators.eq",{"_index":2489,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.ge",{"_index":2494,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.gt",{"_index":2493,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.le",{"_index":2492,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.lt",{"_index":2491,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.condition(operators.neq",{"_index":2490,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.config",{"_index":2329,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.config.customfiql",{"_index":2305,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.config.options.find(option",{"_index":2300,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.config.wildcardposition",{"_index":2330,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.createformgroup",{"_index":2067,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.csvexporterservice.createcsv(data",{"_index":1998,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.csvexporterservice.downloadcsvfile(csvfile",{"_index":1999,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.currentoperator",{"_index":2473,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.dataexportrequest.emit",{"_index":1951,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.datagrid",{"_index":1571,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.rows",{"_index":1553,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.rows.notifyonchanges",{"_index":1554,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selected",{"_index":1572,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.clearselection",{"_index":1546,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.current",{"_index":1420,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.currentsingle",{"_index":1419,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.setselected(found",{"_index":1547,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.selection.updatecurrent(nextselection",{"_index":1552,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagrid.singleselected",{"_index":1573,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagridselection",{"_index":1511,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.datagridselection.length",{"_index":1519,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.deactivate",{"_index":1194,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.defaultspinnersize",{"_index":3029,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["this.detachrenderer",{"_index":1731,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.detailcomponent",{"_index":1531,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.detailpane.component",{"_index":1533,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.detectchanges",{"_index":2618,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.disabled",{"_index":749,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/CliptextConfig.html":{},"directives/MinMaxValidator.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.dismissed.next",{"_index":2374,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.dosearch",{"_index":3362,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.downloaddata(rows",{"_index":1988,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.downloadingmessage",{"_index":1950,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.errorlabels",{"_index":745,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.errorlabels.length",{"_index":744,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.errormessagechange.emit",{"_index":2373,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["this.errortext",{"_index":542,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["this.exportdata.bind(this",{"_index":1952,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.exportstage",{"_index":1949,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.fb.group",{"_index":2299,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.featuredbuttons",{"_index":1388,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.featuredbuttons.foreach(featured",{"_index":1394,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.featuredbuttons.get(button.class",{"_index":1501,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.featuredbuttons.size",{"_index":1504,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.filename",{"_index":2000,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.filter",{"_index":2544,"title":{},"body":{"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["this.filtercontainer.open",{"_index":2273,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.findcolumnindex(col",{"_index":1476,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.findelement('.progress.loop",{"_index":2037,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.findelement('.spinner",{"_index":3573,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.findelement('clr",{"_index":637,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{}}}],["this.findelement('strong').nativeelement.textcontent",{"_index":802,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.findelement(clrdatagridwidgetobject.tagname",{"_index":3710,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["this.findelement(cssselector",{"_index":2627,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.findelement(cssselector).nativeelement",{"_index":3282,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.findelements(cssselector).map(el",{"_index":2629,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.findwidgets(params",{"_index":2676,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture",{"_index":2658,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.componentinstance",{"_index":2661,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.debugelement",{"_index":2665,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.fixture.destroy",{"_index":3542,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.fixture.detectchanges",{"_index":2609,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.forcedropdownopen",{"_index":1979,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.format(value",{"_index":3644,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["this.formcontrol.enabled",{"_index":741,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.pristine",{"_index":742,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.valid",{"_index":743,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrol.value.tostring",{"_index":2833,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["this.formcontrolnamedirective",{"_index":739,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formcontrolnamedirective.control",{"_index":740,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.formgroup",{"_index":1975,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/ExportColumn.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.addcontrol(option.value",{"_index":2187,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.controls[col.fieldname].value",{"_index":1968,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].setvalue(selected",{"_index":1970,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].setvalue(true",{"_index":1978,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.controls[column.fieldname].value",{"_index":1964,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.formgroup.get('combounitoptions",{"_index":3125,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').disable",{"_index":3133,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').enable",{"_index":3175,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').setvalue(this.bestunit.getmultiplier",{"_index":3139,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').setvalue(value",{"_index":3173,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('combounitoptions').value",{"_index":3154,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('filterselect').value",{"_index":2306,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{}}}],["this.formgroup.get('filtertext').value",{"_index":2328,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.formgroup.get('limited",{"_index":3124,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').disable",{"_index":3134,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').enable",{"_index":3176,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').setvalue(null",{"_index":3136,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').setvalue(this.bestvalue",{"_index":3138,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('limited').value",{"_index":3147,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('unlimited",{"_index":3144,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('unlimited').setvalue(false",{"_index":3135,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get('unlimited').value",{"_index":3145,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.formgroup.get(formcontrol).value",{"_index":2199,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.get(formfields.from).setvalue(null",{"_index":2262,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.from).setvalue(values[0",{"_index":2261,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.from).value",{"_index":2267,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).setvalue(null",{"_index":2265,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).setvalue(values[1",{"_index":2264,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(formfields.to).value",{"_index":2268,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.formgroup.get(frmctrl",{"_index":2191,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.get(frmctrl).value).length",{"_index":2204,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.removecontrol(control",{"_index":2185,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.formgroup.setvalue",{"_index":2304,"title":{},"body":{"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["this.formgroup.valuechanges",{"_index":2118,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.formgroup.valuechanges.pipe(debouncetime(this.getdebouncetimems",{"_index":2117,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.friendlyfieldscontrol.value",{"_index":1983,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.getallunittypes",{"_index":983,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.getavailableactions(contextualactions",{"_index":311,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.getavailableactions(flattenedfeaturedactionlist",{"_index":306,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.getavailableactions(staticactions",{"_index":295,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.getbasevalue(value",{"_index":1019,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.getcolumnsconfig(this.columns",{"_index":1487,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getdebouncetimems",{"_index":2116,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.getdisplaymode(button",{"_index":1513,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getdisplaynameforfield(fieldname",{"_index":1984,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.getflattenedactionlist(this.actions",{"_index":303,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.getnativeelement('.combo",{"_index":3283,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.getnativeelement('.single",{"_index":3284,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.getnodetext(el",{"_index":2630,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.getnodetext(element",{"_index":2628,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.getnodetext(this.findelement('strong",{"_index":801,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["this.getpagesize",{"_index":1636,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getpagesizeoptions",{"_index":1638,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.getspinner",{"_index":3575,"title":{},"body":{"classes/SpinnerActivityReporterWidgetObject.html":{}}}],["this.gettext('.readonly",{"_index":3267,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.gettext('h3",{"_index":3708,"title":{},"body":{"classes/VcdDatagridWidgetObject.html":{}}}],["this.gettexts('.column",{"_index":2038,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["this.gridrefresh.emit(vcddgstate",{"_index":1589,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.handleitem(item",{"_index":3373,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.handleitem(this.selecteditem",{"_index":3382,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.handleopen(open",{"_index":3357,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.height",{"_index":1413,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.height}px",{"_index":1414,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.host.dispatchevent(new",{"_index":3527,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.host.nativeelement",{"_index":1200,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.host.style.position",{"_index":3519,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.host.style.width",{"_index":3517,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.hostcomponent",{"_index":2660,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.id",{"_index":736,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.initialvalue",{"_index":2784,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["this.inputvalueunit",{"_index":3158,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.inputvalueunit.findbestunit(value",{"_index":3142,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.inputvalueunit.getoutputvalue(value",{"_index":3143,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.isactiondisabled(action",{"_index":293,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.isbuttonshown(button",{"_index":1500,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.isdropdownopen",{"_index":1881,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.isloading",{"_index":1357,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.isoverflowing",{"_index":1221,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.isreadonly",{"_index":3166,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.isrequestpending",{"_index":1962,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.items",{"_index":1358,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.items).filter(item",{"_index":1551,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.items)[0",{"_index":1545,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.items.foreach(item",{"_index":1507,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.mapselectedrecords([current",{"_index":1544,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.mapselectedrecords(current",{"_index":1550,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.max",{"_index":3084,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.min",{"_index":3082,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.mouseoutdelay",{"_index":1190,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.multiplier",{"_index":1021,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["this.multiselection",{"_index":1575,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.node.nativeelement",{"_index":1613,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.node.nativeelement.style.setproperty",{"_index":1415,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.onbeforesetconfig(val",{"_index":2111,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.onchange",{"_index":747,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.onchange(isodatevalue",{"_index":2798,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onchange(parsefloat(value",{"_index":2795,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onchange(this.value",{"_index":3130,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.onchange(value",{"_index":2794,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.onmousein",{"_index":1206,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.onmouseout",{"_index":1207,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["this.ontouch",{"_index":748,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["this.ontransitionend",{"_index":1111,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["this.open",{"_index":1981,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/SearchSection.html":{}}}],["this.openchange.emit(this._open",{"_index":3427,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.openchange.emit(value",{"_index":1926,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.options",{"_index":2182,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["this.options.find(option",{"_index":2831,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["this.optionsformgroup.get(useroptions.friendlynames",{"_index":1960,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.optionsformgroup.get(useroptions.sanitize",{"_index":1958,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.optionsformgroup.get(useroptions.selectall",{"_index":1956,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.pagesize",{"_index":1635,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagesizeoptions",{"_index":1637,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.pagesize",{"_index":1604,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.pagesizeoptions.map(size",{"_index":1607,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.pagination.rowheight",{"_index":1622,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.paginationcomponent.currentpage",{"_index":1596,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.parent",{"_index":2467,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.buildpartial()}${this.result",{"_index":2504,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.clear",{"_index":2503,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.currentoperator",{"_index":2475,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.parent.result",{"_index":2476,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.prefix",{"_index":2963,"title":{},"body":{"classes/IdGenerator.html":{}}}],["this.promiseresolver",{"_index":483,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.registrations.findindex(data",{"_index":2993,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.map(data",{"_index":3008,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.push(registrationdata",{"_index":2998,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.splice(index",{"_index":3006,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.registrations.splice(insertindex",{"_index":2997,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["this.reporterror(item.response.error",{"_index":496,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reporterror(response.response.error",{"_index":487,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reportsuccess(response.response.success",{"_index":488,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.reportsuccess(response[0].response.success",{"_index":497,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.result",{"_index":2477,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.root",{"_index":587,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["this.running",{"_index":540,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["this.sanitizecontrol.value",{"_index":1989,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.searchcriteria",{"_index":3389,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchid",{"_index":3386,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchinput.nativeelement.focus",{"_index":3425,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchinput.nativeelement.select",{"_index":3426,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections",{"_index":3405,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections.foreach(async",{"_index":3388,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections.length",{"_index":3432,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.searchsections.reduce((acc",{"_index":3419,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.secondhost.dispatchevent(new",{"_index":3529,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.selectallcontrol.value",{"_index":1966,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.selectedcolumns",{"_index":1954,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.selectedentities",{"_index":317,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.selectedentities.length",{"_index":318,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.selecteditem",{"_index":3381,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectedunit",{"_index":3278,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.selectfirst(false",{"_index":3416,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectfirst(true",{"_index":3398,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectnext(false",{"_index":3379,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.selectnext(true",{"_index":3377,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["this.setvalue(this._config.value",{"_index":2114,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.shouldshowactionbar",{"_index":1628,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.shouldshowicon",{"_index":286,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.shouldshowtext",{"_index":288,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.shouldshowtooltip",{"_index":289,"title":{},"body":{"components/ActionMenuComponent.html":{}}}],["this.showunlimitedoption",{"_index":3118,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.singleselected",{"_index":1574,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.startactivity",{"_index":482,"title":{},"body":{"classes/ActivityReporter.html":{}}}],["this.styling",{"_index":2726,"title":{},"body":{"components/FormCheckboxComponent.html":{}}}],["this.subscriptions",{"_index":2953,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.foreach(subscription",{"_index":2952,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.indexof(subscription",{"_index":2948,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.push(subscription",{"_index":2945,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptions.splice(indexofsubscription",{"_index":2951,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.subscriptiontracker.subscribe(columndropdown.toggleservice.openchange",{"_index":1879,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.subscriptiontracker.subscribe(obs",{"_index":2119,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{}}}],["this.subscriptiontracker.subscribe(this.selectallcontrol.valuechanges",{"_index":1977,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.successmessage",{"_index":541,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["this.textinput",{"_index":2785,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.textinput.nativeelement.value",{"_index":2789,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.tooltip",{"_index":3532,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.dispatchevent(new",{"_index":3530,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.queryselector('.tooltip",{"_index":3543,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltip.style.opacity",{"_index":3533,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.classlist",{"_index":3535,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.innertext",{"_index":3534,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.offsetwidth",{"_index":3526,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipcontent.style.visibility",{"_index":3541,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["this.tooltipsize",{"_index":1144,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["this.totalitems",{"_index":1360,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.trackby(itemindex",{"_index":1568,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.trackby(selectedindex",{"_index":1569,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.tracker.subscribe(this.formgroup.get('combounitoptions').valuechanges",{"_index":3131,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.tracker.subscribe(this.formgroup.get('limited').valuechanges",{"_index":3132,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.tracker.subscribe(this.formgroup.get('unlimited').valuechanges",{"_index":3123,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.tracker.unsubscribeall",{"_index":3174,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.translationservice.translate('unlimited",{"_index":3160,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.translationservice.translate(outputunit.getvaluewithunittranslationkey",{"_index":3642,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["this.translationservice.translateasync('vcd.cc.cancel",{"_index":1891,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.data",{"_index":1887,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.export",{"_index":1897,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.export.all",{"_index":1893,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.exporter.downloading",{"_index":1919,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.exporter.writing",{"_index":1922,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.hint",{"_index":1910,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.info",{"_index":1907,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.friendly.names.question",{"_index":1905,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.loading",{"_index":514,"title":{},"body":{"components/BannerActivityReporterComponent.html":{}}}],["this.translationservice.translateasync('vcd.cc.no",{"_index":1901,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.hint",{"_index":1914,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.info",{"_index":1916,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.sanitize.question",{"_index":1912,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.select.columns",{"_index":1895,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync('vcd.cc.yes",{"_index":1899,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.translationservice.translateasync(this.paginationtranslationkey",{"_index":1599,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.type",{"_index":2787,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.unit",{"_index":2249,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["this.unitdropdown",{"_index":3161,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unitformattter.bestformat(value",{"_index":3164,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unitformcontrol.setvalue(this.component.unitoptions[0].getmultiplier",{"_index":3281,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["this.unitoptions",{"_index":2250,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.unitoptions.foreach(unitoption",{"_index":3096,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unitoptions.length",{"_index":2251,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.unitoptions[0",{"_index":2252,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{}}}],["this.unlimitedvalue",{"_index":3146,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["this.unsubscribeall",{"_index":2942,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["this.updatecolumnsconfig",{"_index":1352,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.updatepagination",{"_index":1406,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.updateprogress.bind(this",{"_index":1953,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["this.updateselecteditems",{"_index":1374,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.viewcontainerref.createcomponent(componentfactory",{"_index":1734,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.viewcontainerref.remove",{"_index":1738,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["this.viewinitted",{"_index":1372,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["this.wrap",{"_index":2478,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["this.writevalue(this.initialvalue",{"_index":2793,"title":{},"body":{"components/FormInputComponent.html":{}}}],["this.writingmessage",{"_index":1991,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["those",{"_index":2049,"title":{},"body":{"classes/DatagridFilter.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/SearchSection.html":{}}}],["thousands",{"_index":1025,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["thousandsunit",{"_index":930,"title":{"classes/ThousandsUnit.html":{}},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"coverage.html":{}}}],["thousandsunit:105",{"_index":988,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:11",{"_index":967,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:12",{"_index":968,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:24",{"_index":993,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:28",{"_index":997,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:37",{"_index":996,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:45",{"_index":992,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:54",{"_index":1004,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:61",{"_index":998,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:71",{"_index":989,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["thousandsunit:89",{"_index":976,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["three",{"_index":3032,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["through",{"_index":1590,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"index.html":{}}}],["throw",{"_index":1395,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["thrown",{"_index":1935,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["throws",{"_index":1496,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["thz",{"_index":2885,"title":{},"body":{"classes/Hertz.html":{}}}],["time",{"_index":1040,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{}}}],["timer",{"_index":1069,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["times",{"_index":2602,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tip",{"_index":1062,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tip.clearhidetimeout",{"_index":1113,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container",{"_index":1091,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.appendchild(tip.content",{"_index":1100,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.classlist.add('tooltip",{"_index":1093,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.style.opacity",{"_index":1120,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.container.style.visibility",{"_index":1126,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content",{"_index":1094,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.addeventlistener('transitionend",{"_index":1105,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.add('tooltip",{"_index":1095,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.add(tip.calculateposition(rect",{"_index":1146,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.classlist.remove(tl",{"_index":1145,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.innerhtml",{"_index":1147,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.removeeventlistener('transitionend",{"_index":1110,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.style.opacity",{"_index":1121,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.content.style.visibility",{"_index":1127,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.create",{"_index":1204,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.currentdirective",{"_index":1122,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.hostelement",{"_index":1080,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.mouseoutdelay",{"_index":1090,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currentdirective.tooltipsize",{"_index":1082,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.currenthost",{"_index":1130,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.destroy",{"_index":1219,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.hidetimeout",{"_index":1117,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.hidetooltip(this.mouseoutdelay",{"_index":1223,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tip.hidetooltip(tip.mouseoutdelay",{"_index":1115,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ismouseover",{"_index":1119,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.onmouseenter",{"_index":1103,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.onmouseleave",{"_index":1104,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ontransitionend",{"_index":1106,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.ontransitionend(event",{"_index":1234,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["tip.update",{"_index":1222,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["title",{"_index":131,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tl",{"_index":1048,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["to]).getstring",{"_index":2272,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["todo",{"_index":876,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"injectables/UnitFormatter.html":{},"miscellaneous/variables.html":{}}}],["together",{"_index":3335,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["toggle",{"_index":829,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/FormCheckboxComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["toggler",{"_index":870,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["toggleswitch",{"_index":2725,"title":{},"body":{"components/FormCheckboxComponent.html":{},"miscellaneous/enumerations.html":{}}}],["toggling",{"_index":865,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["toinput",{"_index":2214,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["tooltip",{"_index":252,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipcontent",{"_index":3476,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipcount",{"_index":3474,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipposition",{"_index":1047,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.bl",{"_index":1166,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.br",{"_index":1168,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.tl",{"_index":1165,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition.tr",{"_index":1167,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["tooltipposition[key",{"_index":3538,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipsize",{"_index":1043,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tooltipsize.md",{"_index":1197,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["tooltiptext",{"_index":3473,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["tooltipvisibility",{"_index":3475,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["top",{"_index":844,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"components/FormInputComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["topic",{"_index":3770,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["topmost",{"_index":3401,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["tosubscriber",{"_index":2931,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["total",{"_index":850,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["totalitems",{"_index":1286,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["touch",{"_index":686,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["tr",{"_index":1050,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["trackby",{"_index":1366,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["trackbyfunction",{"_index":1248,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["tracker",{"_index":2937,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"classes/SubscriptionTracker.html":{}}}],["tracker.ts",{"_index":2910,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{},"coverage.html":{}}}],["tracker.ts:18",{"_index":2919,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:28",{"_index":2926,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:33",{"_index":2928,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{}}}],["tracker.ts:40",{"_index":3606,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:53",{"_index":3608,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:64",{"_index":3609,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["tracker.ts:74",{"_index":3610,"title":{},"body":{"classes/SubscriptionTracker.html":{}}}],["transform",{"_index":2877,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["transform(item",{"_index":2878,"title":{},"body":{"pipes/FunctionRendererPipe.html":{},"pipes/NestedPropertyPipe.html":{}}}],["transformed",{"_index":857,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["transitionend",{"_index":4129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translate",{"_index":2208,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{}}}],["translated",{"_index":515,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["translating",{"_index":1467,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["translation",{"_index":999,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SelectOption.html":{},"interfaces/SortedColumn.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["translationkey",{"_index":2854,"title":{},"body":{"classes/FormValidators.html":{}}}],["translationservice",{"_index":511,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"injectables/UnitFormatter.html":{}}}],["translationservice.translate",{"_index":4115,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["translationservice.translateasync",{"_index":4116,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tree",{"_index":154,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["tried",{"_index":1995,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["tries",{"_index":1540,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["trigger",{"_index":201,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["triggered",{"_index":620,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["true",{"_index":97,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"injectables/SpotlightSearchService.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":891,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"contributing.html":{}}}],["trying",{"_index":1023,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["tsdoc",{"_index":3784,"title":{},"body":{"contributing.html":{}}}],["tsickle",{"_index":3988,"title":{},"body":{"dependencies.html":{}}}],["tslib",{"_index":3990,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":793,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["tslint:enable:directive",{"_index":3081,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["turn",{"_index":384,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["turned",{"_index":1803,"title":{},"body":{"injectables/CsvExporterService.html":{},"miscellaneous/functions.html":{}}}],["turns",{"_index":404,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["two",{"_index":2358,"title":{},"body":{"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{}}}],["type",{"_index":18,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"interfaces/ActivityResponse.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CanBeReadOnly.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ComponentRenderer.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MockRecord.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(${index",{"_index":2041,"title":{},"body":{"classes/DataExporterWidgetObject.html":{}}}],["typealiases",{"_index":4109,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":314,"title":{},"body":{"components/ActionMenuComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["types",{"_index":936,"title":{},"body":{"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"classes/Hertz.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/Unit.html":{},"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":2671,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["typically",{"_index":2599,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"index.html":{}}}],["typing",{"_index":3594,"title":{},"body":{"interfaces/SpotlightSearchProvider.html":{}}}],["u00a0",{"_index":700,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["ui",{"_index":436,"title":{},"body":{"classes/ActivityReporter.html":{},"classes/Bytes.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unamed",{"_index":2868,"title":{},"body":{"interfaces/FunctionRenderer.html":{},"interfaces/PaginationCallback.html":{}}}],["undefined",{"_index":195,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/ObjectAndResponse.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":120,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{}}}],["understand",{"_index":774,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{}}}],["understands",{"_index":382,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["unique",{"_index":78,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/IdGenerator.html":{},"interfaces/InternalRegistrationData.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":361,"title":{"classes/Unit.html":{}},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"classes/Bytes.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/Hertz.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/Percent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"modules/VcdFormModule.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unit(val",{"_index":2253,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["unit.gb",{"_index":3635,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit.getmultiplier",{"_index":3272,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unit.kb",{"_index":3633,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit.mb",{"_index":3634,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["unit:11",{"_index":969,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:12",{"_index":970,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:24",{"_index":1009,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:28",{"_index":1011,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:37",{"_index":1010,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:45",{"_index":1008,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:54",{"_index":1013,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:61",{"_index":1012,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unit:71",{"_index":1007,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{}}}],["unitdropdown",{"_index":3093,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitformatter",{"_index":3077,"title":{"injectables/UnitFormatter.html":{}},"body":{"directives/MinMaxValidator.html":{},"injectables/UnitFormatter.html":{},"modules/VcdFormModule.html":{},"coverage.html":{},"overview.html":{}}}],["unitformattter",{"_index":3112,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitformcontrol",{"_index":3229,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unitlist",{"_index":3304,"title":{},"body":{"classes/Percent.html":{}}}],["unitname",{"_index":1000,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{}}}],["unitnametranslationkeyprefix",{"_index":937,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["unitoption",{"_index":3101,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoption.getmultiplier",{"_index":3099,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoption.getunitname",{"_index":3098,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoptions",{"_index":2216,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{},"miscellaneous/functions.html":{}}}],["unitoptions(unitoptions",{"_index":3095,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unitoptions(val",{"_index":2247,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["units",{"_index":980,"title":{},"body":{"classes/Bytes.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/FormInputComponent.html":{},"classes/Hertz.html":{},"directives/MinMaxValidator.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"contributing.html":{}}}],["unittranslationkey",{"_index":3293,"title":{},"body":{"classes/Percent.html":{}}}],["unittypes",{"_index":1028,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["unknown",{"_index":689,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"injectables/CsvExporterService.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"pipes/NestedPropertyPipe.html":{}}}],["unless",{"_index":1369,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unlimited",{"_index":3088,"title":{},"body":{"directives/MinMaxValidator.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unlimitedformcontrol",{"_index":3227,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["unlimitedvalue",{"_index":3103,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["unregister",{"_index":3000,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["unregisterprovider",{"_index":3601,"title":{},"body":{"injectables/SpotlightSearchService.html":{}}}],["unregisterprovider(registrationid",{"_index":3004,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["unregistration",{"_index":3001,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["unset",{"_index":135,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unspecificed",{"_index":1408,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["unsubscribe",{"_index":2913,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribe(subscription",{"_index":2925,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribeall",{"_index":2915,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unsubscribes",{"_index":2927,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["until",{"_index":3559,"title":{},"body":{"components/SpinnerActivityReporterComponent.html":{}}}],["untracked",{"_index":2950,"title":{},"body":{"interfaces/ISubscriptionTracker.html":{},"classes/SubscriptionTracker.html":{}}}],["unwatchevents",{"_index":3910,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["unwatchevents(el",{"_index":1176,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["unwatchevents(this.hostelement",{"_index":1218,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["unwatchevents(tip.container",{"_index":1109,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":22,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["update",{"_index":1128,"title":{},"body":{"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["updatecolumnsconfig",{"_index":1485,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updated",{"_index":580,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["updatepagination",{"_index":1634,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updateprogress",{"_index":1842,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["updateprogress(progress",{"_index":2002,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["updates",{"_index":1343,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updateselecteditems",{"_index":1538,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["updating",{"_index":1371,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["upon",{"_index":1354,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"index.html":{}}}],["upper",{"_index":2432,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["upstream",{"_index":3807,"title":{},"body":{"contributing.html":{}}}],["url",{"_index":1790,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["url.createobjecturl(blob",{"_index":1791,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["urn",{"_index":2396,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["usage",{"_index":756,"title":{},"body":{"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{}}}],["use",{"_index":457,"title":{},"body":{"classes/ActivityReporter.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SubscriptionTracker.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":2533,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["used",{"_index":113,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/BaseFormControl.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/RegisteredProviders.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"interfaces/SpotlightSearchResult.html":{},"injectables/SpotlightSearchService.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useexisting",{"_index":3070,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["user",{"_index":106,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"interfaces/SpotlightSearchProvider.html":{},"interfaces/SpotlightSearchResult.html":{},"miscellaneous/variables.html":{}}}],["useroptions",{"_index":1861,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"miscellaneous/enumerations.html":{}}}],["useroptions.friendlynames",{"_index":1945,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["useroptions.sanitize",{"_index":1946,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["useroptions.selectall",{"_index":1943,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["uses",{"_index":1684,"title":{},"body":{"interfaces/ComponentRenderer.html":{},"interfaces/ComponentRendererSpec.html":{}}}],["usevalue",{"_index":2534,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["using",{"_index":109,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DatagridFilter.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"contributing.html":{},"index.html":{}}}],["utf",{"_index":2755,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["util",{"_index":3641,"title":{},"body":{"injectables/UnitFormatter.html":{}}}],["util.ts",{"_index":1667,"title":{},"body":{"classes/CommonUtil.html":{},"coverage.html":{}}}],["util.ts:12",{"_index":1671,"title":{},"body":{"classes/CommonUtil.html":{}}}],["utility",{"_index":911,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"pipes/NestedPropertyPipe.html":{},"miscellaneous/functions.html":{}}}],["utils.ts",{"_index":2506,"title":{},"body":{"components/FilterTestHostComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["utils.ts:102",{"_index":2520,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:110",{"_index":2518,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:112",{"_index":2521,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils.ts:119",{"_index":2514,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["utils/filter",{"_index":2173,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["utils/id",{"_index":727,"title":{},"body":{"classes/BaseFormControl.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["utils/test",{"_index":3262,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["utils/test/datagrid/vcd",{"_index":785,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["utils/test/widget",{"_index":787,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{}}}],["utils/unit/unit",{"_index":2244,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"directives/MinMaxValidator.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"modules/VcdFormModule.html":{}}}],["ux",{"_index":644,"title":{},"body":{"classes/BaseFormControl.html":{}}}],["v",{"_index":918,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{},"miscellaneous/functions.html":{}}}],["v.results",{"_index":3421,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["v[0",{"_index":4091,"title":{},"body":{"index.html":{}}}],["val",{"_index":699,"title":{},"body":{"classes/BaseFormControl.html":{},"classes/DatagridFilter.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/ErrorBannerComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"pipes/FunctionRendererPipe.html":{}}}],["validate",{"_index":3072,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validate(control",{"_index":3075,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validates",{"_index":2848,"title":{},"body":{"classes/FormValidators.html":{}}}],["validation",{"_index":724,"title":{},"body":{"classes/BaseFormControl.html":{},"directives/MinMaxValidator.html":{}}}],["validationerrors",{"_index":3076,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validations",{"_index":2843,"title":{},"body":{"classes/FormValidators.html":{}}}],["validator",{"_index":2850,"title":{},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["validator(control",{"_index":2862,"title":{},"body":{"classes/FormValidators.html":{}}}],["validatorfn",{"_index":2852,"title":{},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["validators",{"_index":2842,"title":{},"body":{"classes/FormValidators.html":{},"directives/MinMaxValidator.html":{}}}],["validators.compose(validators)(control",{"_index":3086,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validators.push(validators.max(this.max",{"_index":3085,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validators.push(validators.min(this.min",{"_index":3083,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["validators.required(control",{"_index":2861,"title":{},"body":{"classes/FormValidators.html":{}}}],["validatorunlimited",{"_index":3115,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["value",{"_index":198,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"classes/CommonUtil.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/Hertz.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/IdGenerator.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"pipes/NestedPropertyPipe.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"classes/Percent.html":{},"interfaces/SearchSection.html":{},"interfaces/SelectOption.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/SubscriptionTracker.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["value.tostring",{"_index":3171,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["value.tostring(10",{"_index":2786,"title":{},"body":{"components/FormInputComponent.html":{}}}],["value[nestedprop",{"_index":3212,"title":{},"body":{"pipes/NestedPropertyPipe.html":{}}}],["valueformcontrol",{"_index":3228,"title":{},"body":{"classes/NumberWithUnitFormInputWidgetObject.html":{}}}],["values",{"_index":2077,"title":{},"body":{"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"pipes/FunctionRendererPipe.html":{}}}],["values.foreach(frmctrl",{"_index":2189,"title":{},"body":{"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{}}}],["values[0",{"_index":2260,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["values[1",{"_index":2263,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"classes/FilterBuilder.html":{}}}],["valuewithunittranslationkey",{"_index":3294,"title":{},"body":{"classes/Percent.html":{}}}],["valuewithunittranslationkeyprefix",{"_index":938,"title":{},"body":{"classes/Bytes.html":{},"classes/Hertz.html":{}}}],["var",{"_index":323,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["variable",{"_index":2781,"title":{},"body":{"components/FormInputComponent.html":{},"coverage.html":{}}}],["variables",{"_index":4117,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1322,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcd",{"_index":167,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/BoldTextRendererConfig.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["vcd.cc.cpu.speed.unit",{"_index":2903,"title":{},"body":{"classes/Hertz.html":{}}}],["vcd.cc.display.percent",{"_index":3298,"title":{},"body":{"classes/Percent.html":{}}}],["vcd.cc.filesize.unit",{"_index":965,"title":{},"body":{"classes/Bytes.html":{}}}],["vcd.cc.grid.default.pagination",{"_index":1276,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/variables.html":{}}}],["vcd.cc.units.bytes",{"_index":963,"title":{},"body":{"classes/Bytes.html":{}}}],["vcd.cc.units.hertz",{"_index":2901,"title":{},"body":{"classes/Hertz.html":{}}}],["vcd.cc.units.percent",{"_index":3297,"title":{},"body":{"classes/Percent.html":{}}}],["vcd.cc.warning.numrange",{"_index":3114,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["vcd/i18n",{"_index":537,"title":{},"body":{"components/BannerActivityReporterComponent.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FilterTestHostComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"interfaces/SortedColumn.html":{},"modules/SpotlightSearchModule.html":{},"injectables/UnitFormatter.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["vcd/route",{"_index":4046,"title":{},"body":{"index.html":{}}}],["vcd/ui",{"_index":4028,"title":{},"body":{"index.html":{}}}],["vcdactionmenumodule",{"_index":3646,"title":{"modules/VcdActionMenuModule.html":{}},"body":{"modules/VcdActionMenuModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdactivityreportermodule",{"_index":3652,"title":{"modules/VcdActivityReporterModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdcomponentrendereroutlet",{"_index":1700,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["vcdcomponentrendereroutlet(renderer",{"_index":1721,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["vcdcomponentrendereroutlet]'},{'name",{"_index":370,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["vcdcomponentsmodule",{"_index":3666,"title":{"modules/VcdComponentsModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddataexportermodule",{"_index":3669,"title":{"modules/VcdDataExporterModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddatagridmodule",{"_index":2525,"title":{"modules/VcdDatagridModule.html":{}},"body":{"components/FilterTestHostComponent.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules.html":{},"overview.html":{}}}],["vcddatagridwidgetobject",{"_index":784,"title":{"classes/VcdDatagridWidgetObject.html":{}},"body":{"classes/BoldTextRendererWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"coverage.html":{}}}],["vcddgstate",{"_index":1577,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcddgstate.filters",{"_index":1582,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcddgstate.sortcolumn",{"_index":1587,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["vcderrorbannermodule",{"_index":3657,"title":{"modules/VcdErrorBannerModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdformmodule",{"_index":3670,"title":{"modules/VcdFormModule.html":{}},"body":{"modules/VcdComponentsModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdFormModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdloadingindicatormodule",{"_index":3658,"title":{"modules/VcdLoadingIndicatorModule.html":{}},"body":{"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"modules.html":{},"overview.html":{}}}],["vcdshowclippedtext",{"_index":375,"title":{},"body":{"components/ActionMenuComponent.html":{},"components/BannerActivityReporterComponent.html":{},"components/BoldTextRendererComponent.html":{},"interfaces/CliptextConfig.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"components/ErrorBannerComponent.html":{},"components/FilterTestHostComponent.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"components/LoadingIndicatorComponent.html":{},"directives/ShowClippedTextDirective.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"components/SpinnerActivityReporterComponent.html":{}}}],["verbosity",{"_index":2386,"title":{},"body":{"classes/FilterBuilder.html":{}}}],["verify",{"_index":3394,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["version",{"_index":4054,"title":{},"body":{"index.html":{}}}],["very",{"_index":2977,"title":{},"body":{"interfaces/InternalRegistrationData.html":{},"interfaces/RegisteredProviders.html":{},"injectables/SpotlightSearchService.html":{}}}],["via",{"_index":4064,"title":{},"body":{"index.html":{}}}],["view",{"_index":1339,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewable",{"_index":1859,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["viewchild",{"_index":1249,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DataExportRequestEvent.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormInputComponent.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"directives/MinMaxValidator.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild('actionreporter",{"_index":1463,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild('div",{"_index":3547,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewchild('div2",{"_index":3549,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewchild('from",{"_index":2231,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["viewchild('searchinput",{"_index":3364,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["viewchild('textinput",{"_index":2776,"title":{},"body":{"components/FormInputComponent.html":{}}}],["viewchild('to",{"_index":2235,"title":{},"body":{"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{}}}],["viewchild('unitdropdown",{"_index":3092,"title":{},"body":{"directives/MinMaxValidator.html":{}}}],["viewchild(clrdatagrid",{"_index":1459,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild(clrdatagridpagination",{"_index":1460,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["viewchild(clrdropdown",{"_index":1876,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["viewchild(showclippedtextdirective",{"_index":3546,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["viewcontainerref",{"_index":1707,"title":{},"body":{"directives/ComponentRendererOutletDirective.html":{}}}],["viewinitted",{"_index":1465,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["visibility",{"_index":1143,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormSelectComponent.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["visible",{"_index":38,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["visual",{"_index":3340,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["vmw/ng",{"_index":3955,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["vmw/plain",{"_index":3957,"title":{},"body":{"dependencies.html":{}}}],["vmware",{"_index":2376,"title":{},"body":{"components/ErrorBannerComponent.html":{},"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"index.html":{}}}],["vmware/master",{"_index":3808,"title":{},"body":{"contributing.html":{}}}],["vmware/vmware",{"_index":4079,"title":{},"body":{"index.html":{}}}],["void",{"_index":59,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"components/ActionMenuComponent.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BaseFormControl.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"directives/ComponentRendererOutletDirective.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/ExportColumn.html":{},"classes/FilterBuilder.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/FunctionRenderer.html":{},"pipes/FunctionRendererPipe.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/ISubscriptionTracker.html":{},"components/LoadingIndicatorComponent.html":{},"directives/MinMaxValidator.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SearchSection.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"interfaces/SortedColumn.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"interfaces/SpotlightSearchResult.html":{},"classes/SubscriptionTracker.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["vs",{"_index":3801,"title":{},"body":{"contributing.html":{}}}],["wait",{"_index":1084,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":124,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["warning",{"_index":2355,"title":{},"body":{"components/ErrorBannerComponent.html":{}}}],["watchevents",{"_index":3911,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["watchevents(el",{"_index":1172,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/functions.html":{}}}],["watchevents(this.hostelement",{"_index":1205,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["watchevents(tip.container",{"_index":1102,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["way",{"_index":811,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"components/ErrorBannerComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/SearchSection.html":{}}}],["ways",{"_index":143,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"miscellaneous/enumerations.html":{}}}],["we're",{"_index":1230,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["webcomponents/webcomponentsjs",{"_index":3960,"title":{},"body":{"dependencies.html":{}}}],["welcomes",{"_index":3751,"title":{},"body":{"contributing.html":{}}}],["wessberg/ts",{"_index":3962,"title":{},"body":{"dependencies.html":{}}}],["whenever",{"_index":568,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/ColumnConfigInternal.html":{},"directives/ComponentRendererOutletDirective.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"components/DatagridNumericFilterComponent.html":{},"components/DatagridSelectFilterComponent.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["whether",{"_index":82,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BaseFormControl.html":{},"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"injectables/CsvExporterService.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/ExportColumn.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["white",{"_index":2837,"title":{},"body":{"components/FormSelectComponent.html":{}}}],["whitespace",{"_index":1213,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{}}}],["whole",{"_index":1826,"title":{},"body":{"injectables/CsvExporterService.html":{}}}],["whose",{"_index":838,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"classes/Bytes.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"classes/Hertz.html":{},"classes/Percent.html":{},"classes/ThousandsUnit.html":{},"classes/Unit.html":{}}}],["widget",{"_index":592,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/DatagridFilter.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridNumericFilterComponent.html":{},"interfaces/DatagridNumericFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"components/DatagridStringFilterComponent.html":{},"interfaces/FilterConfig.html":{},"interfaces/FilterRendererSpec.html":{},"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormInputComponent.html":{},"interfaces/HasFinder.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetfinder",{"_index":2513,"title":{"classes/WidgetFinder.html":{}},"body":{"components/FilterTestHostComponent.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["widgetfinder#find",{"_index":2648,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetfinder#findwidgets",{"_index":2647,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgetfinder(filtertesthostcomponent",{"_index":2547,"title":{},"body":{"components/FilterTestHostComponent.html":{}}}],["widgetobject",{"_index":547,"title":{"classes/WidgetObject.html":{}},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"coverage.html":{}}}],["widgetobject:101",{"_index":622,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:115",{"_index":603,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:123",{"_index":608,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:127",{"_index":600,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:42",{"_index":564,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:45",{"_index":588,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:54",{"_index":590,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:62",{"_index":596,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:73",{"_index":575,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgetobject:87",{"_index":611,"title":{},"body":{"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"classes/DataExporterWidgetObject.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/VcdDatagridWidgetObject.html":{}}}],["widgets",{"_index":2568,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgets.length",{"_index":2679,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["widgets[0",{"_index":2682,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["width",{"_index":1136,"title":{},"body":{"interfaces/CliptextConfig.html":{},"components/FormInputComponent.html":{},"directives/ShowClippedTextDirective.html":{},"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{},"miscellaneous/variables.html":{}}}],["width(width",{"_index":3516,"title":{},"body":{"classes/ShowClippedTextDirectiveTestHelper.html":{},"components/ShowClippedTextDirectiveTestHostComponent.html":{}}}],["widthsettimes",{"_index":1466,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["wildcardcharacter",{"_index":2315,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["wildcardposition",{"_index":2314,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["wildcardposition.end",{"_index":2324,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"components/FilterTestHostComponent.html":{},"miscellaneous/functions.html":{}}}],["wildcardposition.start",{"_index":2323,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["window",{"_index":1158,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["window.requestanimationframe",{"_index":1996,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["window.settimeout",{"_index":1118,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["wired",{"_index":1340,"title":{},"body":{"interfaces/ColumnConfigInternal.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/SortedColumn.html":{}}}],["withgridboldrenderer",{"_index":3893,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["withgridboldrenderer(base",{"_index":4019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["withgridboldrenderer>>(base",{"_index":795,"title":{},"body":{"classes/BoldTextRendererWidgetObject.html":{}}}],["within",{"_index":80,"title":{},"body":{"interfaces/ActionDisplayConfig.html":{},"interfaces/ActionItem.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/CliptextConfig.html":{},"interfaces/ColumnConfigInternal.html":{},"classes/DataExporterWidgetObject.html":{},"components/DatagridMultiSelectFilterComponent.html":{},"interfaces/DatagridMultiSelectFilterConfig.html":{},"components/DatagridSelectFilterComponent.html":{},"interfaces/DatagridSelectFilterConfig.html":{},"interfaces/DetailPane.html":{},"interfaces/DetailPaneConfig.html":{},"interfaces/DetailRowConfig.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"classes/FormValidators.html":{},"interfaces/GridDataFetchResult.html":{},"interfaces/GridState.html":{},"interfaces/HasFinder.html":{},"interfaces/InternalRegistrationData.html":{},"components/LoadingIndicatorComponent.html":{},"interfaces/MultiSelectOption.html":{},"interfaces/MultiSelectOptionInternal.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"interfaces/PaginationCallback.html":{},"interfaces/PaginationConfiguration.html":{},"interfaces/PagionationInformation.html":{},"interfaces/RegisteredProviders.html":{},"directives/ShowClippedTextDirective.html":{},"interfaces/SortedColumn.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"injectables/SpotlightSearchService.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["without",{"_index":423,"title":{},"body":{"classes/ActivityPromiseResolver.html":{},"interfaces/ActivityResponse.html":{},"interfaces/ObjectAndResponse.html":{}}}],["wo.ts",{"_index":2596,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor",{"_index":2559,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor(this.fixture",{"_index":2673,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["woconstructor.tagname",{"_index":2667,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wordbreak",{"_index":1140,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["work",{"_index":897,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{},"interfaces/HasFinder.html":{},"interfaces/SearchSection.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"contributing.html":{}}}],["worked",{"_index":900,"title":{},"body":{"interfaces/Button.html":{},"interfaces/ButtonConfig.html":{},"interfaces/ColumnRendererSpec.html":{},"interfaces/ContextualButton.html":{},"interfaces/ContextualButtonConfig.html":{},"interfaces/FunctionRenderer.html":{},"interfaces/GlobalButton.html":{},"interfaces/GridColumn.html":{}}}],["workflow",{"_index":3768,"title":{},"body":{"contributing.html":{}}}],["working",{"_index":3754,"title":{},"body":{"contributing.html":{}}}],["works",{"_index":3344,"title":{},"body":{"interfaces/SearchSection.html":{}}}],["wrap",{"_index":2322,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{},"classes/FilterBuilder.html":{},"miscellaneous/enumerations.html":{}}}],["wrapcharacter",{"_index":2318,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["wrapped",{"_index":2591,"title":{},"body":{"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"interfaces/HasFinder.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wrapper",{"_index":642,"title":{},"body":{"classes/BaseFormControl.html":{},"interfaces/FindParams.html":{},"interfaces/FindableWidget.html":{},"components/FormCheckboxComponent.html":{},"components/FormSelectComponent.html":{},"classes/FormValidators.html":{},"interfaces/HasFinder.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{}}}],["wraps",{"_index":2317,"title":{},"body":{"components/DatagridStringFilterComponent.html":{},"interfaces/DatagridStringFilterConfig.html":{}}}],["write",{"_index":3837,"title":{},"body":{"contributing.html":{}}}],["writevalue",{"_index":663,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["writevalue(val",{"_index":697,"title":{},"body":{"classes/BaseFormControl.html":{},"components/FormCheckboxComponent.html":{},"components/FormInputComponent.html":{},"components/FormSelectComponent.html":{}}}],["writevalue(value",{"_index":2770,"title":{},"body":{"components/FormInputComponent.html":{},"directives/MinMaxValidator.html":{}}}],["writing",{"_index":1920,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["writingmessage",{"_index":1921,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["written",{"_index":3789,"title":{},"body":{"contributing.html":{}}}],["wrote",{"_index":3761,"title":{},"body":{"contributing.html":{}}}],["x",{"_index":1160,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["y",{"_index":1161,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":216,"title":{},"body":{"components/ActionMenuComponent.html":{},"classes/ActivityPromiseResolver.html":{},"classes/ActivityReporter.html":{},"components/BannerActivityReporterComponent.html":{},"classes/BannerActivityReporterWidgetObject.html":{},"classes/BoldTextRendererWidgetObject.html":{},"interfaces/DataExportRequestEvent.html":{},"classes/DataExporterWidgetObject.html":{},"interfaces/ExportColumn.html":{},"interfaces/ISubscriptionTracker.html":{},"classes/NumberWithUnitFormInputWidgetObject.html":{},"components/SpinnerActivityReporterComponent.html":{},"classes/SpinnerActivityReporterWidgetObject.html":{},"classes/SubscriptionTracker.html":{},"injectables/UnitFormatter.html":{},"classes/VcdDatagridWidgetObject.html":{},"classes/WidgetFinder.html":{},"classes/WidgetObject.html":{},"miscellaneous/functions.html":{}}}],["yestext",{"_index":1898,"title":{},"body":{"interfaces/DataExportRequestEvent.html":{},"interfaces/ExportColumn.html":{}}}],["you'll",{"_index":3821,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["z",{"_index":3061,"title":{},"body":{"components/LoadingIndicatorComponent.html":{}}}],["zero_to_1",{"_index":3292,"title":{},"body":{"classes/Percent.html":{}}}],["zero_to_100",{"_index":3291,"title":{},"body":{"classes/Percent.html":{}}}],["zindex",{"_index":1098,"title":{},"body":{"interfaces/CliptextConfig.html":{},"directives/ShowClippedTextDirective.html":{},"miscellaneous/variables.html":{}}}],["zone.js",{"_index":3992,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":3316,"title":{},"body":{"modules/PipesModule.html":{},"modules/ShowClippedTextDirectiveModule.html":{},"modules/SpotlightSearchModule.html":{},"modules/VcdActionMenuModule.html":{},"modules/VcdActivityReporterModule.html":{},"modules/VcdComponentsModule.html":{},"modules/VcdDataExporterModule.html":{},"modules/VcdDatagridModule.html":{},"modules/VcdErrorBannerModule.html":{},"modules/VcdFormModule.html":{},"modules/VcdLoadingIndicatorModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionDisplayConfig.html":{"url":"interfaces/ActionDisplayConfig.html","title":"interface - ActionDisplayConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActionDisplayConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/action-item.interface.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of actions that are not static/featured\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        contextual\n                                \n                                \n                                            Optional\n                                        staticActionStyling\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contextual\n                                    \n                                \n                                \n                                    \n                                        contextual:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How the contextual actions list shows up on the screen\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        staticActionStyling\n                                    \n                                \n                                \n                                    \n                                        staticActionStyling:         ActionStyling\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionStyling\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How the static actions list shows up on the screen\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum ActionType {\n    /**\n     * Global actions that are displayed always irrespective of the context. These display as the first set of actions\n     */\n    STATIC_FEATURED = 'STATIC_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in the main menu section\n     */\n    CONTEXTUAL_FEATURED = 'CONTEXTUAL_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in a sub menu\n     */\n    CONTEXTUAL = 'CONTEXTUAL',\n    /**\n     * Actions that are not context dependent. These display after the above 3 buckets of actions\n     */\n    STATIC = 'STATIC',\n}\n\n/**\n * Type of {@link ActionItem.handler} function\n */\nexport type ActionHandlerType = (selectedEntities?: R[], handlerData?: T) => Promise | void;\n\n/**\n * Data required for displaying an action item in a menu.\n * T is the type of custom data passed to action handler\n * R is the type of selected entity on which the action will be performed\n */\nexport interface ActionItem {\n    /**\n     * The i18n key for the text of the button\n     */\n    textKey?: string;\n    /**\n     * The css class the button should have.\n     *\n     * Must be unique among all added actions within an action list\n     */\n    class?: string;\n    /**\n     * Condition whether or not the action is available.\n     * @param records Single item in case of an operation on single record and multiple in case of an operation on batch\n     * selection\n     */\n    availability?: (records?: R[]) => boolean;\n    /**\n     * Indicates if an action that is available should be disabled. If true, a non available action is disabled.\n     * If false, a non-available action is hidden\n     */\n    disabled?: (records?: R[]) => boolean | boolean;\n    /**\n     * The key that will be fired with the action.\n     */\n    action?: string;\n    /**\n     * The function to be executed when the button is clicked.\n     *\n     * Actions that require additional user input can collect it using handlerData which will be passed as an argument\n     * to the handler call\n     */\n    handler?: ActionHandlerType;\n    /**\n     * Custom data that will be passed when handler is called\n     */\n    handlerData?: T;\n    /**\n     * Used for determining where in the action menu this action gets displayed\n     */\n    actionType?: ActionType;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon?: string;\n    /**\n     * List of actions that will be grouped under this action\n     */\n    children?: ActionItem[];\n}\n\n/**\n * Configuration of actions that are not static/featured\n */\nexport interface ActionDisplayConfig {\n    /**\n     * How the contextual actions list shows up on the screen\n     */\n    contextual?: {\n        /**\n         * How many buttons should display on the featured section.\n         *\n         * Used when you want to set a limit on the number of featured buttons shown.\n         *\n         * If featuredCount is not set, it will default to all featured actions.\n         */\n        featuredCount?: number;\n        /**\n         * How the featured actions should be displayed\n         */\n        styling?: ActionStyling;\n        /**\n         * If the title should be the button label, icon, or both\n         * Defaults to ICON if unset.\n         */\n        buttonContents?: TextIcon;\n    };\n\n    /**\n     * How the static actions list shows up on the screen\n     */\n    staticActionStyling?: ActionStyling;\n}\n\n/**\n * Display options for action menu\n */\nexport enum ActionStyling {\n    INLINE = 'INLINE',\n    DROPDOWN = 'DROPDOWN',\n}\n\n/**\n * An enum that describes the possible ways to display the button title.\n */\nexport enum TextIcon {\n    ICON = 1 \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActionItem.html":{"url":"interfaces/ActionItem.html","title":"interface - ActionItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActionItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/action-item.interface.ts\n        \n\n            \n                Description\n            \n            \n                Data required for displaying an action item in a menu.\nT is the type of custom data passed to action handler\nR is the type of selected entity on which the action will be performed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        action\n                                \n                                \n                                            Optional\n                                        actionType\n                                \n                                \n                                            Optional\n                                        availability\n                                \n                                \n                                            Optional\n                                        children\n                                \n                                \n                                            Optional\n                                        class\n                                \n                                \n                                            Optional\n                                        disabled\n                                \n                                \n                                            Optional\n                                        handler\n                                \n                                \n                                            Optional\n                                        handlerData\n                                \n                                \n                                            Optional\n                                        icon\n                                \n                                \n                                            Optional\n                                        textKey\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The key that will be fired with the action.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        actionType\n                                    \n                                \n                                \n                                    \n                                        actionType:         ActionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for determining where in the action menu this action gets displayed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        availability\n                                    \n                                \n                                \n                                    \n                                        availability:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Condition whether or not the action is available.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                    \n                                \n                                \n                                    \n                                        children:         ActionItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionItem[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of actions that will be grouped under this action\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The css class the button should have.\nMust be unique among all added actions within an action list\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                    \n                                \n                                \n                                    \n                                        disabled:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if an action that is available should be disabled. If true, a non available action is disabled.\nIf false, a non-available action is hidden\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         ActionHandlerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionHandlerType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The function to be executed when the button is clicked.\nActions that require additional user input can collect it using handlerData which will be passed as an argument\nto the handler call\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlerData\n                                    \n                                \n                                \n                                    \n                                        handlerData:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom data that will be passed when handler is called\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The Clarity icon of the contextual button that is displayed if the button is featured.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textKey\n                                    \n                                \n                                \n                                    \n                                        textKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The i18n key for the text of the button\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export enum ActionType {\n    /**\n     * Global actions that are displayed always irrespective of the context. These display as the first set of actions\n     */\n    STATIC_FEATURED = 'STATIC_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in the main menu section\n     */\n    CONTEXTUAL_FEATURED = 'CONTEXTUAL_FEATURED',\n    /**\n     * Actions that are visible when an entity is selected. These display in a sub menu\n     */\n    CONTEXTUAL = 'CONTEXTUAL',\n    /**\n     * Actions that are not context dependent. These display after the above 3 buckets of actions\n     */\n    STATIC = 'STATIC',\n}\n\n/**\n * Type of {@link ActionItem.handler} function\n */\nexport type ActionHandlerType = (selectedEntities?: R[], handlerData?: T) => Promise | void;\n\n/**\n * Data required for displaying an action item in a menu.\n * T is the type of custom data passed to action handler\n * R is the type of selected entity on which the action will be performed\n */\nexport interface ActionItem {\n    /**\n     * The i18n key for the text of the button\n     */\n    textKey?: string;\n    /**\n     * The css class the button should have.\n     *\n     * Must be unique among all added actions within an action list\n     */\n    class?: string;\n    /**\n     * Condition whether or not the action is available.\n     * @param records Single item in case of an operation on single record and multiple in case of an operation on batch\n     * selection\n     */\n    availability?: (records?: R[]) => boolean;\n    /**\n     * Indicates if an action that is available should be disabled. If true, a non available action is disabled.\n     * If false, a non-available action is hidden\n     */\n    disabled?: (records?: R[]) => boolean | boolean;\n    /**\n     * The key that will be fired with the action.\n     */\n    action?: string;\n    /**\n     * The function to be executed when the button is clicked.\n     *\n     * Actions that require additional user input can collect it using handlerData which will be passed as an argument\n     * to the handler call\n     */\n    handler?: ActionHandlerType;\n    /**\n     * Custom data that will be passed when handler is called\n     */\n    handlerData?: T;\n    /**\n     * Used for determining where in the action menu this action gets displayed\n     */\n    actionType?: ActionType;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon?: string;\n    /**\n     * List of actions that will be grouped under this action\n     */\n    children?: ActionItem[];\n}\n\n/**\n * Configuration of actions that are not static/featured\n */\nexport interface ActionDisplayConfig {\n    /**\n     * How the contextual actions list shows up on the screen\n     */\n    contextual?: {\n        /**\n         * How many buttons should display on the featured section.\n         *\n         * Used when you want to set a limit on the number of featured buttons shown.\n         *\n         * If featuredCount is not set, it will default to all featured actions.\n         */\n        featuredCount?: number;\n        /**\n         * How the featured actions should be displayed\n         */\n        styling?: ActionStyling;\n        /**\n         * If the title should be the button label, icon, or both\n         * Defaults to ICON if unset.\n         */\n        buttonContents?: TextIcon;\n    };\n\n    /**\n     * How the static actions list shows up on the screen\n     */\n    staticActionStyling?: ActionStyling;\n}\n\n/**\n * Display options for action menu\n */\nexport enum ActionStyling {\n    INLINE = 'INLINE',\n    DROPDOWN = 'DROPDOWN',\n}\n\n/**\n * An enum that describes the possible ways to display the button title.\n */\nexport enum TextIcon {\n    ICON = 1 \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ActionMenuComponent.html":{"url":"components/ActionMenuComponent.html","title":"component - ActionMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ActionMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/action-menu/action-menu.component.ts\n\n\n    \n        Description\n    \n    \n        Renders actions in screens containing grids, cards and details container\nR is the type of selected entity on which the action will be performed\nT is the type of custom data passed to action handler\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-action-menu\n            \n\n            \n                styleUrls\n                ./action-menu.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./action-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _actionDisplayConfig\n                            \n                            \n                                    Private\n                                _actions\n                            \n                            \n                                shouldShowIcon\n                            \n                            \n                                shouldShowText\n                            \n                            \n                                shouldShowTooltip\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAvailableActions\n                            \n                            \n                                getContextualActions\n                            \n                            \n                                getContextualFeaturedActions\n                            \n                            \n                                    Private\n                                getFlattenedActionList\n                            \n                            \n                                isActionDisabled\n                            \n                            \n                                runActionHandler\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                actionDisplayConfig\n                            \n                            \n                                actions\n                            \n                            \n                                btnText\n                            \n                            \n                                disabled\n                            \n                            \n                                entityUrn\n                            \n                            \n                                selectedEntities\n                            \n                            \n                                staticActionStyling\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                                \n                                    actionDisplayConfig\n                                \n                                \n                                    staticActions\n                                \n                                \n                                    staticFeaturedActions\n                                \n                                \n                                    shouldShowContextualActions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        actionDisplayConfig\n                    \n                \n                \n                    \n                        Type :         ActionDisplayConfig\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:71\n                            \n                        \n                \n                    \n                        Display configuration of static and contextual actions\nIf null or undefined is passed, default config _actionDisplayConfig is used\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n                \n                    \n                        Type :         ActionItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:47\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        btnText\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:26\n                            \n                        \n                \n                    \n                        Content of the action menu dropdown trigger button. Used when #actionDisplayConfig styling is\nActionStyling.DROPDOWN\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:31\n                            \n                        \n                \n                    \n                        Used for disabling the menu bar or menu dropdown\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        entityUrn\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedEntities\n                    \n                \n                \n                    \n                        Type :     R[]\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:36\n                            \n                        \n                \n                    \n                        List of selected entities required for contextual actions\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        staticActionStyling\n                    \n                \n                \n                    \n                        Type :         ActionStyling\n\n                    \n                \n                \n                    \n                        Default value : ActionStyling.INLINE\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:41\n                            \n                        \n                \n                    \n                        How the static actions get displayed\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAvailableActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetAvailableActions(actions: ActionItem[], selection?: R[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:103\n                \n            \n\n\n            \n                \n                    Returns actions that are either available or disabled\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    actions\n                                    \n                                                ActionItem[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    selection\n                                    \n                                            R[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getContextualActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetContextualActions(selection?: R[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:154\n                \n            \n\n\n            \n                \n                    Actions that depend on selected entities but belong to sub menu\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selection\n                                    \n                                            R[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The selected entities based on which the actions availability is calculated\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getContextualFeaturedActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetContextualFeaturedActions(selection: R[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:142\n                \n            \n\n\n            \n                \n                    Actions that depend on selected entities and belong to main menu list. The returned list length is less than the\nconfigured featured count in actionDisplayConfig\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selection\n                                    \n                                            R[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The selected entities based on which the actions availability is calculated\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getFlattenedActionList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlattenedActionList(actions: ActionItem[], actionType: ActionType)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    actions\n                                    \n                                                ActionItem[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    actionType\n                                    \n                                                ActionType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionItem[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActionDisabled\n                        \n                        \n                    \n                \n            \n            \n                \nisActionDisabled(action: ActionItem)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:172\n                \n            \n\n\n            \n                \n                    To disable a displayed action\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                ActionItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            runActionHandler\n                        \n                        \n                    \n                \n            \n            \n                \nrunActionHandler(action: ActionItem)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/action-menu/action-menu.component.ts:165\n                \n            \n\n\n            \n                \n                    Execute the ActionItem.handler function by passing it #selectedEntities and\nActionItem.handlerData as arguments\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                ActionItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _actionDisplayConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionDisplayConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        contextual: {\n            featuredCount: 0,\n            styling: ActionStyling.INLINE,\n            buttonContents: TextIcon.TEXT,\n        },\n        staticActionStyling: ActionStyling.INLINE,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _actions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:46\n                            \n                        \n\n                \n                    \n                        List of actions that will be given by the calling component\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            shouldShowIcon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:88\n                            \n                        \n\n                \n                    \n                        If a icon should be displayed inside contextual buttons\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            shouldShowText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:93\n                            \n                        \n\n                \n                    \n                        If a text should be displayed inside contextual buttons\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            shouldShowTooltip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:98\n                            \n                        \n\n                \n                    \n                        If the contextual buttons with icons should have a tooltip\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:55\n                                \n                            \n\n                \n                    \n                        setactions(actions: [])\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:47\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            actions\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        actionDisplayConfig\n                    \n                \n\n                \n                    \n                        getactionDisplayConfig()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:81\n                                \n                            \n\n                \n                    \n                        setactionDisplayConfig(config)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:71\n                                \n                            \n                    \n                        \n                                Display configuration of static and contextual actions\nIf null or undefined is passed, default config _actionDisplayConfig is used\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            config\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        staticActions\n                    \n                \n\n                \n                    \n                        getstaticActions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:112\n                                \n                            \n                    \n                        \n                                List of only the actions that are marked as ActionType.STATIC\n\n\n                                \n                                    Returns :         ActionItem[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        staticFeaturedActions\n                    \n                \n\n                \n                    \n                        getstaticFeaturedActions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:120\n                                \n                            \n                    \n                        \n                                List of only the actions that are marked as ActionType.STATIC_FEATURED\n\n\n                                \n                                    Returns :         ActionItem[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        shouldShowContextualActions\n                    \n                \n\n                \n                    \n                        getshouldShowContextualActions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/action-menu/action-menu.component.ts:179\n                                \n                            \n                    \n                        \n                                To show/hide the contextual actions bucket\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { ActionDisplayConfig, ActionItem, ActionStyling, ActionType, TextIcon } from '../common/interfaces';\n\n/**\n * Renders actions in screens containing grids, cards and details container\n * R is the type of selected entity on which the action will be performed\n * T is the type of custom data passed to action handler\n */\n@Component({\n    selector: 'vcd-action-menu',\n    templateUrl: './action-menu.component.html',\n    styleUrls: ['./action-menu.component.scss'],\n})\nexport class ActionMenuComponent {\n    @Input() entityUrn: string;\n\n    /**\n     * Content of the action menu dropdown trigger button. Used when {@link #actionDisplayConfig} styling is\n     * {@link ActionStyling.DROPDOWN}\n     */\n    @Input() btnText: string = null;\n\n    /**\n     * Used for disabling the menu bar or menu dropdown\n     */\n    @Input() disabled: boolean;\n\n    /**\n     * List of selected entities required for contextual actions\n     */\n    @Input() selectedEntities: R[];\n\n    /**\n     * How the static actions get displayed\n     */\n    @Input() staticActionStyling: ActionStyling = ActionStyling.INLINE;\n\n    /**\n     * List of actions that will be given by the calling component\n     */\n    private _actions: ActionItem[] = [];\n    @Input() set actions(actions: ActionItem[]) {\n        this._actions = actions.map(action => {\n            if (!action.actionType) {\n                action.actionType = ActionType.CONTEXTUAL;\n            }\n            return action;\n        });\n    }\n    get actions(): ActionItem[] {\n        return this._actions;\n    }\n\n    private _actionDisplayConfig: ActionDisplayConfig = {\n        contextual: {\n            featuredCount: 0,\n            styling: ActionStyling.INLINE,\n            buttonContents: TextIcon.TEXT,\n        },\n        staticActionStyling: ActionStyling.INLINE,\n    };\n    /**\n     * Display configuration of static and contextual actions\n     * If null or undefined is passed, default config {@link _actionDisplayConfig} is used\n     */\n    @Input() set actionDisplayConfig(config: ActionDisplayConfig) {\n        config = !config ? this._actionDisplayConfig : config;\n        Object.keys(config).forEach(key => {\n            this._actionDisplayConfig[key] = config[key] || this._actionDisplayConfig[key];\n        });\n        const buttonContents = this.actionDisplayConfig.contextual.buttonContents;\n        this.shouldShowIcon = (TextIcon.ICON & buttonContents) === TextIcon.ICON;\n        this.shouldShowText = (TextIcon.TEXT & buttonContents) === TextIcon.TEXT;\n        this.shouldShowTooltip = buttonContents === TextIcon.ICON;\n    }\n    get actionDisplayConfig(): ActionDisplayConfig {\n        return this._actionDisplayConfig;\n    }\n\n    /**\n     * If a icon should be displayed inside contextual buttons\n     */\n    shouldShowIcon: boolean;\n\n    /**\n     * If a text should be displayed inside contextual buttons\n     */\n    shouldShowText: boolean;\n\n    /**\n     * If the contextual buttons with icons should have a tooltip\n     */\n    shouldShowTooltip: boolean;\n\n    /**\n     * Returns actions that are either available or disabled\n     */\n    getAvailableActions(actions: ActionItem[], selection?: R[]): ActionItem[] {\n        return actions.filter(\n            action => !action.availability || action.availability(selection) || this.isActionDisabled(action)\n        );\n    }\n\n    /**\n     * List of only the actions that are marked as {@link ActionType.STATIC}\n     */\n    get staticActions(): ActionItem[] {\n        const staticActions = this.actions.filter(action => action.actionType === ActionType.STATIC);\n        return this.getAvailableActions(staticActions);\n    }\n\n    /**\n     * List of only the actions that are marked as {@link ActionType.STATIC_FEATURED}\n     */\n    get staticFeaturedActions(): ActionItem[] {\n        const staticActions = this.actions.filter(action => action.actionType === ActionType.STATIC_FEATURED);\n        return this.getAvailableActions(staticActions);\n    }\n\n    private getFlattenedActionList(actions: ActionItem[], actionType: ActionType): ActionItem[] {\n        let featuredActions: ActionItem[] = [];\n        actions.forEach(action => {\n            if (action.children && action.children.length) {\n                featuredActions = featuredActions.concat(this.getFlattenedActionList(action.children, actionType));\n            } else if (action.actionType === actionType) {\n                featuredActions.push(action);\n            }\n        });\n        return featuredActions;\n    }\n\n    /**\n     * Actions that depend on selected entities and belong to main menu list. The returned list length is less than the\n     * configured featured count in {@link actionDisplayConfig}\n     * @param selection The selected entities based on which the actions availability is calculated\n     */\n    getContextualFeaturedActions(selection: R[]): ActionItem[] {\n        const flattenedFeaturedActionList = this.getFlattenedActionList(this.actions, ActionType.CONTEXTUAL_FEATURED);\n        const availableFeaturedActions = this.getAvailableActions(flattenedFeaturedActionList, selection);\n        return this.actionDisplayConfig.contextual.featuredCount\n            ? availableFeaturedActions.slice(0, this.actionDisplayConfig.contextual.featuredCount)\n            : availableFeaturedActions;\n    }\n\n    /**\n     * Actions that depend on selected entities but belong to sub menu\n     * @param selection The selected entities based on which the actions availability is calculated\n     */\n    getContextualActions(selection?: R[]): ActionItem[] {\n        const contextualActions = this.actions.filter(\n            action => action.actionType !== ActionType.STATIC_FEATURED && action.actionType !== ActionType.STATIC\n        );\n        return this.getAvailableActions(contextualActions, selection);\n    }\n\n    /**\n     * Execute the {@link ActionItem.handler} function by passing it {@link #selectedEntities} and\n     * {@link ActionItem.handlerData} as arguments\n     */\n    runActionHandler(action: ActionItem): void {\n        action.handler(this.selectedEntities, action.handlerData);\n    }\n\n    /**\n     * To disable a displayed action\n     */\n    isActionDisabled(action: ActionItem): boolean {\n        return typeof action.disabled === 'function' ? action.disabled(this.selectedEntities) : action.disabled;\n    }\n\n    /**\n     * To show/hide the contextual actions bucket\n     */\n    get shouldShowContextualActions(): boolean {\n        return !!(this.selectedEntities && this.selectedEntities.length);\n    }\n}\n\n    \n\n    \n        \n    \n\n    \n                \n                    ./action-menu.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'ActionMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActivityPromiseResolver.html":{"url":"classes/ActivityPromiseResolver.html","title":"class - ActivityPromiseResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivityPromiseResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                A class that understands how to take a promise and turn it into some response message for display.\nA client of this library will override ActivityPromiseResolver to process their specific type of promise.\nThis override will know how to generate a ObjectAndResponse from the type of promise it processes.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resolveActivities\n                            \n                            \n                                resolveActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolveActivities\n                        \n                        \n                    \n                \n            \n            \n                \nresolveActivities(activityResolutionPromises: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-promise-resolver.ts:71\n                \n            \n\n\n            \n                \n                    Takes a Promise of many items and turns it to some activity status\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The success message this method should return if the activity succeeds. If undefined is passed,\na succeeded promise will return an empty response parameter which is assumed to mean success.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolveActivity\n                        \n                        \n                    \n                \n            \n            \n                \nresolveActivity(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-promise-resolver.ts:51\n                \n            \n\n\n            \n                \n                    Takes a Promise and turns it to some activity status\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The activity that this resolver will generate a response from. It generates\neither a sucesss or a failure condition.\n\n                                    \n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The success message this method should return if the activity succeeds. If undefined is passed,\na succeeded promise will return an empty response parameter which is assumed to mean success.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActivityReporter.html":{"url":"classes/ActivityReporter.html","title":"class - ActivityReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivityReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Expresses the contract between a activity status and the UI displaying a loading message, reporting\nsuccess or errors\nCurrently, only one concurrent activity is supported.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:13\n                            \n                        \n\n                \n                    \n                            Creates this reporter with the performer that it will use to monitor events.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:73\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:38\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:27\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:33\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/activity-reporter.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ActivityPromiseResolver } from './activity-promise-resolver';\n\n/**\n * Expresses the contract between a activity status and the UI displaying a loading message, reporting\n * success or errors\n * Currently, only one concurrent activity is supported.\n */\nexport abstract class ActivityReporter {\n    /**\n     * Creates this reporter with the performer that it will use to monitor events.\n     */\n    constructor(private promiseResolver: ActivityPromiseResolver) {}\n    /*\n     * Override this method to provide custom error activity starting behavior.\n     */\n    abstract startActivity(): void;\n    /**\n     * Override this method to provide custom error reporting behavior.\n     *\n     *  @param errorText The text to display in the error alert.\n     */\n    abstract reportError(errorText: string): void;\n    /**\n     * Override this method to provide custom success reporting behavior.\n     *\n     * @param successMessage A message to display to the user.\n     */\n    abstract reportSuccess(successMessage: string): void;\n\n    /**\n     * Monitors a promise that returns an entity using {@link ActivityPromiseResolver.monitorActivity}.\n     */\n    async monitorGet(activityResolutionPromise: Promise): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivity(activityResolutionPromise);\n        if (response.response.error) {\n            this.reportError(response.response.error);\n        } else {\n            this.reportSuccess(response.response.success);\n        }\n        return response.object;\n    }\n\n    /**\n     * Monitors a promise that returns many entities using {@link ActivityPromiseResolver.monitorActivities}.\n     */\n    async monitorGetAll(activityResolutionPromises: Promise): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivities(activityResolutionPromises);\n        const returnValue = response.map(item => item.object);\n        if (response.length) {\n            for (const item of response) {\n                if (item.response.error) {\n                    this.reportError(item.response.error);\n                    return returnValue;\n                }\n            }\n            this.reportSuccess(response[0].response.success);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Monitors a promise that returns an entity and posts a successMessage using {@link ActivityPromiseResolver.monitorActivity}.\n     */\n    async monitorEdit(activityResolutionPromise: Promise, successMessage?: string): Promise {\n        this.startActivity();\n        const performer = this.promiseResolver as ActivityPromiseResolver;\n        const response = await performer.resolveActivity(activityResolutionPromise, successMessage);\n        if (response.response.error) {\n            this.reportError(response.response.error);\n        } else {\n            this.reportSuccess(response.response.success);\n        }\n        return response.object;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActivityResponse.html":{"url":"interfaces/ActivityResponse.html","title":"interface - ActivityResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ActivityResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                The response that was given with some resource.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        error\n                                \n                                \n                                            Optional\n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The error message, if any, from the activity.\nA response without an error is assumed to have succeeded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The response message, if any, from the activity.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BannerActivityReporterComponent.html":{"url":"components/BannerActivityReporterComponent.html","title":"component - BannerActivityReporterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BannerActivityReporterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts\n\n\n    \n        Description\n    \n    \n        Shows a banner to the user to represent the state of an activity.\n\n    \n\n    \n        Extends\n    \n    \n                ActivityReporter\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-banner-activity-reporter\n            \n\n\n\n\n            \n                templateUrl\n                ./banner-activity-reporter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorText\n                            \n                            \n                                running\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onErrorClosed\n                            \n                            \n                                onSuccessClosed\n                            \n                            \n                                reportError\n                            \n                            \n                                reportSuccess\n                            \n                            \n                                reset\n                            \n                            \n                                startActivity\n                            \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                loadingMessage\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(translationService: TranslationService, promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translationService\n                                                  \n                                                        \n                                                                    TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        loadingMessage\n                    \n                \n                \n                    \n                        Type :         LazyString\n\n                    \n                \n                \n                    \n                        Default value : this.translationService.translateAsync('vcd.cc.loading')\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:28\n                            \n                        \n                \n                    \n                        The translated message that is displayed to the user while loading.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onErrorClosed\n                        \n                        \n                    \n                \n            \n            \n                \nonErrorClosed()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:67\n                \n            \n\n\n            \n                \n                    Closes the error message if displayed.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSuccessClosed\n                        \n                        \n                    \n                \n            \n            \n                \nonSuccessClosed()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:74\n                \n            \n\n\n            \n                \n                    Closes the success message if displayed.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \nreportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:49\n                \n            \n\n\n            \n                \n                    Shows the given {@param errorText} to the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \nreportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:57\n                \n            \n\n\n            \n                \n                    Shows the given {@param successMessage} to the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \nstartActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:40\n                \n            \n\n\n            \n                \n                    Begins to show the banner with a loading indicator.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:73\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:38\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:53\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:27\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:33\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:21\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            errorText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            running\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            successMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Inject, Input } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { LazyString } from '@vcd/i18n';\nimport { ActivityPromiseResolver } from './activity-promise-resolver';\nimport { ActivityReporter } from './activity-reporter';\n\n/**\n * Shows a banner to the user to represent the state of an activity.\n */\n@Component({\n    selector: 'vcd-banner-activity-reporter',\n    templateUrl: './banner-activity-reporter.component.html',\n})\nexport class BannerActivityReporterComponent extends ActivityReporter {\n    running = false;\n    errorText: string;\n    successMessage: string;\n\n    /**\n     * The translated message that is displayed to the user while loading.\n     */\n    @Input()\n    loadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.loading');\n\n    constructor(\n        private translationService: TranslationService,\n        @Inject(ActivityPromiseResolver) promiseResolver: ActivityPromiseResolver\n    ) {\n        super(promiseResolver);\n    }\n\n    /**\n     * Begins to show the banner with a loading indicator.\n     */\n    startActivity(): void {\n        this.running = true;\n        this.successMessage = null;\n        this.errorText = null;\n    }\n\n    /**\n     * Shows the given {@param errorText} to the user.\n     */\n    reportError(errorText: string): void {\n        this.errorText = errorText;\n        this.running = false;\n    }\n\n    /**\n     * Shows the given {@param successMessage} to the user.\n     */\n    reportSuccess(successMessage: string): void {\n        if (successMessage) {\n            this.successMessage = successMessage;\n        }\n        this.running = false;\n    }\n\n    /**\n     * Closes the error message if displayed.\n     */\n    onErrorClosed(): void {\n        this.errorText = null;\n    }\n\n    /**\n     * Closes the success message if displayed.\n     */\n    onSuccessClosed(): void {\n        this.successMessage = null;\n    }\n\n    /*\n     * Reset the banner activity state manually.\n     *\n     * Call it when banner should be reset to its default state.\n     */\n    reset(): void {\n        this.running = false;\n        this.errorText = null;\n        this.successMessage = null;\n    }\n}\n\n    \n\n    \n        \n    {{ loadingMessage | lazyString }}\n\n\n\n    \n        \n            {{ errorText }}\n        \n    \n\n\n\n    \n        \n            {{ successMessage }}\n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{ loadingMessage | lazyString }}                        {{ errorText }}                                    {{ successMessage }}            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'BannerActivityReporterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BannerActivityReporterWidgetObject.html":{"url":"classes/BannerActivityReporterWidgetObject.html","title":"class - BannerActivityReporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BannerActivityReporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts\n        \n\n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    running\n                                \n                                \n                                    errorText\n                                \n                                \n                                    sucessText\n                                \n                                \n                                    loadingText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-banner-activity-reporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        running\n                    \n                \n\n                \n                    \n                        getrunning()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:12\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorText\n                    \n                \n\n                \n                    \n                        geterrorText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sucessText\n                    \n                \n\n                \n                    \n                        getsucessText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:20\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        loadingText\n                    \n                \n\n                \n                    \n                        getloadingText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts:24\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { BannerActivityReporterComponent } from '../../../common/activity-reporter';\nimport { WidgetObject } from '../widget-object';\n\nexport class BannerActivityReporterWidgetObject extends WidgetObject {\n    static tagName = 'vcd-banner-activity-reporter';\n\n    get running(): boolean {\n        return this.component.running;\n    }\n\n    get errorText(): string {\n        return this.component.errorText;\n    }\n\n    get sucessText(): string {\n        return this.component.successMessage;\n    }\n\n    get loadingText(): string {\n        return this.findElement('clr-alert').nativeElement.textContent;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseFormControl.html":{"url":"classes/BaseFormControl.html","title":"class - BaseFormControl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseFormControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/base-form-control.ts\n        \n\n            \n                Description\n            \n            \n                Wrapper to enforce UX decisions like readonly-ness, label position and error displaying. And also to make\nthe form control backing a form control name directive available to sub classes.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ControlValueAccessor\n                            CanBeReadOnly\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    formControl\n                                \n                                \n                                    showErrors\n                                \n                                \n                                    errorKeys\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ngControl: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/base-form-control.ts:72\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ngControl\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:36\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:67\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:21\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:72\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:26\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:31\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/base-form-control.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:52\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:62\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:57\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:46\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/base-form-control.ts:41\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        formControl\n                    \n                \n\n                \n                    \n                        getformControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:85\n                                \n                            \n                    \n                        \n                                The FormControl associated with the FormControlName directive\n\n\n                                \n                                    Returns :         FormControl\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        showErrors\n                    \n                \n\n                \n                    \n                        getshowErrors()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:91\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorKeys\n                    \n                \n\n                \n                    \n                        geterrorKeys()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/base-form-control.ts:98\n                                \n                            \n                    \n                        \n                                Errors from the form control validation\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Input, Type } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { IdGenerator } from '../utils/id-generator/id-generator';\nimport { CanBeReadOnly } from './interfaces/can-be-read-only.interface';\n\nconst idGenerator = new IdGenerator('base-form-control-id');\n\n/**\n * Wrapper to enforce UX decisions like readonly-ness, label position and error displaying. And also to make\n * the form control backing a form control name directive available to sub classes.\n */\nexport class BaseFormControl implements ControlValueAccessor, CanBeReadOnly {\n    /**\n     * Auto generated ID for the input field.\n     */\n    id: string;\n\n    /**\n     * Change callback.\n     */\n    onChange: (...args: unknown[]) => unknown;\n\n    /**\n     * Touch callback.\n     */\n    onTouch: (...args: unknown[]) => unknown;\n\n    /**\n     * Whether the control is disabled.\n     */\n    disabled = false;\n\n    /**\n     * Show the asterisk next to the control when true\n     */\n    @Input() showAsterisk = false;\n\n    /**\n     * The label that appears before the control\n     */\n    @Input() label: string;\n\n    /**\n     * The description that appears below the control\n     * \\u00A0 is &nbsp; (non-breaking space)\n     */\n    @Input() description = '\\u00A0';\n\n    /**\n     * Whether this component is in readonly mode\n     */\n    @Input() isReadOnly = false;\n\n    /**\n     * Error labels to be used instead of NgControl error keys\n     */\n    @Input() errorLabels: string[] = [];\n\n    /**\n     * FormControlName directive\n     */\n    formControlNameDirective: NgControl;\n\n    /**\n     * To store the initial value of the input form control.\n     */\n    protected initialValue: number | string | boolean;\n\n    constructor(ngControl: NgControl) {\n        this.id = idGenerator.generate();\n        if (ngControl) {\n            ngControl.valueAccessor = this;\n            this.formControlNameDirective = ngControl;\n        }\n    }\n\n    /**\n     * The FormControl associated with the FormControlName directive\n     */\n    get formControl(): FormControl {\n        return this.formControlNameDirective\n            ? (this.formControlNameDirective.control as FormControl)\n            : new FormControl('');\n    }\n\n    get showErrors(): boolean {\n        return this.formControl.enabled && !this.formControl.pristine && !this.formControl.valid;\n    }\n\n    /**\n     * Errors from the form control validation\n     */\n    get errorKeys(): string[] {\n        if (this.errorLabels.length) {\n            return this.errorLabels;\n        }\n        return Object.keys(this.formControl.errors || {});\n    }\n\n    registerOnChange(onChange: (...args: unknown[]) => unknown): void {\n        this.onChange = onChange;\n    }\n\n    registerOnTouched(onTouched: (...args: unknown[]) => unknown): void {\n        this.onTouch = onTouched;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    writeValue(val: any): void {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BoldTextRendererComponent.html":{"url":"components/BoldTextRendererComponent.html","title":"component - BoldTextRendererComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BoldTextRendererComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n\n\n    \n        Description\n    \n    \n        A ComponentRenderer component that is used for rendering a bold text inside a column cell template\n\n    \n\n\n    \n        Implements\n    \n    \n                    ComponentRenderer\n    \n\n    \n        Example\n    \n    \n                \n                    Example usage with RendererSpec:\ncolumns: GridColumn[] = [\n{\ndisplayName: 'Component Renderer',\nrenderer: RendererSpec(\n  BoldTextRendererComponent,\n  (record: MockRecord) => ({text: record.name})\n)\n}\n];\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-bold-text-renderer\n            \n\n\n\n            \n                template\n                {{ config.text }}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :         BoldTextRendererConfig\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.component.ts:41\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { ComponentRenderer } from '../interfaces/component-renderer.interface';\nimport { ColumnComponentRendererSpec, ColumnRendererSpec } from '../interfaces/datagrid-column.interface';\n/**\n * {@link ComponentRenderer.config} type that the {@link BoldTextRendererComponent} can understand\n */\nexport interface BoldTextRendererConfig {\n    /**\n     * Text to be displayed in bold font\n     */\n    text: string;\n}\n\n/**\n * A {@link ComponentRenderer} component that is used for rendering a bold text inside a column cell template\n *\n * @example Example usage with RendererSpec:\n *     columns: GridColumn[] = [\n *       {\n *         displayName: 'Component Renderer',\n *         renderer: RendererSpec(\n *           BoldTextRendererComponent,\n *           (record: MockRecord) => ({text: record.name})\n *         )\n *       }\n *     ];\n */\n@Component({\n    selector: 'vcd-bold-text-renderer',\n    template: `\n        {{ config.text }}\n    `,\n})\nexport class BoldTextRendererComponent implements ComponentRenderer {\n    @Input()\n    config: BoldTextRendererConfig;\n}\n\n/**\n * Creates a {@link ColumnRendererSpec} for rendering bold text in a column.\n */\nexport function BoldTextRenderer(\n    textExtractor: (record: R) => string\n): ColumnRendererSpec {\n    return ColumnComponentRendererSpec({\n        type: BoldTextRendererComponent,\n        config(record): BoldTextRendererConfig {\n            return {\n                text: textExtractor(record),\n            };\n        },\n    });\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ config.text }}'\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'BoldTextRendererComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BoldTextRendererConfig.html":{"url":"interfaces/BoldTextRendererConfig.html","title":"interface - BoldTextRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BoldTextRendererConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n        \n\n            \n                Description\n            \n            \n                ComponentRenderer.config type that the BoldTextRendererComponent can understand\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        text\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Text to be displayed in bold font\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { ComponentRenderer } from '../interfaces/component-renderer.interface';\nimport { ColumnComponentRendererSpec, ColumnRendererSpec } from '../interfaces/datagrid-column.interface';\n/**\n * {@link ComponentRenderer.config} type that the {@link BoldTextRendererComponent} can understand\n */\nexport interface BoldTextRendererConfig {\n    /**\n     * Text to be displayed in bold font\n     */\n    text: string;\n}\n\n/**\n * A {@link ComponentRenderer} component that is used for rendering a bold text inside a column cell template\n *\n * @example Example usage with RendererSpec:\n *     columns: GridColumn[] = [\n *       {\n *         displayName: 'Component Renderer',\n *         renderer: RendererSpec(\n *           BoldTextRendererComponent,\n *           (record: MockRecord) => ({text: record.name})\n *         )\n *       }\n *     ];\n */\n@Component({\n    selector: 'vcd-bold-text-renderer',\n    template: `\n        {{ config.text }}\n    `,\n})\nexport class BoldTextRendererComponent implements ComponentRenderer {\n    @Input()\n    config: BoldTextRendererConfig;\n}\n\n/**\n * Creates a {@link ColumnRendererSpec} for rendering bold text in a column.\n */\nexport function BoldTextRenderer(\n    textExtractor: (record: R) => string\n): ColumnRendererSpec {\n    return ColumnComponentRendererSpec({\n        type: BoldTextRendererComponent,\n        config(record): BoldTextRendererConfig {\n            return {\n                text: textExtractor(record),\n            };\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoldTextRendererWidgetObject.html":{"url":"classes/BoldTextRendererWidgetObject.html","title":"class - BoldTextRendererWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoldTextRendererWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n        \n\n            \n                Description\n            \n            \n                Widget Object for the bold text renderer.\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    text\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-bold-text-renderer'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n\n                \n                    \n                        gettext()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts:30\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { VcdDatagridWidgetObject } from '../../utils/test/datagrid/vcd-datagrid.wo';\nimport { WidgetObject } from '../../utils/test/widget-object';\nimport { BoldTextRendererComponent } from './bold-text-renderer.component';\n\n/**\n * Mixin that allows {@link ClrDatagridWidgetObject} to read information from {@link BoldTextRendererComponent}\n */\n// tslint:disable-next-line:typedef\nexport function WithGridBoldRenderer>>(Base: TBase) {\n    return class extends Base {\n        getBoldText(row: number, column: number): string {\n            const cellElement = this.clrDatagrid.getCell(row, column);\n            return this.getNodeText(this.findElement('strong', cellElement));\n        }\n    };\n}\n\n/**\n * Widget Object for the bold text renderer.\n */\nexport class BoldTextRendererWidgetObject extends WidgetObject {\n    static tagName = 'vcd-bold-text-renderer';\n\n    get text(): string {\n        return this.findElement('strong').nativeElement.textContent;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Button.html":{"url":"interfaces/Button.html","title":"interface - Button","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Button\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A generic interface for a button that can be displayed on the grid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        class\n                                \n                                \n                                        handler\n                                \n                                \n                                            Optional\n                                        inactiveDisplayMode\n                                \n                                \n                                        isActive\n                                \n                                \n                                        label\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The css class the button should have.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called when the button is pressed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveDisplayMode\n                                    \n                                \n                                \n                                    \n                                        inactiveDisplayMode:         InactiveButtonDisplayMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InactiveButtonDisplayMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The way this button should be shown when inactive.\nOverrides ButtonConfig.inactiveDisplayMode.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called to determine if the button should be displayed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The translated text of the button.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ButtonConfig.html":{"url":"interfaces/ButtonConfig.html","title":"interface - ButtonConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ButtonConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                The configuration object that describes the type of buttons to put on the top of the grid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        contextualButtonConfig\n                                \n                                \n                                        globalButtons\n                                \n                                \n                                            Optional\n                                        inactiveDisplayMode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contextualButtonConfig\n                                    \n                                \n                                \n                                    \n                                        contextualButtonConfig:     ContextualButtonConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ContextualButtonConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The buttons whose displayability depends on the selected entity.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        globalButtons\n                                    \n                                \n                                \n                                    \n                                        globalButtons:     GlobalButton[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GlobalButton[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The buttons whose displayability does not depend on the selected entity.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveDisplayMode\n                                    \n                                \n                                \n                                    \n                                        inactiveDisplayMode:         InactiveButtonDisplayMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InactiveButtonDisplayMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The way buttons should be shown when inactive.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Bytes.html":{"url":"classes/Bytes.html","title":"class - Bytes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Bytes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ThousandsUnit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                B\n                            \n                            \n                                    Static\n                                GB\n                            \n                            \n                                    Static\n                                KB\n                            \n                            \n                                    Static\n                                MB\n                            \n                            \n                                    Static\n                                TB\n                            \n                            \n                                    Static\n                                types\n                            \n                            \n                                    Static\n                                unitNameTranslationKeyPrefix\n                            \n                            \n                                    Static\n                                valueWithUnitTranslationKeyPrefix\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllUnitTypes\n                            \n                            \n                                getUnitNameTranslationKey\n                            \n                            \n                                getValueWithUnitTranslationKey\n                            \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            B\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1, 'B')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:134\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            GB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024 ** 3, 'GB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:137\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            KB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024, 'KB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:135\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            MB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024 ** 2, 'MB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:136\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            TB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Bytes\n\n                        \n                    \n                    \n                        \n                            Default value : new Bytes(1024 ** 4, 'TB')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:138\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            types\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [Bytes.B, Bytes.KB, Bytes.MB, Bytes.GB]\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:139\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            unitNameTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.units.bytes.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:133\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            valueWithUnitTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.filesize.unit.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:132\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Bytes[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: ThousandsUnit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:89\n\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            ThousandsUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ThousandsUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CanBeReadOnly.html":{"url":"interfaces/CanBeReadOnly.html","title":"interface - CanBeReadOnly","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CanBeReadOnly\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/interfaces/can-be-read-only.interface.ts\n        \n\n            \n                Description\n            \n            \n                Components that can be made readonly should implement this interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isReadOnly\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isReadOnly\n                                    \n                                \n                                \n                                    \n                                        isReadOnly:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This being true implies that any controls that may edit data will not allow editing or be removed\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface CanBeReadOnly {\n    /**\n     * This being true implies that any controls that may edit data will not allow editing or be removed\n     */\n    isReadOnly: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CliptextConfig.html":{"url":"interfaces/CliptextConfig.html","title":"interface - CliptextConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CliptextConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.ts\n        \n\n            \n                Description\n            \n            \n                The configuration information for the cliptext within the cells of the datagrid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        disabled\n                                \n                                \n                                            Optional\n                                        mouseoutDelay\n                                \n                                \n                                            Optional\n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the cliptext should be disabled.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mouseoutDelay\n                                    \n                                \n                                \n                                    \n                                        mouseoutDelay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The time delay from mouse off to hide the cliptext.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         TooltipSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TooltipSize\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The size of the tooltip to be displayed in the cell.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n\nexport enum TooltipPosition {\n    tl = 'tooltip-top-left',\n    tr = 'tooltip-top-right',\n    br = 'tooltip-bottom-right',\n    bl = 'tooltip-bottom-left',\n}\n\nexport enum TooltipSize {\n    sm = '100px',\n    md = '200px',\n    lg = '400px',\n}\n\n/**\n * The configuration information for the cliptext within the cells of the datagrid.\n */\nexport interface CliptextConfig {\n    /**\n     * The size of the tooltip to be displayed in the cell.\n     */\n    size?: TooltipSize;\n    /**\n     * The time delay from mouse off to hide the cliptext.\n     */\n    mouseoutDelay?: number;\n    /**\n     * If the cliptext should be disabled.\n     */\n    disabled?: boolean;\n}\n\n/**\n * Singleton tooltip created by directive\n */\nconst tip = {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        tip.hideTooltip(tip.mouseoutDelay);\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n};\n\ntype EventHandler = (e: MouseEvent) => void;\n\nfunction watchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.addEventListener('mouseenter', mouseIn);\n    el.addEventListener('mouseleave', mouseOut);\n}\n\nfunction unwatchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.removeEventListener('mouseenter', mouseIn);\n    el.removeEventListener('mouseleave', mouseOut);\n}\n\nfunction setStyle(el: HTMLElement, style: Partial): void {\n    Object.assign(el.style, style);\n}\n\n/**\n * Displays a clarity tooltip with the full contents of a host element on hover but only if\n * the elements is clipped.\n */\n@Directive({\n    selector: '[vcdShowClippedText]',\n})\nexport class ShowClippedTextDirective implements OnDestroy, OnInit {\n    /** To destroy the tooltip when no longer needed */\n    static instanceCount = 0;\n\n    @Input('vcdShowClippedText')\n    set config(config: CliptextConfig) {\n        if (config && config.mouseoutDelay) {\n            this.mouseoutDelay = config.mouseoutDelay;\n        }\n        if (config && config.size) {\n            this.tooltipSize = config.size;\n        }\n        const nextDisabled = config !== undefined && config.disabled;\n        if (this.disabled === nextDisabled) {\n            return;\n        }\n        this.disabled = nextDisabled;\n        if (this.disabled) {\n            this.deactivate();\n        } else {\n            this.activate();\n        }\n    }\n\n    mouseoutDelay = 500;\n    tooltipSize = TooltipSize.md;\n    disabled = false;\n\n    /**\n     * The HTML element receiving the directive\n     */\n    public hostElement: HTMLElement = this.host.nativeElement;\n\n    constructor(private host: ElementRef) {}\n\n    ngOnInit(): void {\n        if (!this.disabled) {\n            this.activate();\n        }\n    }\n\n    activate(): void {\n        ShowClippedTextDirective.instanceCount++;\n        tip.create();\n        watchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n\n        // A host must have the following styles to show text ellipsis when overflowing\n        setStyle(this.hostElement, {\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (!this.disabled) {\n            this.deactivate();\n        }\n    }\n\n    deactivate(): void {\n        ShowClippedTextDirective.instanceCount--;\n        unwatchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n        if (ShowClippedTextDirective.instanceCount === 0) {\n            tip.destroy();\n        }\n    }\n\n    private onMouseIn = (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    };\n\n    private onMouseOut = () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    };\n\n    private isOverflowing(): boolean {\n        // Text overflows when the content element's width is less than its scrollWidth.\n        return Math.ceil(this.hostElement.getBoundingClientRect().width)  {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColumnConfigInternal.html":{"url":"interfaces/ColumnConfigInternal.html","title":"interface - ColumnConfigInternal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ColumnConfigInternal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                For simplifying logic inside the HTML template to differentiate between different GridColumn.renderer\ntypes.\n\n            \n\n            \n                Extends\n            \n            \n                        GridColumn\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fieldColumnRendererSpec\n                                \n                                \n                                            Optional\n                                        fieldName\n                                \n                                \n                                            Optional\n                                        fieldRenderer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldColumnRendererSpec\n                                    \n                                \n                                \n                                    \n                                        fieldColumnRendererSpec:         ColumnRendererSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColumnRendererSpec\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldRenderer\n                                    \n                                \n                                \n                                    \n                                        fieldRenderer:         FunctionRenderer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FunctionRenderer\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridFilter, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColumnRendererSpec.html":{"url":"interfaces/ColumnRendererSpec.html","title":"interface - ColumnRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ColumnRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\ncomponent. used by the ComponentRendererOutletDirective\n\n            \n\n            \n                Extends\n            \n            \n                        ComponentRendererSpec\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A function that creates a config object required for the configuration of component that will be rendered in the column\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommonUtil.html":{"url":"classes/CommonUtil.html","title":"class - CommonUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommonUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/common-util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                roundTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            roundTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    roundTo(value: number, digits: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/common-util.ts:12\n                \n            \n\n\n            \n                \n                    Rounds number to given floating point, 2 by default.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        number from float data type\n\n                                    \n                                \n                                \n                                    digits\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        2\n                                    \n\n                                    \n                                        how many numbers will be shown after decimal point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class CommonUtil {\n    /**\n     * Rounds number to given floating point, 2 by default.\n     * @param value number from float data type\n     * @param digits how many numbers will be shown after decimal point\n     */\n    static roundTo(value: number, digits: number = 2): number {\n        if (!value) {\n            value = 0;\n        }\n        return Number(Math.round(Number(value + 'e' + digits)) + 'e-' + digits);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentRenderer.html":{"url":"interfaces/ComponentRenderer.html","title":"interface - ComponentRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ComponentRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n        \n\n            \n                Description\n            \n            \n                Implemented by all the component renderers. The components that have to be rendered dynamically.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object used by the component renderers inside their HTML template\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\n/**\n * Implemented by all the component renderers. The components that have to be rendered dynamically.\n */\nexport interface ComponentRenderer {\n    /**\n     * Object used by the component renderers inside their HTML template\n     */\n    config: T;\n}\n\n/**\n * Used for the type safety of {@link ColumnRendererSpec#type}\n */\nexport type ComponentRendererConstructor = Type>;\n\n/**\n * An object that contains the constructor of a component of {@link ComponentRenderer} type that has to be rendered dynamically.\n *\n * {@link ComponentRendererOutletDirective} uses this object to render the component. It is responsible for setting the\n * component's configuration{@link ComponentRenderer#config} after dynamically initializing it. But the caller is responsible\n * for providing a config\n */\nexport interface ComponentRendererSpec {\n    /**\n     * Constructor of a specific type of component to be rendered\n     */\n    type: ComponentRendererConstructor;\n    /**\n     * {@link ComponentRenderer.config}. In the case of a {@link ColumnRendererSpec} it is a function that takes a rest\n     * item as input and returns an object of {@link ComponentRenderer.config}\n     */\n    config: C | ((restItem: unknown) => C);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ComponentRendererOutletDirective.html":{"url":"directives/ComponentRendererOutletDirective.html","title":"directive - ComponentRendererOutletDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ComponentRendererOutletDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts\n        \n\n            \n                Description\n            \n            \n                Component that acts as a host element for dynamic rendering of component constructors.\nIt takes ComponentRendererSpec and also 'context' as input in case of a ColumnRendererSpec that serves as argument for\nColumnRendererSpec.config method. Attaches the component to be rendered to the view container of host element\nand updates it's configuration whenever changed.\nExample usage:\n\n\n\n\n            \n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [vcdComponentRendererOutlet]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                componentType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assignValue\n                            \n                            \n                                    Private\n                                attachRenderer\n                            \n                            \n                                    Private\n                                detachRenderer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                vcdComponentRendererOutlet\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    vcdComponentRendererOutlet\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(viewContainerRef: ViewContainerRef, cfr: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        viewContainerRef\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cfr\n                                                  \n                                                        \n                                                                        ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        vcdComponentRendererOutlet\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:40\n                            \n                        \n                \n                    \n                        Sets the component that this outlet should render. Where rendererSpec is the\nComponentRendererSpec that details how to render the component and context\nis any information that the component needs to render.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            assignValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    assignValue(config:  | T, context: R)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:63\n                \n            \n\n\n            \n                \n                    Updates the configuration of instantiated component\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                             | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                            R\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            attachRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    attachRenderer()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:52\n                \n            \n\n\n            \n                \n                    Attaches the passed component type to the view of this directive host\n\n\n                    \n                        Returns :         ComponentRef>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            detachRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    detachRenderer()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            componentRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ComponentRef>\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            componentType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ComponentRendererConstructor\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:30\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        vcdComponentRendererOutlet\n                    \n                \n\n\n                \n                    \n                        setvcdComponentRendererOutlet(renderer: literal type)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts:40\n                                \n                            \n                    \n                        \n                                Sets the component that this outlet should render. Where rendererSpec is the\nComponentRendererSpec that details how to render the component and context\nis any information that the component needs to render.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            renderer\n                                                    \n                                                            \n                                                                        literal type\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { ComponentFactoryResolver, ComponentRef, Directive, Input, ViewContainerRef } from '@angular/core';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Component that acts as a host element for dynamic rendering of component constructors.\n * It takes {@link ComponentRendererSpec} and also 'context' as input in case of a {@link ColumnRendererSpec} that serves as argument for\n * {@link ColumnRendererSpec.config} method. Attaches the component to be rendered to the view container of host element\n * and updates it's configuration whenever changed.\n *\n * Example usage:\n * \n *\n */\n@Directive({\n    selector: '[vcdComponentRendererOutlet]',\n})\nexport class ComponentRendererOutletDirective {\n    private componentRef: ComponentRef>;\n    private componentType: ComponentRendererConstructor;\n\n    constructor(private viewContainerRef: ViewContainerRef, private cfr: ComponentFactoryResolver) {}\n\n    /**\n     * Sets the component that this outlet should render. Where rendererSpec is the\n     * {@link ComponentRendererSpec} that details how to render the component and context\n     * is any information that the component needs to render.\n     */\n    @Input()\n    set vcdComponentRendererOutlet(renderer: { rendererSpec: ComponentRendererSpec; context?: R }) {\n        if (this.componentType !== renderer.rendererSpec.type) {\n            // Cache the componentType to avoid redundant detaching and attaching of component to this host\n            this.componentType = renderer.rendererSpec.type;\n            this.componentRef = this.attachRenderer();\n        }\n        this.assignValue(renderer.rendererSpec.config, renderer.context);\n    }\n\n    /**\n     * Attaches the passed component type to the view of this directive host\n     */\n    private attachRenderer(): ComponentRef> {\n        if (this.componentRef) {\n            this.detachRenderer();\n        }\n        const componentFactory = this.cfr.resolveComponentFactory(this.componentType);\n        return this.viewContainerRef.createComponent(componentFactory);\n    }\n\n    /**\n     * Updates the configuration of instantiated component\n     */\n    private assignValue(config: ((r: R) => T) | T, context: R): void {\n        if (!this.componentRef || !this.componentRef.instance) {\n            return;\n        }\n        this.componentRef.instance.config = config instanceof Function ? config(context) : config;\n    }\n\n    private detachRenderer(): void {\n        this.viewContainerRef.remove();\n        this.componentRef = null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentRendererSpec.html":{"url":"interfaces/ComponentRendererSpec.html","title":"interface - ComponentRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ComponentRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n        \n\n            \n                Description\n            \n            \n                An object that contains the constructor of a component of ComponentRenderer type that has to be rendered dynamically.\nComponentRendererOutletDirective uses this object to render the component. It is responsible for setting the\ncomponent's configurationComponentRenderer after dynamically initializing it. But the caller is responsible\nfor providing a config\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     C | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     C | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ComponentRenderer.config. In the case of a ColumnRendererSpec it is a function that takes a rest\nitem as input and returns an object of ComponentRenderer.config\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ComponentRendererConstructor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentRendererConstructor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Constructor of a specific type of component to be rendered\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\n/**\n * Implemented by all the component renderers. The components that have to be rendered dynamically.\n */\nexport interface ComponentRenderer {\n    /**\n     * Object used by the component renderers inside their HTML template\n     */\n    config: T;\n}\n\n/**\n * Used for the type safety of {@link ColumnRendererSpec#type}\n */\nexport type ComponentRendererConstructor = Type>;\n\n/**\n * An object that contains the constructor of a component of {@link ComponentRenderer} type that has to be rendered dynamically.\n *\n * {@link ComponentRendererOutletDirective} uses this object to render the component. It is responsible for setting the\n * component's configuration{@link ComponentRenderer#config} after dynamically initializing it. But the caller is responsible\n * for providing a config\n */\nexport interface ComponentRendererSpec {\n    /**\n     * Constructor of a specific type of component to be rendered\n     */\n    type: ComponentRendererConstructor;\n    /**\n     * {@link ComponentRenderer.config}. In the case of a {@link ColumnRendererSpec} it is a function that takes a rest\n     * item as input and returns an object of {@link ComponentRenderer.config}\n     */\n    config: C | ((restItem: unknown) => C);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ContextualButton.html":{"url":"interfaces/ContextualButton.html","title":"interface - ContextualButton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ContextualButton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A type of button whose displayability dependends on the selected entity.\n\n            \n\n            \n                Extends\n            \n            \n                        Button\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        handler\n                                \n                                \n                                        icon\n                                \n                                \n                                        isActive\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called when the button is pressed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Clarity icon of the contextual button that is displayed if the button is featured.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called to determine if the button should be displayed.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ContextualButtonConfig.html":{"url":"interfaces/ContextualButtonConfig.html","title":"interface - ContextualButtonConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ContextualButtonConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A configuration that descibes all the information about the contextual buttons.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        buttonContents\n                                \n                                \n                                        buttons\n                                \n                                \n                                            Optional\n                                        featured\n                                \n                                \n                                            Optional\n                                        featuredCount\n                                \n                                \n                                        position\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buttonContents\n                                    \n                                \n                                \n                                    \n                                        buttonContents:         TextIcon\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TextIcon\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the title should be the button label, icon, or both\nDefaults to ICON if unset.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        buttons\n                                    \n                                \n                                \n                                    \n                                        buttons:     ContextualButton[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ContextualButton[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A list of all the contextual buttons.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        featured\n                                    \n                                \n                                \n                                    \n                                        featured:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An ordered list of ContextualButton.ids of buttons that should be in a featured position.\nOnly non-hidden buttons will be shown.\nIf featured is not set, all buttons will become featured.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        featuredCount\n                                    \n                                \n                                \n                                    \n                                        featuredCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How many buttons should display on the featured section.\nUsed when you want to set a limit on the number of featured buttons shown.\nIf featuredCount is not set, it will default to the total number of buttons.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                    \n                                \n                                \n                                    \n                                        position:         ContextualButtonPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ContextualButtonPosition\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Where the buttons should display on the grid.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CsvExporterService.html":{"url":"injectables/CsvExporterService.html","title":"injectable - CsvExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CsvExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/csv-exporter.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createCsv\n                            \n                            \n                                    Public\n                                downloadCsvFile\n                            \n                            \n                                    Public\n                                hasPotentialInjection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCsv(rows: any[][], shouldSanitize)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:21\n                \n            \n\n\n            \n                \n                    Creates a string that can be used to create a Blob for a CSV\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    rows\n                                    \n                                            any[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        2D array of data. First row is the names for the fields\n\n                                    \n                                \n                                \n                                    shouldSanitize\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        If a cell starting with a control character should be edited to prevent\npossible code injection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            downloadCsvFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    downloadCsvFile(csvFile: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:38\n                \n            \n\n\n            \n                \n                    Does a client side download\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    csvFile\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string contents of a CSV file to be downloaded\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the file to be downloaded\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasPotentialInjection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasPotentialInjection(rows: any[][])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/csv-exporter.service.ts:29\n                \n            \n\n\n            \n                \n                    Whether the CSV that would result from the export is at risk of code injection\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rows\n                                    \n                                            any[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        2D array of data. First row is the names for the fields\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\n/**\n * Encodes a data set to be downloaded as a CSV\n */\nexport class CsvExporterService {\n    /**\n     * Creates a string that can be used to create a Blob for a CSV\n     * @param rows 2D array of data. First row is the names for the fields\n     * @param shouldSanitize If a cell starting with a control character should be edited to prevent\n     * possible code injection\n     */\n    public createCsv(rows: any[][], shouldSanitize = false): string {\n        return rows.map(row => processRow(row, shouldSanitize)).join('\\n');\n    }\n\n    /**\n     * Whether the CSV that would result from the export is at risk of code injection\n     * @param rows 2D array of data. First row is the names for the fields\n     */\n    public hasPotentialInjection(rows: any[][]): boolean {\n        return rows.some(hasPotentialInjection);\n    }\n\n    /**\n     * Does a client side download\n     * @param csvFile The string contents of a CSV file to be downloaded\n     * @param filename The name of the file to be downloaded\n     */\n    public downloadCsvFile(csvFile: string, filename: string): void {\n        const mimeType = 'text/csv;charset=utf-8;';\n        const blob = new Blob([csvFile], { type: mimeType });\n        // Jan 1, 2020 - Chrome and IE support this\n        if (navigator.msSaveBlob) {\n            navigator.msSaveBlob(blob, filename);\n        } else {\n            const link = document.createElement('a');\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n\nconst LEADING_CONTROL_CHAR = /^[-+=@]/;\n\n/**\n * Whether the given row data is at risk of code injection when exported to CSV.\n */\nfunction hasPotentialInjection(row: unknown[]): boolean {\n    return row.some(cell => LEADING_CONTROL_CHAR.test(encodeValue(cell, false)));\n}\n\n/**\n * Returns a string\n * @param row A list of cells to be turned into a CSV string, separated by commas\n * @param shouldSanitize If a cell starting with a control character should be edited to prevent\n * possible code injection\n */\nfunction processRow(row: unknown[], shouldSanitize: boolean): string {\n    return row.map(cell => encodeValue(cell, shouldSanitize)).join(',');\n}\n\n/**\n * Returns a cell's cellValue encoded against spaces, quotes, and CSV injection character\n * @param cellValue Cell cellValue to be encoded\n * @param shouldSanitize If this cellValue starts with a control should it be\n * prefixed with the tab character\n */\nfunction encodeValue(cellValue: unknown, shouldSanitize: boolean): string {\n    let innerValue = cellValue == null ? '' : cellValue.toString();\n    if (cellValue instanceof Date) {\n        innerValue = cellValue.toLocaleString();\n    }\n    // Double quotes are doubled\n    let result = innerValue.replace(/\"/g, '\"\"');\n\n    // Add quotes around the whole thing if it contains new lines\n    if (result.search(/[\",\\n]/g) >= 0) {\n        result = `\"${result}\"`;\n    }\n    // Escape against\n    if (shouldSanitize) {\n        return sanitizeString(result);\n    }\n    return result;\n}\n\n/**\n * Prevents CSV injection by prefixing with a tab character if the string contains a\n * special character.\n */\nfunction sanitizeString(value: string): string {\n    if (LEADING_CONTROL_CHAR.test(value)) {\n        return '\\t' + value;\n    }\n    return value;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataExportRequestEvent.html":{"url":"interfaces/DataExportRequestEvent.html","title":"interface - DataExportRequestEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataExportRequestEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.component.ts\n        \n\n            \n                Description\n            \n            \n                Information passed to the caller so they can fetch the data\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        exportData\n                                \n                                \n                                        selectedColumns\n                                \n                                \n                                        updateProgress\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exportData\n                                    \n                                \n                                \n                                    \n                                        exportData:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Call this when all records have been fetched to initiate the CSV creation.\nThis should only be called once after all data fetching is finished\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectedColumns\n                                    \n                                \n                                \n                                    \n                                        selectedColumns:         ExportColumn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExportColumn[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Columns selected by the user.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateProgress\n                                    \n                                \n                                \n                                    \n                                        updateProgress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Call this to indicate a new value to be displayed in the progress indicator.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDropdown } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { CsvExporterService } from './csv-exporter.service';\n\n/**\n * Identifiers for each column that user is allowed to select\n */\nexport interface ExportColumn {\n    /**\n     * Displayed in the list of columns\n     */\n    displayName: string;\n    /**\n     * The name of the field in the JSON that is returned and converted to a viewable format\n     */\n    fieldName: string;\n}\n\nexport enum UserOptions {\n    selectAll = 'selectAll',\n    friendlyNames = 'friendlyNames',\n    sanitize = 'sanitize',\n}\n\n/**\n * Information passed to the caller so they can fetch the data\n */\nexport interface DataExportRequestEvent {\n    /**\n     * Call this to indicate a new value to be displayed in the progress indicator.\n     * @param progress A number from 0 to 1 indicating download progress. Passing -1 will make it an indeterminate\n     */\n    updateProgress: (progress: number) => void;\n\n    /**\n     * Call this when all records have been fetched to initiate the CSV creation.\n     * This should only be called once after all data fetching is finished\n     * @param records Records to be converted into a csv file\n     * @return a promise of the resulting CSV to indicate when this potentially lengthy process is over\n     */\n    exportData: (records: object[]) => Promise;\n\n    /**\n     * Columns selected by the user.\n     */\n    selectedColumns: ExportColumn[];\n}\n\n/**\n * A dialog to export data\n *\n *  - Allows the UI to select columns to be exported\n *  - Provides a progress indicator\n *  - Converts the data that is fetched by the caller into a CSV\n */\n@Component({\n    selector: 'vcd-data-exporter',\n    templateUrl: 'data-exporter.component.html',\n    styleUrls: ['./data-exporter.component.scss'],\n})\nexport class DataExporterComponent implements OnInit, OnDestroy {\n    constructor(private csvExporterService: CsvExporterService, private translationService: TranslationService) {}\n\n    @ViewChild(ClrDropdown) set columnDropdown(columnDropdown: ClrDropdown) {\n        if (!columnDropdown) {\n            return;\n        }\n        this.subscriptionTracker.subscribe(columnDropdown.toggleService.openChange, opened => {\n            this.isDropdownOpen = opened;\n        });\n    }\n\n    /**\n     * List of columns that can be exported, user may deselect some before sending the download request\n     */\n    @Input() columns: ExportColumn[] = [];\n\n    /**\n     * The name of the file to be downloaded\n     */\n    @Input() fileName = 'data-export.csv';\n\n    /**\n     * Text for the Dialog Header\n     */\n    @Input()\n    dialogHeader: LazyString = this.translationService.translateAsync('vcd.cc.data-exporter.title');\n\n    /**\n     * Text for the cancel button.\n     */\n    @Input()\n    cancelText: LazyString = this.translationService.translateAsync('vcd.cc.cancel');\n\n    /**\n     * Text for the export all button.\n     */\n    @Input()\n    exportAllText: LazyString = this.translationService.translateAsync('vcd.cc.export.all');\n\n    /**\n     * Text for the select columns dropdown button.\n     */\n    @Input()\n    selectColumnsText: LazyString = this.translationService.translateAsync('vcd.cc.select.columns');\n\n    /**\n     * Text for the export button.\n     */\n    @Input()\n    exportText: LazyString = this.translationService.translateAsync('vcd.cc.export');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    yesText: LazyString = this.translationService.translateAsync('vcd.cc.yes');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    noText: LazyString = this.translationService.translateAsync('vcd.cc.no');\n\n    /**\n     * Text label that is next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.question');\n\n    /**\n     * Text the info message next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.info');\n\n    /**\n     * Text the hint message below the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesHint: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.hint');\n\n    /**\n     * Text label that is next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.question');\n\n    /**\n     * Hint message that is below the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxHint: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.hint');\n\n    /**\n     * Text the info message next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.info');\n\n    /**\n     * The message that is displayed while the data is downloading.\n     */\n    @Input()\n    downloadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.downloading');\n\n    /**\n     * The message that is displayed while the data is writing to file.\n     */\n    @Input()\n    writingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.writing');\n\n    /**\n     * Whether the dialog is open\n     */\n    @Input()\n    set open(value: boolean) {\n        this._open = value;\n        this.openChange.emit(value);\n    }\n    get open(): boolean {\n        return this._open;\n    }\n\n    private _open = false;\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    forceDropdownOpen = false;\n\n    /**\n     * Fires when {@link _open} changes. Its parameter indicates the new state.\n     */\n    @Output() openChange = new EventEmitter();\n\n    /**\n     * Called when the export is ready to be created\n     */\n    @Output() dataExportRequest = new EventEmitter();\n\n    /**\n     * True between the time {@link dataExportRequest} fires and {@link DataExportRequestEvent.exportData} is called\n     * or an error is thrown\n     */\n    get isRequestPending(): boolean {\n        return this._isRequestPending;\n    }\n    private _isRequestPending = false;\n\n    /**\n     * Number between 0-1, used for displaying the progress bar.\n     */\n    get progress(): number {\n        return this._progress;\n    }\n    private _progress = 0;\n\n    formGroup: FormGroup;\n\n    exportStage: LazyString;\n\n    optionsFormGroup = new FormGroup({\n        [UserOptions.selectAll]: new FormControl(true),\n        [UserOptions.friendlyNames]: new FormControl(true),\n        [UserOptions.sanitize]: new FormControl(true),\n    });\n\n    /**\n     * Says if the column dropdown is open.\n     */\n    isDropdownOpen = false;\n\n    onClickExport(): void {\n        this.exportStage = this.downloadingMessage;\n        this._isRequestPending = true;\n        this.dataExportRequest.emit({\n            exportData: this.exportData.bind(this),\n            updateProgress: this.updateProgress.bind(this),\n            selectedColumns: this.selectedColumns,\n        });\n    }\n\n    get selectAllControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.selectAll) as FormControl;\n    }\n\n    get sanitizeControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.sanitize) as FormControl;\n    }\n\n    get friendlyFieldsControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.friendlyNames) as FormControl;\n    }\n\n    get isExportEnabled(): boolean {\n        if (this.isRequestPending) {\n            return false;\n        }\n        for (const column of this.columns) {\n            if (this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get shouldShowBubbles(): boolean {\n        return !this.selectAllControl.value && !this.isDropdownOpen;\n    }\n\n    /**\n     * Gives a list of all the columns that are selected.\n     */\n    get selectedColumns(): ExportColumn[] {\n        return this.columns.filter(col => this.formGroup.controls[col.fieldName].value);\n    }\n\n    /**\n     * Sets the selected value of the given column.\n     */\n    selectColumn(column: ExportColumn, selected: boolean): void {\n        this.formGroup.controls[column.fieldName].setValue(selected);\n    }\n\n    ngOnInit(): void {\n        const controls = this.columns.reduce((previousValue, currentValue) => {\n            previousValue[currentValue.fieldName] = new FormControl(true);\n            return previousValue;\n        }, {});\n        this.formGroup = new FormGroup(controls);\n        this.subscriptionTracker.subscribe(this.selectAllControl.valueChanges, change => {\n            if (change) {\n                for (const column of this.columns) {\n                    this.formGroup.controls[column.fieldName].setValue(true);\n                }\n            } else {\n                this.forceDropdownOpen = true;\n                this.isDropdownOpen = true;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n\n    private exportData(records: object[]): Promise {\n        if (!this.open) {\n            return;\n        }\n\n        const rows = [\n            // First row is the display names\n            Object.keys(records[0]).map(fieldName =>\n                this.friendlyFieldsControl.value ? this.getDisplayNameForField(fieldName) : fieldName\n            ),\n            // Then the data\n            ...records.map(rec => Object.keys(rec).map(key => rec[key])),\n        ];\n        return this.downloadData(rows, this.sanitizeControl.value);\n    }\n\n    downloadData(data: any[][], shouldSanitize: boolean = false): Promise {\n        this.exportStage = this.writingMessage;\n        return new Promise(resolve => {\n            // We need to setTimeout because we changed how the message should be displayed\n            // but we need to interrupt the current task to get the message to display\n            // We tried to use window.requestAnimationFrame, but this didn't work so we had to use\n            // setTimeout().\n            setTimeout(() => {\n                this._isRequestPending = false;\n                const csvFile = this.csvExporterService.createCsv(data, shouldSanitize);\n                this.csvExporterService.downloadCsvFile(csvFile, this.fileName);\n                this.open = false;\n                resolve(csvFile);\n            });\n        });\n    }\n\n    private updateProgress(progress: number): void {\n        this._progress = progress;\n    }\n\n    private getDisplayNameForField(fieldName: string): string {\n        for (const column of this.columns) {\n            if (column.fieldName === fieldName) {\n                return column.displayName;\n            }\n        }\n        return fieldName;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataExporterWidgetObject.html":{"url":"classes/DataExporterWidgetObject.html","title":"class - DataExporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataExporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.wo.ts\n        \n\n            \n                Description\n            \n            \n                Testing Object for DataExporterComponent\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clickCancel\n                            \n                            \n                                clickColumnCheckbox\n                            \n                            \n                                clickColumnDropdown\n                            \n                            \n                                clickExport\n                            \n                            \n                                removeColumn\n                            \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isLoopingProgressBar\n                                \n                                \n                                    columnBubbles\n                                \n                                \n                                    columnCheckboxes\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-data-exporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickCancel\n                        \n                        \n                    \n                \n            \n            \n                \nclickCancel()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:55\n                \n            \n\n\n            \n                \n                    Clicks the cancel button.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickColumnCheckbox\n                        \n                        \n                    \n                \n            \n            \n                \nclickColumnCheckbox(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:48\n                \n            \n\n\n            \n                \n                    Clicks the checkbox next to a given column\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of column, 0 based\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickColumnDropdown\n                        \n                        \n                    \n                \n            \n            \n                \nclickColumnDropdown()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:69\n                \n            \n\n\n            \n                \n                    Click the arrow to open/close the column dropdown.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clickExport\n                        \n                        \n                    \n                \n            \n            \n                \nclickExport()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:62\n                \n            \n\n\n            \n                \n                    Clicks the export button.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeColumn\n                        \n                        \n                    \n                \n            \n            \n                \nremoveColumn(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:40\n                \n            \n\n\n            \n                \n                    Clicks the remove button for a column\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of column, 0 based\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isLoopingProgressBar\n                    \n                \n\n                \n                    \n                        getisLoopingProgressBar()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:18\n                                \n                            \n                    \n                        \n                                Whether the progress bar is currently showing indefinite progress, that is a looping loading indicator\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        columnBubbles\n                    \n                \n\n                \n                    \n                        getcolumnBubbles()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:25\n                                \n                            \n                    \n                        \n                                The strings for the available column bubbles.\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        columnCheckboxes\n                    \n                \n\n                \n                    \n                        getcolumnCheckboxes()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/data-exporter/data-exporter.wo.ts:32\n                                \n                            \n                    \n                        \n                                The strings for the available column checkboxes.\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { WidgetObject } from '../utils/test/widget-object';\nimport { DataExporterComponent } from './data-exporter.component';\n\n/**\n * Testing Object for {@link DataExporterComponent}\n */\nexport class DataExporterWidgetObject extends WidgetObject {\n    static tagName = 'vcd-data-exporter';\n\n    /**\n     * Whether the progress bar is currently showing indefinite progress, that is a looping loading indicator\n     */\n    get isLoopingProgressBar(): boolean {\n        return !!this.findElement('.progress.loop');\n    }\n\n    /**\n     * The strings for the available column bubbles.\n     */\n    get columnBubbles(): string[] {\n        return this.getTexts('.column-label');\n    }\n\n    /**\n     * The strings for the available column checkboxes.\n     */\n    get columnCheckboxes(): string[] {\n        return this.getTexts('.column-checkbox');\n    }\n\n    /**\n     * Clicks the remove button for a column\n     * @param index Index of column, 0 based\n     */\n    removeColumn(index: number): void {\n        this.click(`.column-label:nth-of-type(${index + 1}) clr-icon`);\n    }\n\n    /**\n     * Clicks the checkbox next to a given column\n     * @param index Index of column, 0 based\n     */\n    clickColumnCheckbox(index: number): void {\n        this.click(`.column-checkbox:nth-of-type(${index + 1}) input`);\n    }\n\n    /**\n     * Clicks the cancel button.\n     */\n    clickCancel(): void {\n        this.click('.cancel');\n    }\n\n    /**\n     * Clicks the export button.\n     */\n    clickExport(): void {\n        this.click('.export');\n    }\n\n    /**\n     * Click the arrow to open/close the column dropdown.\n     */\n    clickColumnDropdown(): void {\n        this.click('.dropdown-button');\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatagridFilter.html":{"url":"classes/DatagridFilter.html","title":"class - DatagridFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatagridFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Extended by filter components used in DatagridComponent. Those components can only be used inside a\nclr-dg-filter component and are dynamically rendered by ComponentRendererOutletDirective using\nGridColumn.filter\nV is the type of filter input value that is passed into setValue method\nC extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n                            ClrDatagridFilterInterface\n                            ComponentRenderer\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    config\n                                \n                                \n                                    queryField\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:60\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:71\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:87\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:60\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:137\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:112\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:99\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:122\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:127\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:107\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:117\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:72\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n                \n                    \n                        getconfig()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:80\n                                \n                            \n\n                \n                    \n                        setconfig(val)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:72\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        queryField\n                    \n                \n\n                \n                    \n                        getqueryField()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-filter.ts:147\n                                \n                            \n                    \n                        \n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridMultiSelectFilterComponent.html":{"url":"components/DatagridMultiSelectFilterComponent.html","title":"component - DatagridMultiSelectFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridMultiSelectFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n\n\n    \n        Description\n    \n    \n        Used within a clarity grid column DatagridComponent to render a filter widget with list of checkboxes to select\nmultiple options\nExample usage:\ncolumns: GridColumn[] = [{\n      displayName: 'Custom Select filter',\n      renderer: 'state',\n      queryFieldName: 'state',\n      filterRendererSpec: FilterComponentRendererSpec({\n          type: DatagridMultiSelectFilterComponent,\n          config: {\n              options: [{\n                  value: 'CA',\n                  display: 'California'\n              }, {\n                  value: 'MA',\n                  display: 'Massachusetts'\n              }],\n              value: ['MA', 'NC'],\n          },\n      }),\n   }]\n\n    \n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-multiselect-filter\n            \n\n\n\n\n            \n                templateUrl\n                ./datagrid-multiselect-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                onBeforeSetConfig\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:69\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \nonBeforeSetConfig(config: DatagridMultiSelectFilterConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:87\n                \n            \n\n\n            \n                \n                    Overrides the config property because, the formGroup controls are defined by the config set by the caller.\nValue of each option becomes a formControl name inside the formGroup.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                DatagridMultiSelectFilterConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(values: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MultiSelectOptionInternal[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts:77\n                            \n                        \n\n                \n                    \n                        Used inside the HTML to instantiate checkbox options\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n            \n                \n                \n                    {{ option.isTranslatable ? (option.display | translate) : option.display }}\n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                            {{ option.isTranslatable ? (option.display | translate) : option.display }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridMultiSelectFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridMultiSelectFilterConfig.html":{"url":"interfaces/DatagridMultiSelectFilterConfig.html","title":"interface - DatagridMultiSelectFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridMultiSelectFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        options\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:     MultiSelectOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MultiSelectOption[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of select options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridNumericFilterComponent.html":{"url":"components/DatagridNumericFilterComponent.html","title":"component - DatagridNumericFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridNumericFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n\n\n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-numeric-filter\n            \n\n            \n                styleUrls\n                datagrid-numeric-filter.component.scss\n            \n\n\n\n            \n                templateUrl\n                datagrid-numeric-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _unit\n                            \n                            \n                                    Private\n                                _unitOptions\n                            \n                            \n                                fromInput\n                            \n                            \n                                maxNumberLength\n                            \n                            \n                                toInput\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                createFormGroup\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                unit\n                            \n                            \n                                unitOptions\n                            \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    unitOptions\n                                \n                                \n                                    unit\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:78\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        unit\n                    \n                \n                \n                    \n                        Type :         Unit\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        unitOptions\n                    \n                \n                \n                    \n                        Type :         Unit[]\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            close\n                        \n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: DatagridNumericFilterConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                DatagridNumericFilterConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(values: DatagridNumericFilterValue)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                DatagridNumericFilterValue\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _unit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Unit\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:62\n                            \n                        \n\n                \n                    \n                        Base unit to which selected units are converted\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _unitOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Unit[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:48\n                            \n                        \n\n                \n                    \n                        Options for the select input of units\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fromInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NumberWithUnitFormInputComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('from')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxNumberLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Number.MAX_SAFE_INTEGER.toString().length\n\n                        \n                    \n                    \n                        \n                            Default value : Number.MAX_SAFE_INTEGER.toString().length\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NumberWithUnitFormInputComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('to')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        unitOptions\n                    \n                \n\n                \n                    \n                        getunitOptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:55\n                                \n                            \n\n                \n                    \n                        setunitOptions(val: [])\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:49\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        unit\n                    \n                \n\n                \n                    \n                        getunit()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:70\n                                \n                            \n\n                \n                    \n                        setunit(val)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts:63\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Host, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { NumberWithUnitFormInputComponent } from '../../form';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { Unit } from '../../utils/unit/unit';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nenum FormFields {\n    from = 'from',\n    to = 'to',\n}\n\n/**\n * The type of value that goes in the {@link DatagridNumericFilterConfig}.\n */\nexport type DatagridNumericFilterValue = [number, number];\n\n/**\n * Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n */\nexport interface DatagridNumericFilterConfig extends FilterConfig {\n    unit?: Unit;\n    unitOptions?: Unit[];\n}\n\n@Component({\n    selector: 'vcd-dg-numeric-filter',\n    templateUrl: 'datagrid-numeric-filter.component.html',\n    styleUrls: ['datagrid-numeric-filter.component.scss'],\n})\nexport class DatagridNumericFilterComponent\n    extends DatagridFilter\n    implements OnInit, OnDestroy {\n    maxNumberLength = Number.MAX_SAFE_INTEGER.toString().length;\n\n    @ViewChild('from') fromInput: NumberWithUnitFormInputComponent;\n    @ViewChild('to') toInput: NumberWithUnitFormInputComponent;\n\n    /**\n     * Options for the select input of units\n     */\n    private _unitOptions: Unit[];\n    @Input() set unitOptions(val: Unit[]) {\n        this._unitOptions = val;\n        if (!this.unit && this.unitOptions && this.unitOptions.length) {\n            this.unit = this.unitOptions[0];\n        }\n    }\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * Base unit to which selected units are converted\n     */\n    private _unit: Unit;\n    @Input() set unit(val: Unit) {\n        if (!val && this.unitOptions && this.unitOptions.length) {\n            this._unit = this.unitOptions[0];\n            return;\n        }\n        this._unit = val;\n    }\n    get unit(): Unit {\n        return this._unit;\n    }\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            [FormFields.from]: new FormControl(null),\n            [FormFields.to]: new FormControl(null),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    protected onBeforeSetConfig(config: DatagridNumericFilterConfig): void {\n        this.unitOptions = config.unitOptions;\n        this.unit = config.unit;\n    }\n\n    setValue(values: DatagridNumericFilterValue): void {\n        if (!values) {\n            return;\n        }\n        if (typeof values[0] === 'number') {\n            this.formGroup.get(FormFields.from).setValue(values[0]);\n        } else {\n            this.formGroup.get(FormFields.from).setValue(null);\n        }\n        if (typeof values[1] === 'number') {\n            this.formGroup.get(FormFields.to).setValue(values[1]);\n        } else {\n            this.formGroup.get(FormFields.to).setValue(null);\n        }\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const from = this.formGroup.get(FormFields.from).value;\n        const to = this.formGroup.get(FormFields.to).value;\n        if (typeof from === 'number' && typeof to !== 'number') {\n            return filterBuilder.greaterThan(from).getString();\n        }\n        if (typeof from !== 'number' && typeof to === 'number') {\n            return filterBuilder.lessThan(to).getString();\n        }\n        if (typeof from === 'number' && typeof to === 'number') {\n            return filterBuilder.betweenNumbers([from, to]).getString();\n        }\n    }\n\n    isActive(): boolean {\n        return !!(\n            this.formGroup &&\n            (typeof this.formGroup.get(FormFields.from).value === 'number' ||\n                typeof this.formGroup.get(FormFields.to).value === 'number')\n        );\n    }\n\n    close(): void {\n        this.filterContainer.open = false;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param value the default value that should go in this numeric filter.\n * @param unit initial value for unit input to be selected\n * @param unitOptions Select dropdown options for unit input\n */\nexport function DatagridNumericFilter(\n    value?: DatagridNumericFilterValue,\n    unitOptions?: Unit[],\n    unit?: Unit\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridNumericFilterComponent,\n        config: {\n            value,\n            unit,\n            unitOptions,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n        \n        \n    \n\n    \n        \n        \n        \n    \n\n\n    \n\n    \n                \n                    datagrid-numeric-filter.component.scss\n                \n                vcd-form-input {\n    & ::ng-deep .clr-form-control,\n    & ::ng-deep .clr-subtext {\n        margin-top: 0;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridNumericFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridNumericFilterConfig.html":{"url":"interfaces/DatagridNumericFilterConfig.html","title":"interface - DatagridNumericFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridNumericFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        unit\n                                \n                                \n                                            Optional\n                                        unitOptions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        unit\n                                    \n                                \n                                \n                                    \n                                        unit:         Unit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unitOptions\n                                    \n                                \n                                \n                                    \n                                        unitOptions:         Unit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Unit[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { NumberWithUnitFormInputComponent } from '../../form';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { Unit } from '../../utils/unit/unit';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nenum FormFields {\n    from = 'from',\n    to = 'to',\n}\n\n/**\n * The type of value that goes in the {@link DatagridNumericFilterConfig}.\n */\nexport type DatagridNumericFilterValue = [number, number];\n\n/**\n * Numeric filter UI widget has only single configuration. So there are no properties in addition to FilterConfig\n */\nexport interface DatagridNumericFilterConfig extends FilterConfig {\n    unit?: Unit;\n    unitOptions?: Unit[];\n}\n\n@Component({\n    selector: 'vcd-dg-numeric-filter',\n    templateUrl: 'datagrid-numeric-filter.component.html',\n    styleUrls: ['datagrid-numeric-filter.component.scss'],\n})\nexport class DatagridNumericFilterComponent\n    extends DatagridFilter\n    implements OnInit, OnDestroy {\n    maxNumberLength = Number.MAX_SAFE_INTEGER.toString().length;\n\n    @ViewChild('from') fromInput: NumberWithUnitFormInputComponent;\n    @ViewChild('to') toInput: NumberWithUnitFormInputComponent;\n\n    /**\n     * Options for the select input of units\n     */\n    private _unitOptions: Unit[];\n    @Input() set unitOptions(val: Unit[]) {\n        this._unitOptions = val;\n        if (!this.unit && this.unitOptions && this.unitOptions.length) {\n            this.unit = this.unitOptions[0];\n        }\n    }\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * Base unit to which selected units are converted\n     */\n    private _unit: Unit;\n    @Input() set unit(val: Unit) {\n        if (!val && this.unitOptions && this.unitOptions.length) {\n            this._unit = this.unitOptions[0];\n            return;\n        }\n        this._unit = val;\n    }\n    get unit(): Unit {\n        return this._unit;\n    }\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            [FormFields.from]: new FormControl(null),\n            [FormFields.to]: new FormControl(null),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    protected onBeforeSetConfig(config: DatagridNumericFilterConfig): void {\n        this.unitOptions = config.unitOptions;\n        this.unit = config.unit;\n    }\n\n    setValue(values: DatagridNumericFilterValue): void {\n        if (!values) {\n            return;\n        }\n        if (typeof values[0] === 'number') {\n            this.formGroup.get(FormFields.from).setValue(values[0]);\n        } else {\n            this.formGroup.get(FormFields.from).setValue(null);\n        }\n        if (typeof values[1] === 'number') {\n            this.formGroup.get(FormFields.to).setValue(values[1]);\n        } else {\n            this.formGroup.get(FormFields.to).setValue(null);\n        }\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const from = this.formGroup.get(FormFields.from).value;\n        const to = this.formGroup.get(FormFields.to).value;\n        if (typeof from === 'number' && typeof to !== 'number') {\n            return filterBuilder.greaterThan(from).getString();\n        }\n        if (typeof from !== 'number' && typeof to === 'number') {\n            return filterBuilder.lessThan(to).getString();\n        }\n        if (typeof from === 'number' && typeof to === 'number') {\n            return filterBuilder.betweenNumbers([from, to]).getString();\n        }\n    }\n\n    isActive(): boolean {\n        return !!(\n            this.formGroup &&\n            (typeof this.formGroup.get(FormFields.from).value === 'number' ||\n                typeof this.formGroup.get(FormFields.to).value === 'number')\n        );\n    }\n\n    close(): void {\n        this.filterContainer.open = false;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param value the default value that should go in this numeric filter.\n * @param unit initial value for unit input to be selected\n * @param unitOptions Select dropdown options for unit input\n */\nexport function DatagridNumericFilter(\n    value?: DatagridNumericFilterValue,\n    unitOptions?: Unit[],\n    unit?: Unit\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridNumericFilterComponent,\n        config: {\n            value,\n            unit,\n            unitOptions,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridSelectFilterComponent.html":{"url":"components/DatagridSelectFilterComponent.html","title":"component - DatagridSelectFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridSelectFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n\n\n    \n        Description\n    \n    \n        Used within a clarity grid column DatagridComponent to render a filter widget with select input\nExample usage:\ncolumns: GridColumn[] = [{\n      displayName: 'Custom Select filter',\n      renderer: 'age',\n      queryFieldName: 'age',\n      filterRendererSpec: FilterComponentRendererSpec({\n          type: DatagridSelectFilterComponent,\n          config: {\n              options: [{\n                  value: 30,\n                  display: 'Thirty'\n              }, {\n                  value: 60,\n                  display: 'sixty'\n              }],\n              value: 60,\n          },\n      }),\n   }]\n\n    \n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-select-filter\n            \n\n\n\n\n            \n                templateUrl\n                datagrid-select-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anyChoice\n                            \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter, fb: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:67\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anyChoice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SelectOption\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        value: '',\n        display: '',\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/datagrid/filters/datagrid-select-filter.component.ts:58\n                            \n                        \n\n                \n                    \n                        Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * List of select options and initial value for the filter are passed through this\n */\nexport interface DatagridSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: SelectOption[];\n\n    /**\n     * Switch to disable conversion of filter value to FIQL. Used by {@link DatagridSelectFilterComponent#getValue}\n     */\n    customFiql?: boolean;\n}\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with select input\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'age',\n *      queryFieldName: 'age',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 30,\n *                  display: 'Thirty'\n *              }, {\n *                  value: 60,\n *                  display: 'sixty'\n *              }],\n *              value: 60,\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-select-filter',\n    templateUrl: 'datagrid-select-filter.component.html',\n})\nexport class DatagridSelectFilterComponent extends DatagridFilter\n    implements OnInit, OnDestroy {\n    /**\n     * Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n     */\n    anyChoice: SelectOption = {\n        value: '',\n        display: '',\n    };\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterSelect: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter, private fb: FormBuilder) {\n        super(filterContainer);\n        this.formGroup = this.fb.group({\n            filterSelect: '',\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 0;\n    }\n\n    setValue(value: string | number): void {\n        if (!this.config.options.find(option => option.value === value)) {\n            throw Error('The value being set on select filter is not equal to any of the options');\n        }\n        this.formGroup.setValue({\n            filterSelect: value,\n        });\n    }\n\n    getValue(): string {\n        if (this.config.customFiql) {\n            return this.formGroup.get('filterSelect').value;\n        }\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const value = this.formGroup.get('filterSelect').value;\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterSelect').value;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this select filter.\n * @param customFiql when set as true will disable any formatting by {@link DatagridSelectFilterComponent#getValue}\n */\nexport function DatagridSelectFilter(\n    options: SelectOption[],\n    value?: string | number,\n    customFiql?: boolean\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridSelectFilterComponent,\n        config: {\n            options,\n            value,\n            customFiql,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n        \n            \n                \n                    {{ anyChoice.display }}\n                    {{\n                        option.isTranslatable ? (option.display | translate) : option.display\n                    }}\n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                            {{ anyChoice.display }}                    {{                        option.isTranslatable ? (option.display | translate) : option.display                    }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridSelectFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridSelectFilterConfig.html":{"url":"interfaces/DatagridSelectFilterConfig.html","title":"interface - DatagridSelectFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridSelectFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                List of select options and initial value for the filter are passed through this\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        customFiql\n                                \n                                \n                                        options\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customFiql\n                                    \n                                \n                                \n                                    \n                                        customFiql:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Switch to disable conversion of filter value to FIQL. Used by DatagridSelectFilterComponent\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:         SelectOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SelectOption[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of select options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * List of select options and initial value for the filter are passed through this\n */\nexport interface DatagridSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: SelectOption[];\n\n    /**\n     * Switch to disable conversion of filter value to FIQL. Used by {@link DatagridSelectFilterComponent#getValue}\n     */\n    customFiql?: boolean;\n}\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with select input\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'age',\n *      queryFieldName: 'age',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 30,\n *                  display: 'Thirty'\n *              }, {\n *                  value: 60,\n *                  display: 'sixty'\n *              }],\n *              value: 60,\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-select-filter',\n    templateUrl: 'datagrid-select-filter.component.html',\n})\nexport class DatagridSelectFilterComponent extends DatagridFilter\n    implements OnInit, OnDestroy {\n    /**\n     * Displayed as the first option with a falsy value. Selecting this option would deactivate the filter\n     */\n    anyChoice: SelectOption = {\n        value: '',\n        display: '',\n    };\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterSelect: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter, private fb: FormBuilder) {\n        super(filterContainer);\n        this.formGroup = this.fb.group({\n            filterSelect: '',\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 0;\n    }\n\n    setValue(value: string | number): void {\n        if (!this.config.options.find(option => option.value === value)) {\n            throw Error('The value being set on select filter is not equal to any of the options');\n        }\n        this.formGroup.setValue({\n            filterSelect: value,\n        });\n    }\n\n    getValue(): string {\n        if (this.config.customFiql) {\n            return this.formGroup.get('filterSelect').value;\n        }\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        const value = this.formGroup.get('filterSelect').value;\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterSelect').value;\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this select filter.\n * @param customFiql when set as true will disable any formatting by {@link DatagridSelectFilterComponent#getValue}\n */\nexport function DatagridSelectFilter(\n    options: SelectOption[],\n    value?: string | number,\n    customFiql?: boolean\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridSelectFilterComponent,\n        config: {\n            options,\n            value,\n            customFiql,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DatagridStringFilterComponent.html":{"url":"components/DatagridStringFilterComponent.html","title":"component - DatagridStringFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DatagridStringFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n\n\n\n    \n        Extends\n    \n    \n                DatagridFilter\n    \n\n    \n        Implements\n    \n    \n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-dg-string-filter\n            \n\n\n\n\n            \n                templateUrl\n                datagrid-string-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _config\n                            \n                            \n                                changes\n                            \n                            \n                                formGroup\n                            \n                            \n                                    Private\n                                subscriptionTracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addWildCard\n                            \n                            \n                                createFormGroup\n                            \n                            \n                                getValue\n                            \n                            \n                                isActive\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                setValue\n                            \n                            \n                                accepts\n                            \n                            \n                                    Abstract\n                                createFormGroup\n                            \n                            \n                                    Protected\n                                getDebounceTimeMs\n                            \n                            \n                                    Abstract\n                                getValue\n                            \n                            \n                                    Abstract\n                                isActive\n                            \n                            \n                                    Abstract\n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onBeforeSetConfig\n                            \n                            \n                                    Abstract\n                                setValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(filterContainer: ClrDatagridFilter)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filterContainer\n                                                  \n                                                        \n                                                                        ClrDatagridFilter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n                \n                    \n                        Type :     C\n\n                    \n                \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:72\n\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addWildCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addWildCard(input: string, position: WildCardPosition, wildcardCharacter: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:64\n                \n            \n\n\n            \n                \n                    Wraps a string with a wrapCharacter in given position;\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    position\n                                    \n                                                WildCardPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    wildcardCharacter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '*'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \ncreateFormGroup()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \nisActive()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \nsetValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/filters/datagrid-string-filter.component.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            accepts\n                        \n                        \n                    \n                \n            \n            \n                \naccepts()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:137\n\n                \n            \n\n\n            \n                \n                    Required by Clarity but ignored since we don't support client side filtering\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            createFormGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:112\n\n                \n            \n\n\n            \n                \n                    To initialize the formGroup from sub classes\n\n\n                    \n                        Returns :         FormGroup\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getDebounceTimeMs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDebounceTimeMs()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:99\n\n                \n            \n\n\n            \n                \n                    To override the default delay time for emission of changes\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:122\n\n                \n            \n\n\n            \n                \n                    For getting the filter UI widget values in FIQL formatted string\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            isActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isActive()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:127\n\n                \n            \n\n\n            \n                \n                    Return true if the filter is currently activated (e.g. a value is provided)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            onBeforeSetConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onBeforeSetConfig(config: C)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:107\n\n                \n            \n\n\n            \n                \n                    Called inside setter of DatagridFilter and Defined in the derived classes to perform some logic before\nassigning the UI widget configuration and setting a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: V)\n                \n            \n\n\n            \n                \n                    Inherited from         DatagridFilter\n\n                \n            \n            \n                \n                        Defined in         DatagridFilter:117\n\n                \n            \n\n\n            \n                \n                    Used for assigning a value to a filter from outside\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            V\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     C\n\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:71\n\n                            \n                        \n\n                \n                    \n                        Sets the configuration needed for a filter UI widget and also it's value.\nAssigned from ComponentRendererOutletDirective after the filter component is created.\nUsed by the getValue method in sub classes to format the FIQL string output.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:87\n\n                            \n                        \n\n                \n                    \n                        Emits whenever a filter form inputs changes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.createFormGroup()\n\n                        \n                    \n                    \n                        \n                            Default value : this.createFormGroup()\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:59\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptionTracker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SubscriptionTracker\n\n                        \n                    \n                    \n                        \n                            Default value : new SubscriptionTracker(this)\n                        \n                    \n                            \n                                \n                                    Inherited from         DatagridFilter\n\n                                \n                            \n                        \n                            \n                                    Defined in         DatagridFilter:60\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nexport enum WildCardPosition {\n    NONE = 0,\n    START = 1,\n    END = 2,\n    WRAP = WildCardPosition.START | WildCardPosition.END,\n}\n\n/**\n * Configures the '*' position in the FIQL string output\n */\nexport interface DatagridStringFilterConfig extends FilterConfig {\n    wildCardPosition?: WildCardPosition;\n}\n\n@Component({\n    selector: 'vcd-dg-string-filter',\n    templateUrl: 'datagrid-string-filter.component.html',\n})\nexport class DatagridStringFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterText: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    setValue(value: string): void {\n        this.formGroup.setValue({\n            filterText: value,\n        });\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        let value = this.formGroup.get('filterText').value;\n        if (this.config && this.config.wildCardPosition) {\n            value = this.addWildCard(value, this.config.wildCardPosition);\n        }\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterText').value;\n    }\n\n    /**\n     * Wraps a string with a `wrapCharacter` in given position;\n     */\n    private addWildCard(input: string, position: WildCardPosition, wildcardCharacter = '*'): string {\n        const start = getWrapCharacter(position, WildCardPosition.START);\n        const end = getWrapCharacter(position, WildCardPosition.END);\n        return `${start}${input}${end}`;\n        /**\n         * @return `wrapCharacter` if the passed in position should show it, an empty string otherwise\n         */\n        function getWrapCharacter(inputPosition: WildCardPosition, checkPosition: WildCardPosition): string {\n            return inputPosition & checkPosition ? wildcardCharacter : '';\n        }\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param wildCardPosition where the * should go in the FIQL string output.\n * @param value the default value of the filter\n */\nexport function DatagridStringFilter(\n    wildCardPosition?: WildCardPosition,\n    value?: string\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridStringFilterComponent,\n        config: {\n            wildCardPosition,\n            value,\n        },\n    });\n}\n\n    \n\n    \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'DatagridStringFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatagridStringFilterConfig.html":{"url":"interfaces/DatagridStringFilterConfig.html","title":"interface - DatagridStringFilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatagridStringFilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Configures the '*' position in the FIQL string output\n\n            \n\n            \n                Extends\n            \n            \n                        FilterConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        wildCardPosition\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        wildCardPosition\n                                    \n                                \n                                \n                                    \n                                        wildCardPosition:         WildCardPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WildCardPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\nexport enum WildCardPosition {\n    NONE = 0,\n    START = 1,\n    END = 2,\n    WRAP = WildCardPosition.START | WildCardPosition.END,\n}\n\n/**\n * Configures the '*' position in the FIQL string output\n */\nexport interface DatagridStringFilterConfig extends FilterConfig {\n    wildCardPosition?: WildCardPosition;\n}\n\n@Component({\n    selector: 'vcd-dg-string-filter',\n    templateUrl: 'datagrid-string-filter.component.html',\n})\nexport class DatagridStringFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    createFormGroup(): FormGroup {\n        return new FormGroup({\n            filterText: new FormControl(''),\n        });\n    }\n\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    setValue(value: string): void {\n        this.formGroup.setValue({\n            filterText: value,\n        });\n    }\n\n    getValue(): string {\n        const filterBuilder = new FilterBuilder().is(this.queryField);\n        let value = this.formGroup.get('filterText').value;\n        if (this.config && this.config.wildCardPosition) {\n            value = this.addWildCard(value, this.config.wildCardPosition);\n        }\n        return filterBuilder.equalTo(value).getString();\n    }\n\n    isActive(): boolean {\n        return !!this.formGroup && this.formGroup.get('filterText').value;\n    }\n\n    /**\n     * Wraps a string with a `wrapCharacter` in given position;\n     */\n    private addWildCard(input: string, position: WildCardPosition, wildcardCharacter = '*'): string {\n        const start = getWrapCharacter(position, WildCardPosition.START);\n        const end = getWrapCharacter(position, WildCardPosition.END);\n        return `${start}${input}${end}`;\n        /**\n         * @return `wrapCharacter` if the passed in position should show it, an empty string otherwise\n         */\n        function getWrapCharacter(inputPosition: WildCardPosition, checkPosition: WildCardPosition): string {\n            return inputPosition & checkPosition ? wildcardCharacter : '';\n        }\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param wildCardPosition where the * should go in the FIQL string output.\n * @param value the default value of the filter\n */\nexport function DatagridStringFilter(\n    wildCardPosition?: WildCardPosition,\n    value?: string\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridStringFilterComponent,\n        config: {\n            wildCardPosition,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailPane.html":{"url":"interfaces/DetailPane.html","title":"interface - DetailPane","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailPane\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration objet used to create the detail pane on the datagrid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        component\n                                \n                                \n                                        header\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                    \n                                \n                                \n                                    \n                                        component:         ComponentRendererConstructor>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentRendererConstructor>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The contents that go within this detail pane.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                    \n                                \n                                \n                                    \n                                        header:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The header that goes on top of this detail pane.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridFilter, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailPaneConfig.html":{"url":"interfaces/DetailPaneConfig.html","title":"interface - DetailPaneConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailPaneConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration object that is passed to the detail pane component.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     R\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The record that this detail pane should render.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridFilter, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DetailRowConfig.html":{"url":"interfaces/DetailRowConfig.html","title":"interface - DetailRowConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DetailRowConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The configuration object that is passed to the detail row component.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        index\n                                \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The total number of rows in the datagrid.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The index this detail row is in the datagrid.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     R\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The record that this detail row should render.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridFilter, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ErrorBannerComponent.html":{"url":"components/ErrorBannerComponent.html","title":"component - ErrorBannerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ErrorBannerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/error/error-banner.component.ts\n\n\n    \n        Description\n    \n    \n        Component that displays the error message only if a non empty errorMessage is passed in\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-error-banner\n            \n\n            \n                styleUrls\n                ./error-banner.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./error-banner.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _errorMessage\n                            \n                            \n                                closed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onAlertClosedChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                alertClosable\n                            \n                            \n                                alertType\n                            \n                            \n                                errorMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dismissed\n                            \n                            \n                                errorMessageChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    errorMessage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        alertClosable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:41\n                            \n                        \n                \n                    \n                        Marks clr-alert as closable or not\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        alertType\n                    \n                \n                \n                    \n                        Type :     \"danger\" | \"warning\" | \"info\" | \"success\"\n\n                    \n                \n                \n                    \n                        Default value : 'danger'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:36\n                            \n                        \n                \n                    \n                        Sets clr-alert type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorMessage\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:29\n                            \n                        \n                \n                    \n                        Two way bound errorMessage, will be cleared when the user dismisses the alert\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        dismissed\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:24\n                            \n                        \n                \n                    \n                        Emits events when the error banner is dismissed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorMessageChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:54\n                            \n                        \n                \n                    \n                        Emits an event when the error message is changed.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAlertClosedChange\n                        \n                        \n                    \n                \n            \n            \n                \nonAlertClosedChange(closed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/error/error-banner.component.ts:59\n                \n            \n\n\n            \n                \n                    Clears the error message when the alert is closed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    closed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _errorMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        errorMessage\n                    \n                \n\n\n                \n                    \n                        seterrorMessage(val: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/error/error-banner.component.ts:46\n                                \n                            \n                    \n                        \n                                Sets the error message displayed by this error banner.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            val\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * Component that displays the error message only if a non empty errorMessage is passed in\n */\n@Component({\n    selector: 'vcd-error-banner',\n    templateUrl: './error-banner.component.html',\n    styleUrls: ['./error-banner.component.scss'],\n})\nexport class ErrorBannerComponent {\n    private _errorMessage = '';\n\n    closed = true;\n\n    /**\n     * Emits events when the error banner is dismissed.\n     */\n    @Output() dismissed = new EventEmitter();\n\n    /**\n     * Two way bound errorMessage, will be cleared when the user dismisses the alert\n     */\n    @Input() get errorMessage(): string {\n        return this._errorMessage;\n    }\n\n    /**\n     * Sets clr-alert type\n     */\n    @Input() alertType: 'danger' | 'warning' | 'info' | 'success' = 'danger';\n\n    /**\n     * Marks clr-alert as closable or not\n     */\n    @Input() alertClosable = true;\n\n    /**\n     * Sets the error message displayed by this error banner.\n     */\n    set errorMessage(val: string) {\n        this._errorMessage = val;\n        this.closed = !val;\n    }\n\n    /**\n     * Emits an event when the error message is changed.\n     */\n    @Output() errorMessageChange = new EventEmitter();\n\n    /**\n     * Clears the error message when the alert is closed.\n     */\n    onAlertClosedChange(closed: boolean): void {\n        this._errorMessage = '';\n        this.errorMessageChange.emit('');\n        this.dismissed.next();\n    }\n}\n\n    \n\n    \n        \n    \n        {{ errorMessage }}\n    \n\n\n    \n\n    \n                \n                    ./error-banner.component.scss\n                \n                /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nclr-alert ::ng-deep .alert {\n    margin-left: 24px;\n    margin-right: 24px;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ errorMessage }}    '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'ErrorBannerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExportColumn.html":{"url":"interfaces/ExportColumn.html","title":"interface - ExportColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExportColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.component.ts\n        \n\n            \n                Description\n            \n            \n                Identifiers for each column that user is allowed to select\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayName\n                                \n                                \n                                        fieldName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Displayed in the list of columns\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the field in the JSON that is returned and converted to a viewable format\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport { ClrDropdown } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { SubscriptionTracker } from '../common/subscription';\nimport { CsvExporterService } from './csv-exporter.service';\n\n/**\n * Identifiers for each column that user is allowed to select\n */\nexport interface ExportColumn {\n    /**\n     * Displayed in the list of columns\n     */\n    displayName: string;\n    /**\n     * The name of the field in the JSON that is returned and converted to a viewable format\n     */\n    fieldName: string;\n}\n\nexport enum UserOptions {\n    selectAll = 'selectAll',\n    friendlyNames = 'friendlyNames',\n    sanitize = 'sanitize',\n}\n\n/**\n * Information passed to the caller so they can fetch the data\n */\nexport interface DataExportRequestEvent {\n    /**\n     * Call this to indicate a new value to be displayed in the progress indicator.\n     * @param progress A number from 0 to 1 indicating download progress. Passing -1 will make it an indeterminate\n     */\n    updateProgress: (progress: number) => void;\n\n    /**\n     * Call this when all records have been fetched to initiate the CSV creation.\n     * This should only be called once after all data fetching is finished\n     * @param records Records to be converted into a csv file\n     * @return a promise of the resulting CSV to indicate when this potentially lengthy process is over\n     */\n    exportData: (records: object[]) => Promise;\n\n    /**\n     * Columns selected by the user.\n     */\n    selectedColumns: ExportColumn[];\n}\n\n/**\n * A dialog to export data\n *\n *  - Allows the UI to select columns to be exported\n *  - Provides a progress indicator\n *  - Converts the data that is fetched by the caller into a CSV\n */\n@Component({\n    selector: 'vcd-data-exporter',\n    templateUrl: 'data-exporter.component.html',\n    styleUrls: ['./data-exporter.component.scss'],\n})\nexport class DataExporterComponent implements OnInit, OnDestroy {\n    constructor(private csvExporterService: CsvExporterService, private translationService: TranslationService) {}\n\n    @ViewChild(ClrDropdown) set columnDropdown(columnDropdown: ClrDropdown) {\n        if (!columnDropdown) {\n            return;\n        }\n        this.subscriptionTracker.subscribe(columnDropdown.toggleService.openChange, opened => {\n            this.isDropdownOpen = opened;\n        });\n    }\n\n    /**\n     * List of columns that can be exported, user may deselect some before sending the download request\n     */\n    @Input() columns: ExportColumn[] = [];\n\n    /**\n     * The name of the file to be downloaded\n     */\n    @Input() fileName = 'data-export.csv';\n\n    /**\n     * Text for the Dialog Header\n     */\n    @Input()\n    dialogHeader: LazyString = this.translationService.translateAsync('vcd.cc.data-exporter.title');\n\n    /**\n     * Text for the cancel button.\n     */\n    @Input()\n    cancelText: LazyString = this.translationService.translateAsync('vcd.cc.cancel');\n\n    /**\n     * Text for the export all button.\n     */\n    @Input()\n    exportAllText: LazyString = this.translationService.translateAsync('vcd.cc.export.all');\n\n    /**\n     * Text for the select columns dropdown button.\n     */\n    @Input()\n    selectColumnsText: LazyString = this.translationService.translateAsync('vcd.cc.select.columns');\n\n    /**\n     * Text for the export button.\n     */\n    @Input()\n    exportText: LazyString = this.translationService.translateAsync('vcd.cc.export');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    yesText: LazyString = this.translationService.translateAsync('vcd.cc.yes');\n\n    /**\n     * Text for the yes button.\n     */\n    @Input()\n    noText: LazyString = this.translationService.translateAsync('vcd.cc.no');\n\n    /**\n     * Text label that is next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.question');\n\n    /**\n     * Text the info message next to the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.info');\n\n    /**\n     * Text the hint message below the friendly field names checkbox.\n     */\n    @Input()\n    friendlyNamesHint: LazyString = this.translationService.translateAsync('vcd.cc.friendly.names.hint');\n\n    /**\n     * Text label that is next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxLabel: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.question');\n\n    /**\n     * Hint message that is below the sanitize checkbox.\n     */\n    @Input()\n    sanitizeCheckboxHint: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.hint');\n\n    /**\n     * Text the info message next to the sanitize checkbox.\n     */\n    @Input()\n    sanitizeInfoMessage: LazyString = this.translationService.translateAsync('vcd.cc.sanitize.info');\n\n    /**\n     * The message that is displayed while the data is downloading.\n     */\n    @Input()\n    downloadingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.downloading');\n\n    /**\n     * The message that is displayed while the data is writing to file.\n     */\n    @Input()\n    writingMessage: LazyString = this.translationService.translateAsync('vcd.cc.exporter.writing');\n\n    /**\n     * Whether the dialog is open\n     */\n    @Input()\n    set open(value: boolean) {\n        this._open = value;\n        this.openChange.emit(value);\n    }\n    get open(): boolean {\n        return this._open;\n    }\n\n    private _open = false;\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    forceDropdownOpen = false;\n\n    /**\n     * Fires when {@link _open} changes. Its parameter indicates the new state.\n     */\n    @Output() openChange = new EventEmitter();\n\n    /**\n     * Called when the export is ready to be created\n     */\n    @Output() dataExportRequest = new EventEmitter();\n\n    /**\n     * True between the time {@link dataExportRequest} fires and {@link DataExportRequestEvent.exportData} is called\n     * or an error is thrown\n     */\n    get isRequestPending(): boolean {\n        return this._isRequestPending;\n    }\n    private _isRequestPending = false;\n\n    /**\n     * Number between 0-1, used for displaying the progress bar.\n     */\n    get progress(): number {\n        return this._progress;\n    }\n    private _progress = 0;\n\n    formGroup: FormGroup;\n\n    exportStage: LazyString;\n\n    optionsFormGroup = new FormGroup({\n        [UserOptions.selectAll]: new FormControl(true),\n        [UserOptions.friendlyNames]: new FormControl(true),\n        [UserOptions.sanitize]: new FormControl(true),\n    });\n\n    /**\n     * Says if the column dropdown is open.\n     */\n    isDropdownOpen = false;\n\n    onClickExport(): void {\n        this.exportStage = this.downloadingMessage;\n        this._isRequestPending = true;\n        this.dataExportRequest.emit({\n            exportData: this.exportData.bind(this),\n            updateProgress: this.updateProgress.bind(this),\n            selectedColumns: this.selectedColumns,\n        });\n    }\n\n    get selectAllControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.selectAll) as FormControl;\n    }\n\n    get sanitizeControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.sanitize) as FormControl;\n    }\n\n    get friendlyFieldsControl(): FormControl {\n        return this.optionsFormGroup.get(UserOptions.friendlyNames) as FormControl;\n    }\n\n    get isExportEnabled(): boolean {\n        if (this.isRequestPending) {\n            return false;\n        }\n        for (const column of this.columns) {\n            if (this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get shouldShowBubbles(): boolean {\n        return !this.selectAllControl.value && !this.isDropdownOpen;\n    }\n\n    /**\n     * Gives a list of all the columns that are selected.\n     */\n    get selectedColumns(): ExportColumn[] {\n        return this.columns.filter(col => this.formGroup.controls[col.fieldName].value);\n    }\n\n    /**\n     * Sets the selected value of the given column.\n     */\n    selectColumn(column: ExportColumn, selected: boolean): void {\n        this.formGroup.controls[column.fieldName].setValue(selected);\n    }\n\n    ngOnInit(): void {\n        const controls = this.columns.reduce((previousValue, currentValue) => {\n            previousValue[currentValue.fieldName] = new FormControl(true);\n            return previousValue;\n        }, {});\n        this.formGroup = new FormGroup(controls);\n        this.subscriptionTracker.subscribe(this.selectAllControl.valueChanges, change => {\n            if (change) {\n                for (const column of this.columns) {\n                    this.formGroup.controls[column.fieldName].setValue(true);\n                }\n            } else {\n                this.forceDropdownOpen = true;\n                this.isDropdownOpen = true;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {}\n\n    private exportData(records: object[]): Promise {\n        if (!this.open) {\n            return;\n        }\n\n        const rows = [\n            // First row is the display names\n            Object.keys(records[0]).map(fieldName =>\n                this.friendlyFieldsControl.value ? this.getDisplayNameForField(fieldName) : fieldName\n            ),\n            // Then the data\n            ...records.map(rec => Object.keys(rec).map(key => rec[key])),\n        ];\n        return this.downloadData(rows, this.sanitizeControl.value);\n    }\n\n    downloadData(data: any[][], shouldSanitize: boolean = false): Promise {\n        this.exportStage = this.writingMessage;\n        return new Promise(resolve => {\n            // We need to setTimeout because we changed how the message should be displayed\n            // but we need to interrupt the current task to get the message to display\n            // We tried to use window.requestAnimationFrame, but this didn't work so we had to use\n            // setTimeout().\n            setTimeout(() => {\n                this._isRequestPending = false;\n                const csvFile = this.csvExporterService.createCsv(data, shouldSanitize);\n                this.csvExporterService.downloadCsvFile(csvFile, this.fileName);\n                this.open = false;\n                resolve(csvFile);\n            });\n        });\n    }\n\n    private updateProgress(progress: number): void {\n        this._progress = progress;\n    }\n\n    private getDisplayNameForField(fieldName: string): string {\n        for (const column of this.columns) {\n            if (column.fieldName === fieldName) {\n                return column.displayName;\n            }\n        }\n        return fieldName;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterBuilder.html":{"url":"classes/FilterBuilder.html","title":"class - FilterBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/filter-builder.ts\n        \n\n            \n                Description\n            \n            \n                Utility to reduce the verbosity required when creating complex query filter expressions.\nUsage:\nconst builder = new FilterBuilder();\nconst filter = builder\n          .is(\"isVappTemplate\").equalTo(true)\n          .and()\n          .is(\"vcd\").equalTo(vcdId)\n          .and().or(\n              builder.is(\"created\").before(userInputDate),\n              builder.is(\"uptime\").greaterThan(user)\n          );\nWill produce:\nisVappTemplate==true;vcd==some-urn-here;(created=lt=DATETIME,uptime=gt=3600000)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentOperator\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                    Private\n                                result\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                after\n                            \n                            \n                                    Public\n                                all\n                            \n                            \n                                    Public\n                                and\n                            \n                            \n                                    Public\n                                any\n                            \n                            \n                                    Public\n                                before\n                            \n                            \n                                    Public\n                                betweenNumbers\n                            \n                            \n                                    Private\n                                buildPartial\n                            \n                            \n                                    Private\n                                clear\n                            \n                            \n                                    Private\n                                condition\n                            \n                            \n                                    Public\n                                equalTo\n                            \n                            \n                                    Public\n                                getString\n                            \n                            \n                                    Public\n                                greaterThan\n                            \n                            \n                                    Public\n                                greaterThanOrEqualTo\n                            \n                            \n                                    Public\n                                is\n                            \n                            \n                                    Public\n                                lessThan\n                            \n                            \n                                    Public\n                                lessThanOrEqualTo\n                            \n                            \n                                    Public\n                                notEqualTo\n                            \n                            \n                                    Public\n                                or\n                            \n                            \n                                    Public\n                                wrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(parent: FilterBuilder)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/filter-builder.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        FilterBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentOperator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FilterBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            result\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/filter-builder.ts:39\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            after\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    after(date: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:246\n                \n            \n\n\n            \n                \n                    Match a filter expression to be after a date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            all\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    all(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:106\n                \n            \n\n\n            \n                \n                    Top level AND operator\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            and\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    and(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:72\n                \n            \n\n\n            \n                \n                    Conjunct expressions\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            any\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    any(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:160\n                \n            \n\n\n            \n                \n                    Top level OR operator\nconditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            before\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    before(date: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:238\n                \n            \n\n\n            \n                \n                    Match a filter expression to be before a date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            betweenNumbers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    betweenNumbers(values: number[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:256\n                \n            \n\n\n            \n                \n                    Match a filter expression to be between two numbers.\nLower limit is greater or equal and upper limit is less or equal.\nIf for either of the limit is not provided value, the limit is not included in the filter expression.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            buildPartial\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildPartial()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:291\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            condition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    condition(operator: string, value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    operator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            equalTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    equalTo(value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:190\n                \n            \n\n\n            \n                \n                    Match a filter expression to be equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getString()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:62\n                \n            \n\n\n            \n                \n                    Create a string representing the filter parameter to be used in a query\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the filter expression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            greaterThan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    greaterThan(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:222\n                \n            \n\n\n            \n                \n                    Match a filter expression to be greater than a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            greaterThanOrEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    greaterThanOrEqualTo(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:230\n                \n            \n\n\n            \n                \n                    Match a filter expression to be greater than or equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            is\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    is(property: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:52\n                \n            \n\n\n            \n                \n                    Initialize a filter expression\n  property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The created FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            lessThan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    lessThan(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:206\n                \n            \n\n\n            \n                \n                    Match a filter expression to be less than a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            lessThanOrEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    lessThanOrEqualTo(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:214\n                \n            \n\n\n            \n                \n                    Match a filter expression to be less than or equal to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            notEqualTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    notEqualTo(value: Primitives, moreValues: Primitives[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:198\n                \n            \n\n\n            \n                \n                    Match a filter expression to be different to a value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Primitives\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moreValues\n                                    \n                                                Primitives[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            or\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    or(conditions: FilterBuilder[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:126\n                \n            \n\n\n            \n                \n                    Disjunct expressions\n  conditions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FilterBuilder[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            wrap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    wrap()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/filter-builder.ts:180\n                \n            \n\n\n            \n                \n                    Wrap the current expression in ()\n\n\n                    \n                    \n                    \n                        Returns :         FilterBuilder\n\n                    \n                    \n                        The FilterBuilder instance\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export const Operators: { [key: string]: string } = {\n    OR: ',',\n    AND: ';',\n    GT: '=gt=',\n    GE: '=ge=',\n    LT: '=lt=',\n    LE: '=le=',\n    EQ: '==',\n    NEQ: '!=',\n};\n\nexport type Primitives = boolean | string | number;\n\n/**\n * Utility to reduce the verbosity required when creating complex query filter expressions.\n *\n * Usage:\n * const builder = new FilterBuilder();\n * const filter = builder\n *          .is(\"isVappTemplate\").equalTo(true)\n *          .and()\n *          .is(\"vcd\").equalTo(vcdId)\n *          .and().or(\n *              builder.is(\"created\").before(userInputDate),\n *              builder.is(\"uptime\").greaterThan(user)\n *          );\n *\n * Will produce:\n * isVappTemplate==true;vcd==some-urn-here;(created=lt=DATETIME,uptime=gt=3600000)\n */\nexport class FilterBuilder {\n    private result = '';\n    private parent: FilterBuilder;\n    private currentOperator: string;\n\n    constructor(parent: FilterBuilder = null) {\n        this.parent = parent;\n    }\n\n    /**\n     * Initialize a filter expression\n     *  property\n     * @returns The created FilterBuilder instance\n     */\n    public is(property: string): FilterBuilder {\n        const fb = new FilterBuilder(this);\n        fb.result = property;\n        return fb;\n    }\n\n    /**\n     * Create a string representing the filter parameter to be used in a query\n     * @returns the filter expression\n     */\n    public getString(): string {\n        const query = this.buildPartial();\n        return query;\n    }\n\n    /**\n     * Conjunct expressions\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public and(...conditions: FilterBuilder[]): FilterBuilder {\n        if (!conditions.length) {\n            if (\n                this.currentOperator === Operators.OR ||\n                (this.parent && this.parent.currentOperator === Operators.OR)\n            ) {\n                if (this.parent) {\n                    this.parent.result = '(' + this.parent.result;\n                    this.result += ')';\n                } else {\n                    this.wrap();\n                }\n                this.currentOperator = Operators.AND;\n            }\n            this.result += Operators.AND;\n        } else {\n            this.result += '(';\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.AND + condition.buildPartial();\n            });\n\n            this.result += partial + ')';\n        }\n        return this;\n    }\n\n    /**\n     * Top level AND operator\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public all(...conditions: FilterBuilder[]): FilterBuilder {\n        if (conditions.length) {\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.AND + condition.buildPartial();\n            });\n\n            this.result += partial;\n        }\n\n        return this;\n    }\n\n    /**\n     * Disjunct expressions\n     *  conditions\n     * @returns The FilterBuilder instance\n     */\n    public or(...conditions: FilterBuilder[]): FilterBuilder {\n        if (!conditions.length) {\n            if (\n                this.currentOperator === Operators.AND ||\n                (this.parent && this.parent.currentOperator === Operators.AND)\n            ) {\n                if (this.parent) {\n                    this.parent.result = '(' + this.parent.result;\n                    this.result += ')';\n                } else {\n                    this.wrap();\n                }\n                this.currentOperator = Operators.OR;\n            }\n            this.result += Operators.OR;\n        } else {\n            this.result += '(';\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n\n            conditions.forEach(condition => {\n                partial += Operators.OR + condition.buildPartial();\n            });\n\n            this.result += partial + ')';\n        }\n        return this;\n    }\n\n    /**\n     * Top level OR operator\n     * conditions\n     * @returns The FilterBuilder instance\n     */\n    public any(...conditions: FilterBuilder[]): FilterBuilder {\n        if (conditions.length) {\n            const first = conditions.shift();\n            let partial = first.buildPartial();\n            first.clear();\n\n            conditions.forEach(condition => {\n                partial += Operators.OR + condition.buildPartial();\n                condition.clear();\n            });\n            this.result += partial;\n        }\n\n        return this;\n    }\n\n    /**\n     * Wrap the current expression in ()\n     * @returns The FilterBuilder instance\n     */\n    public wrap(): FilterBuilder {\n        this.result = '(' + this.result + ')';\n        this.currentOperator = null;\n        return this;\n    }\n\n    /**\n     * Match a filter expression to be equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public equalTo(value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        return this.condition(Operators.EQ, value, ...moreValues);\n    }\n\n    /**\n     * Match a filter expression to be different to a value\n     * @returns The FilterBuilder instance\n     */\n    public notEqualTo(value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        return this.condition(Operators.NEQ, value, ...moreValues);\n    }\n\n    /**\n     * Match a filter expression to be less than a value\n     * @returns The FilterBuilder instance\n     */\n    public lessThan(value: number): FilterBuilder {\n        return this.condition(Operators.LT, value);\n    }\n\n    /**\n     * Match a filter expression to be less than or equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public lessThanOrEqualTo(value: number): FilterBuilder {\n        return this.condition(Operators.LE, value);\n    }\n\n    /**\n     * Match a filter expression to be greater than a value\n     * @returns The FilterBuilder instance\n     */\n    public greaterThan(value: number): FilterBuilder {\n        return this.condition(Operators.GT, value);\n    }\n\n    /**\n     * Match a filter expression to be greater than or equal to a value\n     * @returns The FilterBuilder instance\n     */\n    public greaterThanOrEqualTo(value: number): FilterBuilder {\n        return this.condition(Operators.GE, value);\n    }\n\n    /**\n     * Match a filter expression to be before a date\n     * @returns The FilterBuilder instance\n     */\n    public before(date: Date): FilterBuilder {\n        return this.condition(Operators.LT, date.toISOString());\n    }\n\n    /**\n     * Match a filter expression to be after a date\n     * @returns The FilterBuilder instance\n     */\n    public after(date: Date): FilterBuilder {\n        return this.condition(Operators.GT, date.toISOString());\n    }\n\n    /**\n     * Match a filter expression to be between two numbers.\n     * Lower limit is greater or equal and upper limit is less or equal.\n     * If for either of the limit is not provided value, the limit is not included in the filter expression.\n     * @returns The FilterBuilder instance\n     */\n    public betweenNumbers(values: number[]): FilterBuilder {\n        const builders: FilterBuilder[] = [];\n\n        if (typeof values[0] === 'number') {\n            builders.push(new FilterBuilder().is(this.result).condition(Operators.GE, values[0]));\n        }\n\n        if (typeof values[1] === 'number') {\n            builders.push(new FilterBuilder().is(this.result).condition(Operators.LE, values[1]));\n        }\n\n        return new FilterBuilder().is('').and(...builders);\n    }\n\n    private condition(operator: string, value: Primitives, ...moreValues: Primitives[]): FilterBuilder {\n        const name = this.result;\n        this.result += (operator + value) as string;\n        if (moreValues.length) {\n            moreValues.forEach(val => {\n                this.result += (',' + name + operator + val) as string;\n            });\n            this.currentOperator = Operators.OR;\n        }\n        return this;\n    }\n\n    private clear(): void {\n        this.result = '';\n        this.currentOperator = '';\n        if (this.parent) {\n            this.parent.clear();\n            this.parent = null;\n        }\n    }\n\n    private buildPartial(): string {\n        if (this.parent) {\n            return `${this.parent.buildPartial()}${this.result}`;\n        } else {\n            return this.result;\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterConfig.html":{"url":"interfaces/FilterConfig.html","title":"interface - FilterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FilterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Properties required by all the grid filters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        queryField\n                                \n                                \n                                            Optional\n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        queryField\n                                    \n                                \n                                \n                                    \n                                        queryField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used as a query field for server side filtering of the grid column\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:     V\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     V\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Value with which grid data can be filtered before initially being rendered\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterRendererSpec.html":{"url":"interfaces/FilterRendererSpec.html","title":"interface - FilterRendererSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FilterRendererSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-filter.ts\n        \n\n            \n                Description\n            \n            \n                Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\ncomponent. used by the ComponentRendererOutletDirective\n\n            \n\n            \n                Extends\n            \n            \n                        ComponentRendererSpec\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     C\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     C\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Config object required for the configuration of component that will be rendered in the column filter widget\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { ClrDatagridFilterInterface } from '@clr/angular/data/datagrid/interfaces/filter.interface';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Number of milliseconds delayed before emitting the filter has changed observable\n */\nexport const DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES = 300;\n\n/**\n * Properties required by all the grid filters\n */\nexport interface FilterConfig {\n    /**\n     * Used as a query field for server side filtering of the grid column\n     */\n    queryField?: string;\n\n    /**\n     * Value with which grid data can be filtered before initially being rendered\n     */\n    value?: V;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in a filter widget and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface FilterRendererSpec extends ComponentRendererSpec {\n    /**\n     *  Config object required for the configuration of component that will be rendered in the column filter widget\n     */\n    config: C;\n}\n\n/**\n * Extended by filter components used in {@link DatagridComponent}. Those components can only be used inside a\n * clr-dg-filter component and are dynamically rendered by {@link ComponentRendererOutletDirective} using\n * {@link GridColumn.filter}\n * V is the type of filter input value that is passed into setValue method\n * C extends FilterConfig is configuration of a filter that contains queryField and a value of type V\n */\nexport abstract class DatagridFilter>\n    implements OnInit, OnDestroy, ClrDatagridFilterInterface, ComponentRenderer {\n    formGroup = this.createFormGroup();\n    private subscriptionTracker = new SubscriptionTracker(this);\n\n    protected constructor(filterContainer: ClrDatagridFilter) {\n        filterContainer.setFilter(this);\n    }\n\n    /**\n     * Sets the configuration needed for a filter UI widget and also it's value.\n     * Assigned from {@link ComponentRendererOutletDirective#assignValue} after the filter component is created.\n     * Used by the getValue method in sub classes to format the FIQL string output.\n     */\n    protected _config: C;\n    @Input() set config(val: C) {\n        this.onBeforeSetConfig(val);\n        this._config = val;\n        if (this._config.value) {\n            this.setValue(this._config.value);\n        }\n    }\n\n    get config(): C {\n        return this._config;\n    }\n\n    /**\n     * Emits whenever a filter form inputs changes\n     */\n    changes = new Subject();\n\n    ngOnInit(): void {\n        const obs = this.getDebounceTimeMs()\n            ? this.formGroup.valueChanges.pipe(debounceTime(this.getDebounceTimeMs()))\n            : this.formGroup.valueChanges;\n        this.subscriptionTracker.subscribe(obs, () => this.changes.next());\n    }\n\n    /**\n     * To override the default delay time for emission of changes\n     */\n    protected getDebounceTimeMs(): number {\n        return DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES;\n    }\n\n    /**\n     * Called inside setter of {@link DatagridFilter#config} and Defined in the derived classes to perform some logic before\n     * assigning the UI widget configuration and setting a value\n     */\n    protected onBeforeSetConfig(config: C): void {}\n\n    /**\n     * To initialize the {@link formGroup} from sub classes\n     */\n    abstract createFormGroup(): FormGroup;\n\n    /**\n     * Used for assigning a value to a filter from outside\n     */\n    abstract setValue(value: V): void;\n\n    /**\n     * For getting the filter UI widget values in FIQL formatted string\n     */\n    abstract getValue(): string;\n\n    /**\n     * Return true if the filter is currently activated (e.g. a value is provided)\n     */\n    abstract isActive(): boolean;\n\n    /**\n     * @inheritdoc\n     */\n    abstract ngOnDestroy(): void;\n\n    /**\n     * Required by Clarity but ignored since we don't support client side filtering\n     */\n    accepts(): boolean {\n        return true;\n    }\n\n    /**\n     * @see unit tests of sub class {@link DatagridStringFilterComponent} for unit tests of following methods\n     */\n    /**\n     * Used in the {@link #getValue} method to make it part of the FIQL formatted string\n     */\n    get queryField(): string {\n        if (this._config) {\n            if (this._config.queryField) {\n                return this._config.queryField;\n            }\n            throw Error('Query field is not specified');\n        }\n    }\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specifications of {@link FilterRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n * }\n *\n * In the above examples these methods help in making sure that:\n * - Value \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function FilterComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: C & {};\n}): FilterRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FilterTestHostComponent.html":{"url":"components/FilterTestHostComponent.html","title":"component - FilterTestHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FilterTestHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/utils/test/datagrid/filter-utils.ts\n\n\n    \n        Description\n    \n    \n        TestHostComponent that has only single column for filter testing.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                    Static\n                                filterColumn\n                            \n                            \n                                gridData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFilter\n                        \n                        \n                    \n                \n            \n            \n                \nsetFilter(filterType: Type>, finder: WidgetFinder, config: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:119\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        V\n                        C\n                    \n                \n            \n\n            \n                \n                    Creates the filterRendererSpec and adds it to the grid column above\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterType\n                                    \n                                                Type>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    finder\n                                    \n                                                WidgetFinder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            column\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FilterTestHostComponent.filterColumn\n\n                        \n                    \n                    \n                        \n                            Default value : FilterTestHostComponent.filterColumn\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:110\n                            \n                        \n\n                \n                    \n                        Used inside the html template\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            filterColumn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GridColumn\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        displayName: 'Filter',\n        renderer: 'Does not matter',\n        queryFieldName: 'queryFieldName',\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:102\n                            \n                        \n\n                \n                    \n                        Made static so that it can be called in filter unit tests to make sure the FIQL string outputs have the queryFieldName\nvalue given in the column definition below\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gridData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GridDataFetchResult\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        items: [],\n    }\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/filter-utils.ts:112\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Type } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { MockTranslationService, TranslationService } from '@vcd/i18n';\nimport {\n    DatagridFilter,\n    FilterComponentRendererSpec,\n    GridColumn,\n    GridDataFetchResult,\n    VcdDatagridModule,\n} from '../../../datagrid';\nimport { MockRecord } from '../../../datagrid/mock-data';\nimport { IdGenerator } from '../../id-generator/id-generator';\nimport { WidgetFinder } from '../widget-object';\nimport { ClrDatagridWidgetObject } from './datagrid.wo';\n\n/**\n * Creates a testing module with {@link FilterTestHostComponent} that has only single column for filter testing\n */\nasync function configureTestingModule(): Promise {\n    await TestBed.configureTestingModule({\n        imports: [VcdDatagridModule],\n        declarations: [FilterTestHostComponent],\n        providers: [\n            {\n                provide: TranslationService,\n                useClass: MockTranslationService,\n            },\n            {\n                provide: IdGenerator,\n                useValue: new IdGenerator('vcd-id'),\n            },\n        ],\n    }).compileComponents();\n}\n\n/**\n * Used inside beforeEach functions of filter tests and it does the following:\n * - Creates a testing module with {@link FilterTestHostComponent} that has only single column for filter testing\n * - Sets the filter on the column of host component({@link FilterTestHostComponent})\n * - Opens the filter and returns a component instance of the filter created\n *\n * @param filterType to be created in the test host component grid's column\n * @param config The configuration for the filter\n *\n * Example:\n * beforeEach(function(this: HasDgStringFilter): void {\n *     this.filter = createDatagridFilterTestHelper(\n *         DatagridStringFilterComponent,\n *         { wildCardPosition: WildCardPosition.END, value: 'testInput-1' }\n *     );\n * });\n */\nexport function createDatagridFilterTestHelper(\n    filterType: Type>,\n    config?: C\n): DatagridFilter {\n    configureTestingModule();\n\n    // Add the filter to grid column\n    const finder = new WidgetFinder(FilterTestHostComponent);\n    const grid = finder.find(ClrDatagridWidgetObject);\n    finder.hostComponent.setFilter(filterType, finder, config || ({} as C));\n\n    return grid.getFilter(filterType);\n}\n\n/**\n * Same as the above function but used for tests which need finder\n */\nexport function createDatagridFilterTestHelperWithFinder(\n    filterType: Type>,\n    config?: C\n): { finder: WidgetFinder; filter: DatagridFilter } {\n    configureTestingModule();\n\n    // Add the filter to grid column\n    const finder = new WidgetFinder(FilterTestHostComponent);\n    const grid = finder.find(ClrDatagridWidgetObject);\n    finder.hostComponent.setFilter(filterType, finder, config || ({} as C));\n\n    return { finder, filter: grid.getFilter(filterType) };\n}\n\n/**\n * TestHostComponent that has only single column for filter testing.\n */\n@Component({\n    template: `\n        \n    `,\n})\nexport class FilterTestHostComponent {\n    /**\n     * Made static so that it can be called in filter unit tests to make sure the FIQL string outputs have the queryFieldName\n     * value given in the column definition below\n     */\n    static filterColumn: GridColumn = {\n        displayName: 'Filter',\n        renderer: 'Does not matter',\n        queryFieldName: 'queryFieldName',\n    };\n    /**\n     * Used inside the html template\n     */\n    column = FilterTestHostComponent.filterColumn;\n\n    gridData: GridDataFetchResult = {\n        items: [],\n    };\n\n    /**\n     * Creates the filterRendererSpec and adds it to the grid column above\n     */\n    setFilter(\n        filterType: Type>,\n        finder: WidgetFinder,\n        config: C\n    ): void {\n        this.column.filter = FilterComponentRendererSpec({ type: filterType, config });\n        finder.detectChanges();\n    }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FilterTestHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindParams.html":{"url":"interfaces/FindParams.html","title":"interface - FindParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Arguments for WidgetFinder and WidgetFinder\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ancestor\n                                \n                                \n                                            Optional\n                                        className\n                                \n                                \n                                        woConstructor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ancestor\n                                    \n                                \n                                \n                                    \n                                        ancestor:         DebugElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DebugElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If provided, search starts from this container. It defaults to the fixture's root debugElement\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        className\n                                    \n                                \n                                \n                                    \n                                        className:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional CSS class name that can be used when there could be multiple instances of the object within the\nfixture tree\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        woConstructor\n                                    \n                                \n                                \n                                    \n                                        woConstructor:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The constructor of the widget to be found\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type> {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\ninterface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nfunction isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindableWidget.html":{"url":"interfaces/FindableWidget.html","title":"interface - FindableWidget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindableWidget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Subclasses should implement the FindableWidget interface so they can be found with WidgetFinder\nNote\nThis is done by creating a static property tagNameon your subclass, not a regular instance, since this\ninterface represents a constructor for a WidgetObject, not an instance.\n\n            \n\n            \n                Extends\n            \n            \n                        Type\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        tagName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tagName\n                                    \n                                \n                                \n                                    \n                                        tagName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type> {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\ninterface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nfunction isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormCheckboxComponent.html":{"url":"components/FormCheckboxComponent.html","title":"component - FormCheckboxComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormCheckboxComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-checkbox/form-checkbox.component.ts\n\n\n    \n        Description\n    \n    \n        FormControl wrapper around a input HTML element of checkbox type. The label input from\nBaseFormControl is used for displaying a label on the left of a form field and the text input is used for\ndisplaying label on the right of checkbox. Use the 'styling' property with a value of 'checkbox' or 'toggle-switch'\nto display a checkbox or toggle switch on the UI.\nExample:\n      \n      \n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-checkbox\n            \n\n\n\n\n            \n                templateUrl\n                ./form-checkbox.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                iconShape\n                            \n                            \n                                rightLabel\n                            \n                            \n                                styling\n                            \n                            \n                                text\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isCheckbox\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(controlDirective: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        controlDirective\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        iconShape\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:49\n                            \n                        \n                \n                    \n                        A shape for the icon that appears next to the checkbox.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        rightLabel\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:44\n                            \n                        \n                \n                    \n                        Put the label text on the right.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        styling\n                    \n                \n                \n                    \n                        Type :         CheckBoxStyling\n\n                    \n                \n                \n                    \n                        Default value : CheckBoxStyling.CHECKBOX\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:39\n                            \n                        \n                \n                    \n                        Styling for the checkbox.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:34\n                            \n                        \n                \n                    \n                        The label that appears next to the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isCheckbox\n                    \n                \n\n                \n                    \n                        getisCheckbox()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/form-checkbox/form-checkbox.component.ts:51\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, OnInit, Optional, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { BaseFormControl } from '../base-form-control';\n\nexport enum CheckBoxStyling {\n    CHECKBOX = 'checkbox',\n    TOGGLESWITCH = 'toggle-switch',\n}\n\n/**\n * {@link FormControl} wrapper around a input HTML element of checkbox type. The label input from\n * {@link BaseFormControl} is used for displaying a label on the left of a form field and the text input is used for\n * displaying label on the right of checkbox. Use the 'styling' property with a value of 'checkbox' or 'toggle-switch'\n * to display a checkbox or toggle switch on the UI.\n *\n * Example:\n *      \n *      \n */\n@Component({\n    selector: 'vcd-form-checkbox',\n    templateUrl: './form-checkbox.component.html',\n})\nexport class FormCheckboxComponent extends BaseFormControl {\n    /**\n     * The label that appears next to the control\n     */\n    @Input() text: string;\n\n    /**\n     * Styling for the checkbox.\n     */\n    @Input() styling: CheckBoxStyling = CheckBoxStyling.CHECKBOX;\n\n    /**\n     * Put the label text on the right.\n     */\n    @Input() rightLabel = false;\n\n    /**\n     * A shape for the icon that appears next to the checkbox.\n     */\n    @Input() iconShape: string;\n\n    get isCheckbox(): boolean {\n        return this.styling === CheckBoxStyling.CHECKBOX;\n    }\n\n    constructor(@Self() @Optional() controlDirective: NgControl) {\n        super(controlDirective);\n    }\n}\n\n    \n\n    \n        \n    \n        {{ label }}\n        \n            \n                \n                \n                    \n                    {{ text }}\n                \n            \n            \n                \n                    {{ key | translate: formControl.value }}\n                \n            \n            \n                {{ description }}\n            \n        \n    \n    \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ label }}                                                                                            {{ text }}                                                                            {{ key | translate: formControl.value }}                                                        {{ description }}                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormCheckboxComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormInputComponent.html":{"url":"components/FormInputComponent.html","title":"component - FormInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-input/form-input.component.ts\n\n\n    \n        Description\n    \n    \n        A FormControl that contains an input that supports string, number and datetime-local input types\nExample:\n      \n      \n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n    \n        Implements\n    \n    \n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-input\n            \n\n            \n                styleUrls\n                ../form.scss,./form-input.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./form-input.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                textInput\n                            \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                inputChanged\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                writeValue\n                            \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hint\n                            \n                            \n                                hintPosition\n                            \n                            \n                                max\n                            \n                            \n                                maxlength\n                            \n                            \n                                min\n                            \n                            \n                                placeholder\n                            \n                            \n                                size\n                            \n                            \n                                type\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                enterClicked\n                            \n                            \n                                escapeClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(controlDirective: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-input/form-input.component.ts:93\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        controlDirective\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        hint\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:77\n                            \n                        \n                \n                    \n                        Hint to display in the content of a signpost\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hintPosition\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'top-left'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:72\n                            \n                        \n                \n                    \n                        The direction for displaying the hint\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        max\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MAX_SAFE_INTEGER\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:52\n                            \n                        \n                \n                    \n                        Maximum value allowed.\n(This is an input specified in the component attribute.)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        maxlength\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:67\n                            \n                        \n                \n                    \n                        Maximum number of characters (in UTF-16 code units) that the user can enter.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        min\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Number.MIN_SAFE_INTEGER\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:46\n                            \n                        \n                \n                    \n                        Minimum value allowed.\n(This is an input specified in the component attribute.)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        placeholder\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:40\n                            \n                        \n                \n                    \n                        Input 'placeholder' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:62\n                            \n                        \n                \n                    \n                        Input 'size' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'text'\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:57\n                            \n                        \n                \n                    \n                        Input 'type' field.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        enterClicked\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:88\n                            \n                        \n                \n                    \n                        Emitted when enter key is released for callers to handle the event like... closing a filter widget\nDatagridNumericFilterComponent.close\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        escapeClicked\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:93\n                            \n                        \n                \n                    \n                        Emitted when escape key is released for callers to handle the event\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inputChanged\n                        \n                        \n                    \n                \n            \n            \n                \ninputChanged()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/form-input/form-input.component.ts:104\n                \n            \n\n\n            \n                \n                    Input fields in the vcd-ui app does not support IME input on chrome browser. So in order to fix it, the value\nbeing assigned to the form control has to be given to the input HTML element's value using the 'viewChild' query\nselector inside writeValue function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('textInput', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/form-input/form-input.component.ts:82\n                            \n                        \n\n                \n                    \n                        The input field element\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    Self,\n    ViewChild,\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { BaseFormControl } from '../base-form-control';\n\n/**\n * A {@link FormControl} that contains an input that supports string, number and datetime-local input types\n *\n * Example:\n *      \n *      \n */\n@Component({\n    selector: 'vcd-form-input',\n    templateUrl: './form-input.component.html',\n    styleUrls: ['../form.scss', './form-input.component.scss'],\n})\nexport class FormInputComponent extends BaseFormControl implements AfterViewInit {\n    /**\n     * Input 'placeholder' field.\n     */\n    @Input() placeholder: string = null;\n\n    /**\n     * Minimum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() min: number = Number.MIN_SAFE_INTEGER;\n\n    /**\n     * Maximum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() max: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Input 'type' field.\n     */\n    @Input() type = 'text';\n\n    /**\n     * Input 'size' field.\n     */\n    @Input() size: number = null;\n\n    /**\n     * Maximum number of characters (in UTF-16 code units) that the user can enter.\n     */\n    @Input() maxlength: number = null;\n\n    /**\n     * The direction for displaying the hint\n     */\n    @Input() hintPosition = 'top-left';\n\n    /**\n     * Hint to display in the content of a signpost\n     */\n    @Input() hint: string;\n\n    /**\n     * The input field element\n     */\n    @ViewChild('textInput', { static: true }) textInput: ElementRef;\n\n    /**\n     * Emitted when enter key is released for callers to handle the event like... closing a filter widget\n     * {@link DatagridNumericFilterComponent.close}\n     */\n    @Output() enterClicked = new EventEmitter(false);\n\n    /**\n     * Emitted when escape key is released for callers to handle the event\n     */\n    @Output() escapeClicked = new EventEmitter(false);\n\n    constructor(@Self() @Optional() controlDirective: NgControl) {\n        super(controlDirective);\n    }\n\n    /**\n     * Input fields in the vcd-ui app does not support IME input on chrome browser. So in order to fix it, the value\n     * being assigned to the form control has to be given to the input HTML element's value using the 'viewChild' query\n     * selector inside writeValue function.\n     */\n    writeValue(value: any): void {\n        // The textInput view child element is undefined the first time. So, the initial value is stored in a variable\n        // to assign it later to the input field value.\n        this.initialValue = value;\n        if (!this.textInput) {\n            return;\n        }\n\n        if (typeof value === 'number') {\n            value = value.toString(10);\n        }\n        if (this.type === 'datetime-local') {\n            value = getFormattedDateValue(value);\n        }\n        this.textInput.nativeElement.value = value;\n    }\n\n    ngAfterViewInit(): void {\n        // The textInput view child element is only defined after this life cycle hook. So, the writeValue is called\n        // here.\n        this.writeValue(this.initialValue);\n    }\n\n    inputChanged(): void {\n        const value = this.textInput.nativeElement.value;\n        this.initialValue = value;\n\n        if (this.type === 'number') {\n            if (!value) {\n                this.onChange(value);\n            } else {\n                this.onChange(parseFloat(value));\n            }\n            return;\n        }\n        if (this.type === 'datetime-local' && value !== '') {\n            const isoDateValue = new Date(getFormattedDateValue(value)).toISOString();\n            this.onChange(isoDateValue);\n            return;\n        }\n        this.onChange(value);\n    }\n}\n\n/**\n * To format a date string into a value which can be given to the input html element\n */\nexport function getFormattedDateValue(value: string): string {\n    const date = new Date(value);\n    return (\n        date.getFullYear() +\n        '-' +\n        pad(date.getMonth() + 1) +\n        '-' +\n        pad(date.getDate()) +\n        'T' +\n        pad(date.getHours()) +\n        ':' +\n        pad(date.getMinutes())\n    );\n}\n\nexport function pad(num: number): string | number {\n    if (num \n    \n\n    \n        \n    \n        \n            {{ label }}\n        \n        \n            \n                \n                \n            \n            \n                \n                    {{ key | translate: formControl.value:min.toString():max }}\n                \n            \n            \n                {{ description }}\n            \n        \n        \n        \n            \n                {{ hint }}\n            \n        \n    \n\n\n    \n\n\n    \n\n    \n                \n                    ../form.scss\n                \n                .required-field:after {\n    content: '*';\n    color: red;\n    padding-left: 5px;\n}\n\n                \n                    ./form-input.component.scss\n                \n                .form-group >>> aside {\n    margin-top: 6px;\n    margin-bottom: 6px;\n    flex-grow: 1;\n}\n\n.form-group.hide-label {\n    padding-left: 0;\n}\n\n.input-aside {\n    display: flex;\n    width: 100%;\n}\n\n:host-context(.modal):not(.adjust-aside-left) {\n    .form-label {\n        flex-grow: 1;\n    }\n    .form-label > input {\n        width: 100%;\n    }\n}\n\n.form-group-description {\n    margin-bottom: 15px;\n}\n\nclr-signpost p:first-child {\n    margin-top: 0;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{ label }}                                                                                                                        {{ key | translate: formControl.value:min.toString():max }}                                                        {{ description }}                                                                {{ hint }}                            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormSelectComponent.html":{"url":"components/FormSelectComponent.html","title":"component - FormSelectComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FormSelectComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/form/form-select/form-select.component.ts\n\n\n    \n        Description\n    \n    \n        FormControl wrapper around a select HTML element\n\n    \n\n    \n        Extends\n    \n    \n                BaseFormControl\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-form-select\n            \n\n            \n                styleUrls\n                ../form.scss,./form-select.component.scss\n            \n\n\n\n            \n                templateUrl\n                form-select.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formControlNameDirective\n                            \n                            \n                                id\n                            \n                            \n                                    Protected\n                                initialValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                description\n                            \n                            \n                                errorLabels\n                            \n                            \n                                isReadOnly\n                            \n                            \n                                label\n                            \n                            \n                                showAsterisk\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    selectedOption\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(ngControl: NgControl)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/form/form-select/form-select.component.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ngControl\n                                                  \n                                                        \n                                                                        NgControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :         SelectOption[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/form-select/form-select.component.ts:23\n                            \n                        \n                \n                    \n                        The displayed options for the select element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        description\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '\\u00A0'\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:52\n\n                            \n                        \n                \n                    \n                        The description that appears below the control\n\\u00A0 is   (non-breaking space)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        errorLabels\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:62\n\n                            \n                        \n                \n                    \n                        Error labels to be used instead of NgControl error keys\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReadOnly\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:57\n\n                            \n                        \n                \n                    \n                        Whether this component is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:46\n\n                            \n                        \n                \n                    \n                        The label that appears before the control\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showAsterisk\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:41\n\n                            \n                        \n                \n                    \n                        Show the asterisk next to the control when true\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnChange(onChange: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onChange\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerOnTouched\n                        \n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(onTouched: (args: unknown[]) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:109\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    onTouched\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDisabledState\n                        \n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isDisabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeValue\n                        \n                        \n                    \n                \n            \n            \n                \nwriteValue(val: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseFormControl\n\n                \n            \n            \n                \n                        Defined in         BaseFormControl:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:36\n\n                            \n                        \n\n                \n                    \n                        Whether the control is disabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControlNameDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NgControl\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:67\n\n                            \n                        \n\n                \n                    \n                        FormControlName directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:21\n\n                            \n                        \n\n                \n                    \n                        Auto generated ID for the input field.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | string | boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:72\n\n                            \n                        \n\n                \n                    \n                        To store the initial value of the input form control.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:26\n\n                            \n                        \n\n                \n                    \n                        Change callback.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onTouch\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseFormControl\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseFormControl:31\n\n                            \n                        \n\n                \n                    \n                        Touch callback.\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        selectedOption\n                    \n                \n\n                \n                    \n                        getselectedOption()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/form-select/form-select.component.ts:29\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Optional, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { BaseFormControl } from '../base-form-control';\n\n/**\n * {@link FormControl} wrapper around a select HTML element\n */\n@Component({\n    selector: 'vcd-form-select',\n    templateUrl: 'form-select.component.html',\n    styleUrls: ['../form.scss', './form-select.component.scss'],\n})\nexport class FormSelectComponent extends BaseFormControl {\n    /**\n     * The displayed options for the select element\n     */\n    @Input() options: SelectOption[] = [];\n\n    constructor(@Self() @Optional() ngControl: NgControl) {\n        super(ngControl);\n    }\n\n    get selectedOption(): SelectOption {\n        if (!this.options) {\n            return undefined;\n        }\n        // option.value and formControl.value can be of type number or string\n        return this.options.find(option => option.value.toString() === this.formControl.value.toString());\n    }\n}\n\n    \n\n    \n        \n    \n        \n            {{ label }}\n        \n        \n            {{ selectedOption.isTranslatable ? (selectedOption.display | translate) : selectedOption.display }}\n        \n        \n            \n                \n                    \n                        {{ option.isTranslatable ? (option.display | translate) : option.display }}\n                    \n                \n            \n\n            \n\n            \n                \n                    {{ key | translate: [formControl.value] }}\n                \n            \n        \n    \n    \n        \n    \n\n\n    \n\n    \n                \n                    ../form.scss\n                \n                .required-field:after {\n    content: '*';\n    color: red;\n    padding-left: 5px;\n}\n\n                \n                    ./form-select.component.scss\n                \n                .form-group.hide-label {\n    padding-left: 0;\n}\n\n.form-group.hide-label label:first-child {\n    visibility: hidden;\n}\n\n.error-content {\n    white-space: normal;\n}\n\n:host(.site-selector-single-site) {\n    display: none;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{ label }}                            {{ selectedOption.isTranslatable ? (selectedOption.display | translate) : selectedOption.display }}                                                                                        {{ option.isTranslatable ? (option.display | translate) : option.display }}                                                                                                            {{ key | translate: [formControl.value] }}                                                        '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormSelectComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FormValidators.html":{"url":"classes/FormValidators.html","title":"class - FormValidators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FormValidators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/validators.ts\n        \n\n            \n                Description\n            \n            \n                validators used for form control validations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createNullSafeValidator\n                            \n                            \n                                    Static\n                                isNumberInRange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createNullSafeValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNullSafeValidator(validator: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/validators.ts:17\n                \n            \n\n\n            \n                \n                    A wrapper that validates that a control's value is defined before running the validator function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The validator function to run if the control's value is defined.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isNumberInRange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNumberInRange(min: number, max: number, translationKey: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/validators.ts:32\n                \n            \n\n\n            \n                \n                    Create a validator that requires a number to be within a range.\nAlso checks that the value is numeric\nAccepts a translation key to display proper error messaging\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    translationKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FormControl, ValidatorFn, Validators } from '@angular/forms';\n\n/**\n * validators used for form control validations.\n */\nexport class FormValidators {\n    /**\n     * A wrapper that validates that a control's value is defined before running the validator function.\n     *\n     * @param validator The validator function to run if the control's value is defined.\n     */\n    static createNullSafeValidator(validator: (...args: any[]) => unknown): ValidatorFn {\n        const res = (control: FormControl) => {\n            if (Validators.required(control)) {\n                return null;\n            }\n            return validator(control);\n        };\n        return res;\n    }\n\n    /**\n     * Create a validator that requires a number to be within a range.\n     * Also checks that the value is numeric\n     * Accepts a translation key to display proper error messaging\n     */\n    static isNumberInRange(min: number, max: number, translationKey: string): ValidatorFn {\n        const res = FormValidators.createNullSafeValidator((control: any) => {\n            const isNumber = !isNaN(parseFloat(control.value)) && isFinite(control.value);\n            return control.value >= min && control.value \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FunctionRenderer.html":{"url":"interfaces/FunctionRenderer.html","title":"interface - FunctionRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FunctionRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Column renderer as a function. Defined in calling component when the cell value is calculated from different\nproperties.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [record: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         string\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/FunctionRendererPipe.html":{"url":"pipes/FunctionRendererPipe.html","title":"pipe - FunctionRendererPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  FunctionRendererPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/datagrid/pipes/function-renderer.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Used for executing the functions of column cells which use functions to calculate their values from different\nproperties of an object\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        functionRenderer\n                    \n                    \n                        Pure\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(item: any, renderer: (val: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/datagrid/pipes/function-renderer.pipe.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderer\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Used for executing the functions of column cells which use functions to calculate their values from different\n * properties of an object\n */\n@Pipe({\n    name: 'functionRenderer',\n    pure: true,\n})\nexport class FunctionRendererPipe implements PipeTransform {\n    public transform(item: any, renderer: (val: any) => any): string {\n        if (!item || !renderer) {\n            return null;\n        }\n        return renderer(item);\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GlobalButton.html":{"url":"interfaces/GlobalButton.html","title":"interface - GlobalButton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GlobalButton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                A type of button whose displayability does not depend on the selected entity.\n\n            \n\n            \n                Extends\n            \n            \n                        Button\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isActive\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                    \n                                \n                                \n                                    \n                                        isActive:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The function that is called to determine if the button should be displayed.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridColumn.html":{"url":"interfaces/GridColumn.html","title":"interface - GridColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n        \n\n            \n                Description\n            \n            \n                Configuration object defined in the caller. This contains properties for the column header (text, filtering,\nsorting, toggling etc.,) and content for row cells.\nExample:\nconst gridColumn: GridColumn = {\n   displayName: \"Column Heading\",\n   renderer: \"someRecord.property\",\n   hideable: \"NEVER\"\n}\nThe above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\nThe value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        cliptextConfig\n                                \n                                \n                                            Optional\n                                        clrDgColumnClassName\n                                \n                                \n                                        displayName\n                                \n                                \n                                            Optional\n                                        emptyColumnPlaceholder\n                                \n                                \n                                            Optional\n                                        filter\n                                \n                                \n                                            Optional\n                                        hideable\n                                \n                                \n                                            Optional\n                                        queryFieldName\n                                \n                                \n                                        renderer\n                                \n                                \n                                            Optional\n                                        sortable\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cliptextConfig\n                                    \n                                \n                                \n                                    \n                                        cliptextConfig:         CliptextConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CliptextConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The configuration for the cliptext in the datagrid.\nDefaults to size: 'lg', mouseoutDelay: undefined.\nIf null, will disable cliptext\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clrDgColumnClassName\n                                    \n                                \n                                \n                                    \n                                        clrDgColumnClassName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class of the column header.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Header text for the column\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emptyColumnPlaceholder\n                                    \n                                \n                                \n                                    \n                                        emptyColumnPlaceholder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    When there is no data, show this message.\nTry to avoid showing this before initial load.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                    \n                                \n                                \n                                    \n                                        filter:     FilterRendererSpec>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FilterRendererSpec>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    TODO: Should this be made to work with top level search on grids across all columns?\n  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideable\n                                    \n                                \n                                \n                                    \n                                        hideable:         GridColumnHideable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GridColumnHideable\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryFieldName\n                                    \n                                \n                                \n                                    \n                                        queryFieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for sorting/filtering. Not needed for columns not filterable/sortable\nTODO: do we need to support array type for querying across multiple columns?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        renderer\n                                    \n                                \n                                \n                                    \n                                        renderer:     string | FunctionRenderer | ColumnRendererSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | FunctionRenderer | ColumnRendererSpec\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    If the renderer passed in is a\n\nstring: Used as default renderer. Can be a dot separated string to identify a nested property of the item\nFunctionRenderer: When you want to create a calculated column, but don't need custom HTML\nTemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\nColumnRendererSpec: When HTML is needed and when the HTML is provided as a component\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortable\n                                    \n                                \n                                \n                                    \n                                        sortable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to show the column as sortable. Defaults to true\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { TextIcon } from '../../common/interfaces/action-item.interface';\nimport { CliptextConfig } from '../../lib/directives/show-clipped-text.directive';\nimport { FilterConfig, FilterRendererSpec } from '../filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The ways buttons should be displayed when they are inactive.\n */\nexport enum InactiveButtonDisplayMode {\n    Hide = 'HIDE',\n    Disable = 'Disable',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport interface FunctionRenderer {\n    (record: T): string;\n}\n\n/**\n * A generic interface for a button that can be displayed on the grid.\n */\nexport interface Button {\n    /**\n     * The translated text of the button.\n     */\n    label: string;\n    /**\n     * The css class the button should have.\n     *\n     * @unique among all added buttons\n     */\n    class: string;\n    /**\n     * The way this button should be shown when inactive.\n     * Overrides {@link ButtonConfig.inactiveDisplayMode}.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (rec?: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec?: R[]) => boolean;\n}\n\n/**\n * A type of button whose displayability does not depend on the selected entity.\n */\nexport interface GlobalButton extends Button {\n    /**\n     * The function that is called to determine if the button should be displayed.\n     */\n    isActive: () => boolean;\n}\n\n/**\n * A type of button whose displayability dependends on the selected entity.\n */\nexport interface ContextualButton extends Button {\n    /**\n     * The function that is called when the button is pressed.\n     *\n     * @param entity the currently selected entities.\n     */\n    handler: (entity: R[]) => Promise | void;\n    /**\n     * The function that is called to determine if the button should be displayed.\n     *\n     * @param entity the currently selected entities.\n     */\n    isActive: (rec: R[]) => boolean;\n    /**\n     * The Clarity icon of the contextual button that is displayed if the button is featured.\n     */\n    icon: string;\n}\n\n/**\n * An enum that describes where the contextual buttons should display.\n */\nexport enum ContextualButtonPosition {\n    TOP = 'TOP',\n    ROW = 'ROW',\n}\n\n/**\n * A configuration that descibes all the information about the contextual buttons.\n */\nexport interface ContextualButtonConfig {\n    /**\n     * A list of all the contextual buttons.\n     */\n    buttons: ContextualButton[];\n    /**\n     * An ordered list of {@link ContextualButton.id}s of buttons that should be in a featured position.\n     *\n     * Only non-hidden buttons will be shown.\n     *\n     * If featured is not set, all buttons will become featured.\n     */\n    featured?: string[];\n    /**\n     * How many buttons should display on the featured section.\n     *\n     * Used when you want to set a limit on the number of featured buttons shown.\n     *\n     * If featuredCount is not set, it will default to the total number of buttons.\n     */\n    featuredCount?: number;\n    /**\n     * Where the buttons should display on the grid.\n     */\n    position: ContextualButtonPosition;\n    /**\n     * If the title should be the button label, icon, or both\n     * Defaults to ICON if unset.\n     */\n    buttonContents?: TextIcon;\n}\n\n/**\n * The configuration object that describes the type of buttons to put on the top of the grid.\n */\nexport interface ButtonConfig {\n    /**\n     * The buttons whose displayability does not depend on the selected entity.\n     */\n    globalButtons: GlobalButton[];\n    /**\n     * The buttons whose displayability depends on the selected entity.\n     */\n    contextualButtonConfig?: ContextualButtonConfig;\n    /**\n     * The way buttons should be shown when inactive.\n     */\n    inactiveDisplayMode?: InactiveButtonDisplayMode;\n}\n\n/**\n * Renderer specification of a column that contains component type to be rendered in the cell and configuration for that\n * component. used by the {@link ComponentRendererOutletDirective}\n */\nexport interface ColumnRendererSpec extends ComponentRendererSpec {\n    /**\n     * A function that creates a config object required for the configuration of component that will be rendered in the column\n     * @param record An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: (record?: R) => C;\n}\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ColumnRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer | ColumnRendererSpec;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: FilterRendererSpec>;\n\n    /**\n     * The configuration for the cliptext in the datagrid.\n     * Defaults to size: 'lg', mouseoutDelay: undefined.\n     * If null, will disable cliptext\n     */\n    cliptextConfig?: CliptextConfig;\n\n    /**\n     * Whether to show the column as sortable. Defaults to true\n     */\n    sortable?: boolean;\n\n    /**\n     * The class of the column header.\n     */\n    clrDgColumnClassName?: string;\n}\n\n/**\n * Utility function to enforce type safety on config object of components of {@link ComponentRenderer} type. Used for creating\n * component renderer specification of {@link ColumnRendererSpec} type\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n * }\n *\n * In the above example this method helps in making sure that:\n * - Value \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n *\n * #Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\n * {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n */\nexport function ColumnComponentRendererSpec(componentRendererSpec: {\n    type: ComponentRendererConstructor;\n    config: (record?: R) => C & {};\n}): ColumnRendererSpec {\n    return componentRendererSpec;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridDataFetchResult.html":{"url":"interfaces/GridDataFetchResult.html","title":"interface - GridDataFetchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridDataFetchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                Representation of data required for rendering contents of cells and pagination information\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        items\n                                \n                                \n                                            Optional\n                                        totalItems\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                    \n                                \n                                \n                                    \n                                        items:     R[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Items to be listed in the grid\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Total number of items\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridFilter, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GridState.html":{"url":"interfaces/GridState.html","title":"interface - GridState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GridState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\npart of the event DatagridComponent.gridRefresh. The handler then used this object to construct a query.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        filters\n                                \n                                \n                                            Optional\n                                        pagination\n                                \n                                \n                                            Optional\n                                        sortColumn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                    \n                                \n                                \n                                    \n                                        filters:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    FIQL formatted list of active filters\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pagination\n                                    \n                                \n                                \n                                    \n                                        pagination:         PagionationInformation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PagionationInformation\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The pagination information that the datagrid should show.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortColumn\n                                    \n                                \n                                \n                                    \n                                        sortColumn:         SortedColumn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SortedColumn\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The currently sorted column in the datagrid.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridFilter, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HasFinder.html":{"url":"interfaces/HasFinder.html","title":"interface - HasFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HasFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Can be used in tests that use this to share a finder with before/AfterEach instead of leaky closures\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        finder\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        finder\n                                    \n                                \n                                \n                                    \n                                        finder:         WidgetFinder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WidgetFinder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type> {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\ninterface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nfunction isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Hertz.html":{"url":"classes/Hertz.html","title":"class - Hertz","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Hertz\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ThousandsUnit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Ghz\n                            \n                            \n                                    Static\n                                Hz\n                            \n                            \n                                    Static\n                                Khz\n                            \n                            \n                                    Static\n                                Mhz\n                            \n                            \n                                    Static\n                                Thz\n                            \n                            \n                                    Static\n                                types\n                            \n                            \n                                    Static\n                                unitNameTranslationKeyPrefix\n                            \n                            \n                                    Static\n                                valueWithUnitTranslationKeyPrefix\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllUnitTypes\n                            \n                            \n                                getUnitNameTranslationKey\n                            \n                            \n                                getValueWithUnitTranslationKey\n                            \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Ghz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e9, 'GHz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:114\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Hz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1, 'Hz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:111\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Khz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e3, 'KHz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Mhz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e6, 'MHz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:113\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Thz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Hertz\n\n                        \n                    \n                    \n                        \n                            Default value : new Hertz(1e12, 'THz')\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:115\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            types\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [Hertz.Hz, Hertz.Khz, Hertz.Mhz, Hertz.Ghz]\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:116\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            unitNameTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.units.hertz.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:110\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            valueWithUnitTranslationKeyPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.cpu.speed.unit.'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:109\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ThousandsUnit\n\n                                \n                            \n                        \n                            \n                                    Defined in         ThousandsUnit:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Hertz[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: ThousandsUnit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:89\n\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            ThousandsUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ThousandsUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         ThousandsUnit\n\n                \n            \n            \n                \n                        Defined in         ThousandsUnit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISubscriptionTracker.html":{"url":"interfaces/ISubscriptionTracker.html","title":"interface - ISubscriptionTracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISubscriptionTracker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/subscription/subscription-tracker.ts\n        \n\n            \n                Description\n            \n            \n                An interface that knows how to subscribe and unsubscribe from observables.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    subscribe\n                                \n                                \n                                    unsubscribe\n                                \n                                \n                                    unsubscribeAll\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subscribe\n                        \n                        \n                    \n                \n            \n            \n                \nsubscribe(observable: Observable, observerOrNext?: PartialObserver | , error?: (error?: any) => void, complete?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\nWill call the {@param complete} when complete, and {@param error} when errors happen.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    observable\n                                    \n                                            Observable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    observerOrNext\n                                    \n                                            PartialObserver | \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    complete\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribe\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribe(subscription: Subscription)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:28\n                \n            \n\n\n            \n                \n                    Unsubscribes from the given {@param subscription}.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                            Subscription\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:33\n                \n            \n\n\n            \n                \n                    Unsubscribes from all subscriptions on this Subscribable.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { OnDestroy } from '@angular/core';\nimport { Observable, PartialObserver, Subscription } from 'rxjs';\nimport { toSubscriber } from 'rxjs/internal-compatibility';\n\n/**\n * An interface that knows how to subscribe and unsubscribe from observables.\n */\nexport interface ISubscriptionTracker {\n    /**\n     * Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\n     * Will call the {@param complete} when complete, and {@param error} when errors happen.\n     */\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription;\n\n    /**\n     * Unsubscribes from the given {@param subscription}.\n     */\n    unsubscribe(subscription: Subscription): Subscription;\n\n    /**\n     * Unsubscribes from all subscriptions on this {@link Subscribable}.\n     */\n    unsubscribeAll(): void;\n}\n\n/**\n * Components can use this to have subscriptions automatically removed when the component is destroyed\n */\nexport class SubscriptionTracker implements ISubscriptionTracker {\n    private subscriptions: Subscription[] = [];\n\n    /**\n     * Constructs this tracker to call {@link unsubscribeAll} when {@link OnDestroy.ngOnDestroy} is called.\n     */\n    constructor(destroyable: OnDestroy) {\n        const originalOnDestroy = destroyable.ngOnDestroy;\n        destroyable.ngOnDestroy = () => {\n            this.unsubscribeAll();\n            originalOnDestroy.call(destroyable);\n        };\n    }\n\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription {\n        const subscription = observable.subscribe(toSubscriber(observerOrNext, error, complete));\n        this.subscriptions.push(subscription);\n        return subscription;\n    }\n\n    unsubscribe(subscription: Subscription): Subscription {\n        subscription.unsubscribe();\n        const indexOfSubscription = this.subscriptions.indexOf(subscription);\n        if (indexOfSubscription === -1) {\n            throw new Error('Unsubscribing to untracked subscription');\n        }\n        this.subscriptions.splice(indexOfSubscription, 1);\n        return subscription;\n    }\n\n    unsubscribeAll(): void {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdGenerator.html":{"url":"classes/IdGenerator.html","title":"class - IdGenerator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdGenerator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/id-generator/id-generator.ts\n        \n\n            \n                Description\n            \n            \n                Generates unique IDs\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                idCounter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prefix: string)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/id-generator/id-generator.ts:17\n                            \n                        \n\n                \n                    \n                            The string to be prefixed for IdGenerator returned\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prefix\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            idCounter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/id-generator/id-generator.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generate\n                        \n                        \n                    \n                \n            \n            \n                \ngenerate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/id-generator/id-generator.ts:15\n                \n            \n\n\n            \n                \n                    Getter that returns the a unique ID\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class IdGenerator {\n    private static idCounter = 0;\n\n    /**\n     * Getter that returns the a unique ID\n     */\n    generate(): string {\n        return `${this.prefix}-${IdGenerator.idCounter++}`;\n    }\n\n    /**\n     * The string to be prefixed for {@link IdGenerator#id} returned\n     */\n    constructor(private prefix: string) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InternalRegistrationData.html":{"url":"interfaces/InternalRegistrationData.html","title":"interface - InternalRegistrationData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InternalRegistrationData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.service.ts\n        \n\n            \n                Description\n            \n            \n                This interface is used internally by the service\n\n            \n\n            \n                Extends\n            \n            \n                        RegisteredProviders\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        order\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        order\n                                    \n                                \n                                \n                                    \n                                        order:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SpotlightSearchProvider } from './spotlight-search.provider';\n\n/**\n * Interface describing what providers are registered within the system\n */\nexport interface RegisteredProviders {\n    /**\n     * The very search provider\n     */\n    provider: SpotlightSearchProvider;\n\n    /**\n     * The section name (the title or the group name) that this provider will provides results for.\n     */\n    section: string;\n}\n\n/**\n * This interface is used internally by the service\n */\ninterface InternalRegistrationData extends RegisteredProviders {\n    order?: number;\n    id: string;\n}\n\n/**\n * Create unique id\n */\nconst createId = ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})();\n\n@Injectable()\nexport class SpotlightSearchService {\n    registrations: InternalRegistrationData[] = [];\n\n    /**\n     * Register a search provider\n     * @param provider The search provider {@link SpotlightSearchProvider}\n     * @param section The section name (the title or the group name) that this provider will provides results for.\n     * @param order The order of the section in the spotlight search results. Less the order, closer to the beginning\n     *        of the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n     */\n    public registerProvider(provider: SpotlightSearchProvider, section: string, order: number = -1): string {\n        const registrationData = { provider, section, order, id: createId() };\n\n        let insertIndex = -1;\n        // Determine the position of the new registration\n        if (order > -1) {\n            insertIndex = this.registrations.findIndex(data => {\n                // If an item has a negative index, this means no order had been provided for that item\n                // which means we have found the insert index\n                if (data.order  -1) {\n            this.registrations.splice(insertIndex, 0, registrationData);\n        } else {\n            this.registrations.push(registrationData);\n        }\n\n        return registrationData.id;\n    }\n\n    /**\n     * Unregister a search provider by providing the registration id.\n     * Returns true if unregistration was done.\n     * @param registrationId the id returned when registering the provider\n     */\n    public unregisterProvider(registrationId: string): boolean {\n        const index = this.registrations.findIndex(data => data.id === registrationId);\n        if (index > -1) {\n            this.registrations.splice(index, 1);\n        }\n        return index > -1;\n    }\n\n    /**\n     * Get a list of all the registered search providers.\n     */\n    public getRegisteredProviders(): RegisteredProviders[] {\n        return this.registrations.map(data => ({ provider: data.provider, section: data.section }));\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoadingIndicatorComponent.html":{"url":"components/LoadingIndicatorComponent.html","title":"component - LoadingIndicatorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LoadingIndicatorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/loading/loading-indicator.component.ts\n\n\n    \n        Description\n    \n    \n        Loading indicator for blocking modal dialogs while loading.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-loading-indicator\n            \n\n            \n                styleUrls\n                loading-indicator.component.scss\n            \n\n\n\n            \n                templateUrl\n                loading-indicator.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _size\n                            \n                            \n                                    Private\n                                    Readonly\n                                defaultSpinnerSize\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isLoading\n                            \n                            \n                                loadingTextKey\n                            \n                            \n                                showSpinner\n                            \n                            \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isLoading\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:43\n                            \n                        \n                \n                    \n                        Show/hide the loading indicator.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        loadingTextKey\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:55\n                            \n                        \n                \n                    \n                        Text to show next to the spinner.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showSpinner\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:49\n                            \n                        \n                \n                    \n                        Show/hide the spinner if only an overlay is required.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n                \n                    \n                        Type :         SpinnerSize\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:62\n                            \n                        \n                \n                    \n                        Spinner size setter.\nSets default size if provided value is not from specified sized.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpinnerSize\n\n                        \n                    \n                    \n                        \n                            Default value : this.defaultSpinnerSize\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:38\n                            \n                        \n\n                \n                    \n                        Spinner size.\nSpinners can be displayed in three sizes:\n\nsm(Small): This is the required sizing for inline spinners (see above). It measures 18x18 pixels.\nmd(Medium): Medium spinners measure 36x36 pixels. Default.\nlg(Large): This is the default size for page spinners (see above).\n\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            defaultSpinnerSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpinnerSize\n\n                        \n                    \n                    \n                        \n                            Default value : SIZES.md\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:27\n                            \n                        \n\n                \n                    \n                        Default spinner size set to \"md\" - medium used within the modal dialogs\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:73\n                                \n                            \n                    \n                        \n                                Gives the size of this loading indicator.\n\n\n                                \n                                    Returns :         SpinnerSize\n\n                                \n                        \n                    \n\n                \n                    \n                        setsize(size)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/common/loading/loading-indicator.component.ts:62\n                                \n                            \n                    \n                        \n                                Spinner size setter.\nSets default size if provided value is not from specified sized.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            size\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\n\nexport enum SIZES {\n    sm = 'sm',\n    md = 'md',\n    lg = 'lg',\n}\nexport type SpinnerSize = keyof typeof SIZES;\n\n/**\n * Loading indicator for blocking modal dialogs while loading.\n */\n@Component({\n    selector: 'vcd-loading-indicator',\n    templateUrl: 'loading-indicator.component.html',\n    styleUrls: ['loading-indicator.component.scss'],\n})\nexport class LoadingIndicatorComponent {\n    /**\n     * Default spinner size set to \"md\" - medium used within the modal dialogs\n     */\n    private readonly defaultSpinnerSize: SpinnerSize = SIZES.md;\n    /**\n     * Spinner size.\n     *\n     * Spinners can be displayed in three sizes:\n     *\n     *  - sm(Small): This is the required sizing for inline spinners (see above). It measures 18x18 pixels.\n     *  - md(Medium): Medium spinners measure 36x36 pixels. Default.\n     *  - lg(Large): This is the default size for page spinners (see above).\n     *\n     */\n    private _size: SpinnerSize = this.defaultSpinnerSize;\n    /**\n     * Show/hide the loading indicator.\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * Show/hide the spinner if only an overlay is required.\n     */\n    @Input()\n    public showSpinner = true;\n\n    /**\n     * Text to show next to the spinner.\n     */\n    @Input()\n    public loadingTextKey: string = null;\n\n    /**\n     * Spinner size setter.\n     * Sets default size if provided value is not from specified sized.\n     */\n    @Input()\n    set size(size: SpinnerSize) {\n        if (!size || Object.keys(SIZES).indexOf(size) === -1) {\n            this._size = this.defaultSpinnerSize;\n        } else {\n            this._size = size;\n        }\n    }\n\n    /**\n     * Gives the size of this loading indicator.\n     */\n    get size(): SpinnerSize {\n        return this._size;\n    }\n}\n\n    \n\n    \n        \n    \n    \n        \n             \n            {{ loadingTextKey | translate }}\n        \n    \n\n\n\n    \n\n    \n                \n                    loading-indicator.component.scss\n                \n                $overlay-background-color-default: rgba(250, 250, 250, 0.5);\n$overlay-background-color-modal: rgba(255, 255, 255, 0.5);\n\n@mixin full-height {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n}\n\n:host {\n    display: block;\n    position: relative;\n}\n\n:host-context(.modal-body) .overlay {\n    background-color: $overlay-background-color-modal;\n}\n\n.overlay {\n    background-color: $overlay-background-color-default;\n    @include full-height();\n    z-index: 10;\n}\n\n.indicator-container {\n    z-index: 600;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    @include full-height();\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                         {{ loadingTextKey | translate }}            '\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'LoadingIndicatorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MinMaxValidator.html":{"url":"directives/MinMaxValidator.html","title":"directive - MinMaxValidator","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MinMaxValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n        \n\n            \n                Description\n            \n            \n                Directive for adding min, max inputs to NumberWithUnitFormInputComponent and also add min, max validators to\nthe list of NumberWithUnitFormInputComponent.formControl validators\n\n            \n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                { provide: NG_VALIDATORS, useExisting: MinMaxValidator, multi: true }\n                            \n                        \n                    \n\n                    \n                        Selector\n                        vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                max\n                            \n                            \n                                min\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        max\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:38\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(control: AbstractControl)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    control\n                                    \n                                                AbstractControl\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Component, Directive, Input, OnDestroy, OnInit, Optional, Self, ViewChild } from '@angular/core';\nimport {\n    AbstractControl,\n    FormBuilder,\n    FormGroup,\n    NG_VALIDATORS,\n    NgControl,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators,\n} from '@angular/forms';\nimport { TranslationService } from '@vcd/i18n';\nimport { SelectOption } from '../../common/interfaces';\nimport { SubscriptionTracker } from '../../common/subscription';\nimport { Unit } from '../../utils/unit/unit';\nimport { UnitFormatter } from '../../utils/unit/unit-formatter';\nimport { BaseFormControl } from '../base-form-control';\nimport { FormSelectComponent } from '../form-select/form-select.component';\nimport { FormValidators } from '../validators';\n\n/**\n * Directive for adding min, max inputs to {@link NumberWithUnitFormInputComponent} and also add min, max validators to\n * the list of {@link NumberWithUnitFormInputComponent.formControl} validators\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]',\n    providers: [{ provide: NG_VALIDATORS, useExisting: MinMaxValidator, multi: true }],\n})\n/* tslint:enable:directive-selector */\nexport class MinMaxValidator implements Validator {\n    @Input() min: number;\n    @Input() max: number;\n    validate(control: AbstractControl): ValidationErrors | null {\n        const validators: ValidatorFn[] = [];\n        if (typeof this.min !== 'undefined') {\n            validators.push(Validators.min(this.min));\n        }\n        if (typeof this.max !== 'undefined') {\n            validators.push(Validators.max(this.max));\n        }\n        return Validators.compose(validators)(control);\n    }\n}\n\n/**\n * -1 is the number to specify a value of unlimited.\n */\nexport const UNLIMITED = -1;\n\n/**\n * A numerical form input component with unit selection and unlimited checkbox.\n * It doesn't take custom validation because it serve a specific use case.\n */\n@Component({\n    selector: 'vcd-number-with-unit-form-input',\n    templateUrl: './number-with-unit-form-input.component.html',\n    styleUrls: ['./number-with-unit-form-input.component.scss'],\n})\nexport class NumberWithUnitFormInputComponent extends BaseFormControl implements OnInit, OnDestroy {\n    @ViewChild('unitDropdown', { static: false }) unitDropdown: FormSelectComponent;\n\n    tracker = new SubscriptionTracker(this);\n\n    /**\n     * Show the Unlimited checkbox\n     */\n    @Input() showUnlimitedOption = true;\n\n    /**\n     * List of available units\n     */\n    @Input()\n    set unitOptions(unitOptions: Unit[]) {\n        this._unitOptions = unitOptions;\n\n        this.unitOptions.forEach(unitOption => {\n            const comboOption: SelectOption = {\n                display: unitOption.getUnitName(),\n                value: unitOption.getMultiplier(),\n            };\n            this.comboOptionUnitMap.set(comboOption, unitOption);\n            this.comboOptions.push(comboOption);\n        });\n    }\n\n    get unitOptions(): Unit[] {\n        return this._unitOptions;\n    }\n\n    /**\n     * Input 'placeholder' field.\n     */\n    @Input() placeholder: string = null;\n\n    /**\n     * The value when the component is set to unlimited.\n     */\n    @Input() unlimitedValue: number = UNLIMITED;\n\n    /**\n     * Minimum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() min: number = UNLIMITED;\n\n    /**\n     * Maximum value allowed.\n     * (This is an input specified in the component attribute.)\n     */\n    @Input() max: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Input 'size' field.\n     */\n    @Input() size: number = null;\n\n    /**\n     * Maximum number of characters (in UTF-16 code units) that the user can enter.\n     */\n    @Input() maxlength: number = null;\n\n    /**\n     * The direction for displaying the hint\n     */\n    @Input() hintPosition = 'top-left';\n\n    /**\n     * Hint to display in the content of a signpost\n     */\n    @Input() hint: string;\n\n    /**\n     * The unit of FormControl.value. Not required when a single {@link unitOptions} is passed in\n     */\n    @Input() inputValueUnit: Unit;\n\n    public formGroup: FormGroup;\n\n    private _unitOptions: Unit[];\n\n    /**\n     * A drop down of available units\n     *\n     * This list is constructed from list of\n     * available units in _unitOptions\n     */\n    comboOptions: SelectOption[] = [];\n\n    /**\n     * Map of SelectOption and Unit which is used to\n     * extract Unit for a given SelectOption.\n     *\n     */\n    private comboOptionUnitMap: Map = new Map();\n\n    // value set to the formGroup\n    private bestValue: number = null;\n    // unit set to the formGroup\n    private bestUnit: Unit;\n\n    constructor(\n        @Self() @Optional() controlDirective: NgControl,\n        private fb: FormBuilder,\n        private translationService: TranslationService,\n        private unitFormattter: UnitFormatter\n    ) {\n        super(controlDirective);\n    }\n\n    ngOnInit(): void {\n        const validator = FormValidators.isNumberInRange(this.min, this.max, 'vcd.cc.warning.numRange');\n        const validatorUnlimited = FormValidators.isNumberInRange(-1, this.max, 'vcd.cc.warning.numRange');\n        this.computeBestUnitAndValue(this.initialValue as number);\n        if (!this.showUnlimitedOption) {\n            this.formGroup = this.fb.group({\n                limited: [this.bestValue, validator],\n                comboUnitOptions: this.bestUnit.getMultiplier(),\n            });\n        } else {\n            this.formGroup = this.fb.group({\n                limited: [this.bestValue, validatorUnlimited],\n                comboUnitOptions: this.bestUnit.getMultiplier(),\n                unlimited: false,\n            });\n            this.tracker.subscribe(this.formGroup.get('unlimited').valueChanges, value => {\n                const input = this.formGroup.get('limited');\n                const comboUnitOptions = this.formGroup.get('comboUnitOptions');\n                if (value) {\n                    input.disable();\n                    comboUnitOptions.disable();\n                } else {\n                    input.enable();\n                    comboUnitOptions.enable();\n                }\n                this.onChange(this.value());\n            });\n        }\n        this.tracker.subscribe(this.formGroup.get('comboUnitOptions').valueChanges, () => {\n            this.onChange(this.value());\n        });\n        this.tracker.subscribe(this.formGroup.get('limited').valueChanges, () => {\n            this.onChange(this.value());\n        });\n\n        if (this.disabled) {\n            this.formGroup.get('comboUnitOptions').disable();\n            this.formGroup.get('limited').disable();\n        }\n    }\n\n    writeValue(value: number): void {\n        if (!this.formGroup) {\n            this.initialValue = value;\n            return;\n        }\n        if (value === null) {\n            if (this.showUnlimitedOption) {\n                // Set Unlimited checkbox to false because the form control was reset\n                this.formGroup.get('unlimited').setValue(false);\n            }\n            this.formGroup.get('limited').setValue(null);\n            return;\n        }\n        this.computeBestUnitAndValue(value);\n        this.formGroup.get('limited').setValue(this.bestValue);\n        this.formGroup.get('comboUnitOptions').setValue(this.bestUnit.getMultiplier());\n    }\n\n    private computeBestUnitAndValue(value: number): void {\n        if (value === null) {\n            this.bestValue = null;\n            this.bestUnit = this.unitOptions[0];\n        } else {\n            this.bestUnit = this.inputValueUnit.findBestUnit(value, this.unitOptions);\n            this.bestValue = this.inputValueUnit.getOutputValue(value, this.bestUnit);\n        }\n    }\n\n    private value(): number {\n        if (this.formGroup.get('unlimited') && this.formGroup.get('unlimited').value) {\n            return this.unlimitedValue;\n        }\n\n        const value = this.formGroup.get('limited').value;\n        if (value && this.unitOptions) {\n            const selectedComboUnit = this.comboOptions.find(\n                // tslint:disable-next-line:triple-equals\n                co => co.value == this.formGroup.get('comboUnitOptions').value\n            );\n            const selectedUnit = this.comboOptionUnitMap.get(selectedComboUnit);\n            return selectedUnit.getOutputValue(value, this.inputValueUnit);\n        }\n        return value;\n    }\n\n    get displayValue(): string {\n        if (this.formGroup.get('unlimited') && this.formGroup.get('unlimited').value) {\n            return this.translationService.translate('unlimited');\n        }\n\n        const value = this.formGroup.get('limited').value;\n        if (value) {\n            if (this.unitOptions && this.unitDropdown) {\n                // Return the value and the selected unit.\n                const inputUnit: Unit = this.comboOptionUnitMap.get(this.unitDropdown.selectedOption);\n                return this.unitFormattter.bestFormat(value, inputUnit, this.unitOptions);\n            } else if (this.unitOptions && this.unitOptions.length === 1) {\n                // Return the value and the predefined unit. For example, 100 %.\n                return this.unitFormattter.bestFormat(value, this.unitOptions[0], this.unitOptions);\n            } else if (this.isReadOnly) {\n                // Return the value with best unit when #limited FormControl.value\n                // is set programmatically\n                const displayComboUnit = this.comboOptions.find(\n                    // tslint:disable-next-line:triple-equals\n                    co => co.value == this.formGroup.get('comboUnitOptions').value\n                );\n                const displayUnit = this.comboOptionUnitMap.get(displayComboUnit);\n                return this.unitFormattter.bestFormat(value, displayUnit, this.unitOptions);\n            }\n            // Return only the value when unitOptions was not set.\n            return value.toString();\n        }\n        return;\n    }\n\n    /**\n     * Set the unit in the dropdown.\n     * @param value Should be one of the value that you pass in {@link #unitOptions} to select the Unit.\n     */\n    set selectedUnit(value: number) {\n        this.formGroup.get('comboUnitOptions').setValue(value);\n    }\n\n    ngOnDestroy(): void {\n        this.tracker.unsubscribeAll();\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        if (this.formGroup) {\n            if (isDisabled) {\n                this.formGroup.get('comboUnitOptions').disable();\n                this.formGroup.get('limited').disable();\n            } else {\n                this.formGroup.get('comboUnitOptions').enable();\n                this.formGroup.get('limited').enable();\n            }\n        }\n        this.disabled = isDisabled;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MockRecord.html":{"url":"interfaces/MockRecord.html","title":"interface - MockRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MockRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/mock-data.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        age\n                                \n                                \n                                        city\n                                \n                                \n                                        details\n                                \n                                \n                                        name\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        age\n                                    \n                                \n                                \n                                    \n                                        age:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        city\n                                    \n                                \n                                \n                                    \n                                        city:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                    \n                                \n                                \n                                    \n                                        details:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MockRecord {\n    name: string;\n    city: string;\n    state: string;\n    details: {\n        gender: string;\n    };\n    age: number;\n}\n\nexport const mockData: MockRecord[] = [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n];\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultiSelectOption.html":{"url":"interfaces/MultiSelectOption.html","title":"interface - MultiSelectOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MultiSelectOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Same as the SelectOption but value is always a string\n\n            \n\n            \n                Extends\n            \n            \n                        SelectOption\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MultiSelectOptionInternal.html":{"url":"interfaces/MultiSelectOptionInternal.html","title":"interface - MultiSelectOptionInternal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MultiSelectOptionInternal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n        \n\n            \n                Description\n            \n            \n                Used internally for DatagridMultiSelectFilterComponent.options to add unique IDs to filter options. The IDs are used for\nassociating checkbox options with their labels in the HTML\n\n            \n\n            \n                Extends\n            \n            \n                        MultiSelectOption\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for each checkbox option instantiated in the HTML\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, Host, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ClrDatagridFilter } from '@clr/angular';\nimport { SelectOption } from '../../common/interfaces/select-option';\nimport { FilterBuilder } from '../../utils/filter-builder';\nimport { IdGenerator } from '../../utils/id-generator/id-generator';\nimport { DatagridFilter, FilterComponentRendererSpec, FilterConfig, FilterRendererSpec } from './datagrid-filter';\n\n/**\n * Same as the {@link SelectOption} but value is always a string\n */\nexport interface MultiSelectOption extends SelectOption {\n    value: string;\n}\n\nexport interface DatagridMultiSelectFilterConfig extends FilterConfig {\n    /**\n     * List of select options\n     */\n    options: MultiSelectOption[];\n}\n\n/**\n * Used internally for {@link DatagridMultiSelectFilterComponent.options} to add unique IDs to filter options. The IDs are used for\n * associating checkbox options with their labels in the HTML\n */\ninterface MultiSelectOptionInternal extends MultiSelectOption {\n    /**\n     * Unique identifier for each checkbox option instantiated in the HTML\n     */\n    id: string;\n}\n\nconst idGenerator = new IdGenerator('vcd-multiselect-filter-id');\n\n/**\n * Used within a clarity grid column {@link DatagridComponent} to render a filter widget with list of checkboxes to select\n * multiple options\n * Example usage:\n * columns: GridColumn[] = [{\n *      displayName: 'Custom Select filter',\n *      renderer: 'state',\n *      queryFieldName: 'state',\n *      filterRendererSpec: FilterComponentRendererSpec({\n *          type: DatagridMultiSelectFilterComponent,\n *          config: {\n *              options: [{\n *                  value: 'CA',\n *                  display: 'California'\n *              }, {\n *                  value: 'MA',\n *                  display: 'Massachusetts'\n *              }],\n *              value: ['MA', 'NC'],\n *          },\n *      }),\n *   }]\n */\n@Component({\n    selector: 'vcd-dg-multiselect-filter',\n    templateUrl: './datagrid-multiselect-filter.component.html',\n})\nexport class DatagridMultiSelectFilterComponent extends DatagridFilter\n    implements OnDestroy {\n    constructor(private filterContainer: ClrDatagridFilter) {\n        super(filterContainer);\n    }\n\n    /**\n     * Used inside the HTML to instantiate checkbox options\n     */\n    options: MultiSelectOptionInternal[];\n\n    createFormGroup(): FormGroup {\n        return new FormGroup({});\n    }\n\n    /**\n     * Overrides the config property because, the formGroup controls are defined by the config set by the caller.\n     * Value of each option becomes a formControl name inside the formGroup.\n     */\n    onBeforeSetConfig(config: DatagridMultiSelectFilterConfig): void {\n        this.options = config.options.map(option => ({\n            ...option,\n            id: idGenerator.generate(),\n        }));\n        // Remove all the form controls in the form before adding new controls\n        Object.keys(this.formGroup.controls).forEach(control => {\n            this.formGroup.removeControl(control);\n        });\n        config.options.forEach(option => {\n            this.formGroup.addControl(option.value, new FormControl(false));\n        });\n    }\n\n    protected getDebounceTimeMs(): number {\n        return 1000;\n    }\n\n    setValue(values: string[]): void {\n        values.forEach(frmCtrl => {\n            const correspondingFormCtrl = this.formGroup.get(frmCtrl);\n            if (!correspondingFormCtrl) {\n                throw Error(`A multi select filter option with value '${frmCtrl}' does not exist`);\n            }\n            correspondingFormCtrl.setValue(true);\n        });\n    }\n\n    getValue(): string {\n        const selectedFilters = Object.keys(this.formGroup.getRawValue())\n            .filter(formControl => this.formGroup.get(formControl).value)\n            .map(selectedOption => new FilterBuilder().is(this.queryField).equalTo(selectedOption));\n        return new FilterBuilder().any(...selectedFilters).getString();\n    }\n\n    isActive(): boolean {\n        return (\n            this.formGroup &&\n            !!Object.keys(this.formGroup.getRawValue()).filter(frmCtrl => this.formGroup.get(frmCtrl).value).length\n        );\n    }\n\n    ngOnDestroy(): void {}\n}\n\n/**\n * Creates a {@link FilterRendererSpec} with the given config.\n * @param options List of options for select input\n * @param value the default value that should go in this multi-select filter.\n */\nexport function DatagridMultiSelectFilter(\n    options: MultiSelectOption[],\n    value?: string[]\n): FilterRendererSpec {\n    return FilterComponentRendererSpec({\n        type: DatagridMultiSelectFilterComponent,\n        config: {\n            options,\n            value,\n        },\n    });\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NestedPropertyPipe.html":{"url":"pipes/NestedPropertyPipe.html","title":"pipe - NestedPropertyPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NestedPropertyPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/pipes/nested-property.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Used for extracting the value of nested property of an object.\nExample:\nconst obj = {\n     a: {\n         b: {\n             c: 'c'\n         }\n     }\n}\nInvoking {{ obj | nestedProperty: 'a.b.c' }} in a template produces c\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        nestedProperty\n                    \n                    \n                        Pure\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(item: any, property: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/pipes/nested-property.pipe.ts:32\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    property\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DatePipe, DecimalPipe } from '@angular/common';\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\n\nconst OBJECT_PROPERTY_SEPARATOR = '.';\nconst DATE_OBJECT_CLASS = '[object Date]';\n\n/**\n * Used for extracting the value of nested property of an object.\n *\n * Example:\n * const obj = {\n *     a: {\n *         b: {\n *             c: 'c'\n *         }\n *     }\n * }\n *\n * Invoking `{{ obj | nestedProperty: 'a.b.c' }}` in a template produces c\n */\n@Pipe({\n    name: 'nestedProperty',\n    pure: true,\n})\nexport class NestedPropertyPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) private localeId: string) {}\n    public transform(item: any, property: string): string {\n        if (!item || !property) {\n            return null;\n        }\n        const splitProperty = property.split(OBJECT_PROPERTY_SEPARATOR);\n        let returnValue;\n        if (splitProperty.length > 1) {\n            let value = item;\n            for (const nestedProp of splitProperty) {\n                if (isNullOrUndefined(value) || isNullOrUndefined(value[nestedProp])) {\n                    return null;\n                }\n                value = value[nestedProp];\n            }\n            returnValue = value;\n        } else {\n            if (isNullOrUndefined(item[property])) {\n                return null;\n            }\n            returnValue = item[property];\n        }\n\n        if (typeof returnValue === 'number') {\n            return new DecimalPipe(this.localeId).transform(returnValue);\n        }\n        return returnValue instanceof Date ? new DatePipe(this.localeId).transform(returnValue) : returnValue;\n    }\n}\n\n/**\n * Utility method for covering the 'null' and 'undefined' checks as 'value == null' is equivalent to 'value === null || value === undefined'\n */\nfunction isNullOrUndefined(value: unknown): boolean {\n    return value == null;\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NumberWithUnitFormInputWidgetObject.html":{"url":"classes/NumberWithUnitFormInputWidgetObject.html","title":"class - NumberWithUnitFormInputWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NumberWithUnitFormInputWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Test wrapper for the VCD Number With Unit Form Input component.\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNativeElement\n                            \n                            \n                                selectUnit\n                            \n                            \n                                setInputValueUnit\n                            \n                            \n                                setUnitOptionsToNone\n                            \n                            \n                                setUnitOptionsToPercent\n                            \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    formControl\n                                \n                                \n                                    displayValue\n                                \n                                \n                                    readonlyText\n                                \n                                \n                                    unlimitedFormControl\n                                \n                                \n                                    valueFormControl\n                                \n                                \n                                    unitFormControl\n                                \n                                \n                                    selectedUnit\n                                \n                                \n                                    selectedUnitDisplayValue\n                                \n                                \n                                    isUnitDropDownDisplayed\n                                \n                                \n                                    singleUnitDisplayText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-number-with-unit-form-input'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNativeElement\n                        \n                        \n                    \n                \n            \n            \n                \ngetNativeElement(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HTMLElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectUnit\n                        \n                        \n                    \n                \n            \n            \n                \nselectUnit(unit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInputValueUnit\n                        \n                        \n                    \n                \n            \n            \n                \nsetInputValueUnit(unit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setUnitOptionsToNone\n                        \n                        \n                    \n                \n            \n            \n                \nsetUnitOptionsToNone()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setUnitOptionsToPercent\n                        \n                        \n                    \n                \n            \n            \n                \nsetUnitOptionsToPercent()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        formControl\n                    \n                \n\n                \n                    \n                        getformControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:17\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        displayValue\n                    \n                \n\n                \n                    \n                        getdisplayValue()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:21\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readonlyText\n                    \n                \n\n                \n                    \n                        getreadonlyText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:28\n                                \n                            \n                    \n                        \n                                Reads from the readonly section. If widget is not readonly, it returns an empty string;\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        unlimitedFormControl\n                    \n                \n\n                \n                    \n                        getunlimitedFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:32\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        valueFormControl\n                    \n                \n\n                \n                    \n                        getvalueFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:36\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        unitFormControl\n                    \n                \n\n                \n                    \n                        getunitFormControl()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:40\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedUnit\n                    \n                \n\n                \n                    \n                        getselectedUnit()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:52\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedUnitDisplayValue\n                    \n                \n\n                \n                    \n                        getselectedUnitDisplayValue()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isUnitDropDownDisplayed\n                    \n                \n\n                \n                    \n                        getisUnitDropDownDisplayed()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:81\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        singleUnitDisplayText\n                    \n                \n\n                \n                    \n                        getsingleUnitDisplayText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts:88\n                                \n                            \n                    \n                        \n                                Returns an empty string if there is no HTML for single unit\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AbstractControl } from '@angular/forms';\nimport { WidgetObject } from '../../utils/test';\nimport { Percent, Unit } from '../../utils/unit/unit';\nimport { NumberWithUnitFormInputComponent } from './number-with-unit-form-input.component';\n\n/**\n * Test wrapper for the VCD Number With Unit Form Input component.\n */\nexport class NumberWithUnitFormInputWidgetObject extends WidgetObject {\n    static tagName = 'vcd-number-with-unit-form-input';\n\n    get formControl(): AbstractControl {\n        return this.component.formControl;\n    }\n\n    get displayValue(): string {\n        return this.component.displayValue;\n    }\n\n    /**\n     * Reads from the readonly section. If widget is not readonly, it returns an empty string;\n     */\n    get readonlyText(): string {\n        return this.getText('.readonly-text');\n    }\n\n    get unlimitedFormControl(): AbstractControl {\n        return this.component.formGroup.get('unlimited');\n    }\n\n    get valueFormControl(): AbstractControl {\n        return this.component.formGroup.get('limited');\n    }\n\n    get unitFormControl(): AbstractControl {\n        return this.component.formGroup.get('comboUnitOptions');\n    }\n\n    selectUnit(unit: Unit): void {\n        this.component.selectedUnit = unit.getMultiplier();\n    }\n\n    setInputValueUnit(unit: Unit): void {\n        this.component.inputValueUnit = unit;\n    }\n\n    get selectedUnit(): number {\n        return this.component.formGroup.get('comboUnitOptions').value;\n    }\n\n    get selectedUnitDisplayValue(): string {\n        return (\n            this.component.unitOptions\n                // tslint:disable-next-line:triple-equals\n                .find(item => item.getMultiplier() == this.selectedUnit)\n                .getUnitName()\n        );\n    }\n\n    setUnitOptionsToPercent(): void {\n        this.component.unitOptions = [Percent.ZERO_TO_100];\n        this.component.inputValueUnit = Percent.ZERO_TO_1;\n        this.unitFormControl.setValue(this.component.unitOptions[0].getMultiplier());\n        this.fixture.detectChanges();\n    }\n\n    setUnitOptionsToNone(): void {\n        this.component.unitOptions = [];\n        this.fixture.detectChanges();\n    }\n\n    getNativeElement(cssSelector: string): HTMLElement {\n        return this.findElement(cssSelector) && this.findElement(cssSelector).nativeElement;\n    }\n\n    get isUnitDropDownDisplayed(): boolean {\n        return !!this.getNativeElement('.combo-options');\n    }\n\n    /**\n     * Returns an empty string if there is no HTML for single unit\n     */\n    get singleUnitDisplayText(): string {\n        const element = this.getNativeElement('.single-option');\n        return element ? element.innerHTML : '';\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ObjectAndResponse.html":{"url":"interfaces/ObjectAndResponse.html","title":"interface - ObjectAndResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ObjectAndResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n        \n\n            \n                Description\n            \n            \n                A combination of some object and the response that gave that object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        object\n                                \n                                \n                                        response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                    \n                                \n                                \n                                    \n                                        object:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that was returned from a given activity, if any.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         ActivityResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActivityResponse\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The response that an activity returned.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActivityResponse {\n    /**\n     * The error message, if any, from the activity.\n     *\n     * A response without an error is assumed to have succeeded.\n     */\n    error?: string;\n    /**\n     * The response message, if any, from the activity.\n     */\n    success?: string;\n}\n\n/**\n * A combination of some object and the response that gave that object.\n */\nexport interface ObjectAndResponse {\n    /**\n     * The data that was returned from a given activity, if any.\n     */\n    object?: T;\n    /**\n     * The response that an activity returned.\n     */\n    response: ActivityResponse;\n}\n\n/**\n * A class that understands how to take a promise and turn it into some response message for display.\n * A client of this library will override {@link ActivityPromiseResolver} to process their specific type of promise.\n * This override will know how to generate a {@link ObjectAndResponse} from the type of promise it processes.\n *\n * @param T The type that is returned from a promise that this resolver processes.\n */\nexport class ActivityPromiseResolver {\n    /**\n     * Takes a Promise and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivity(activityResolutionPromise: Promise, successMessage?: string): Promise> {\n        return activityResolutionPromise\n            .then(result => {\n                return {\n                    object: result,\n                    response: { ...result, success: successMessage || result },\n                };\n            })\n            .catch(error => {\n                return { response: { error } };\n            });\n    }\n\n    /**\n     * Takes a Promise of many items and turns it to some activity status\n     * @param activityResolutionPromise The activity that this resolver will generate a response from. It generates\n     * either a sucesss or a failure condition. There are many entities contained in this response.\n     * @param successMessage The success message this method should return if the activity succeeds. If undefined is passed,\n     * a succeeded promise will return an empty response parameter which is assumed to mean success.\n     */\n    resolveActivities(\n        activityResolutionPromises: Promise,\n        successMessage?: string\n    ): Promise)[]> {\n        return activityResolutionPromises\n            .then(result => {\n                return [\n                    {\n                        object: result[0],\n                        response: { ...result, success: successMessage },\n                    },\n                ];\n            })\n            .catch(error => {\n                return [{ response: { error } }];\n            });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationCallback.html":{"url":"interfaces/PaginationCallback.html","title":"interface - PaginationCallback","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PaginationCallback\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                A function that can be used to render the pagination data in the grid.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [firstItem: number, lastItem: number, totalItems: number]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     string | Observable\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridFilter, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationConfiguration.html":{"url":"interfaces/PaginationConfiguration.html","title":"interface - PaginationConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PaginationConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information the user gives to show page size and page size options in the pagination footer.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        pageSize\n                                \n                                \n                                            Optional\n                                        pageSizeOptions\n                                \n                                \n                                            Optional\n                                        rowHeight\n                                \n                                \n                                            Optional\n                                        shouldShowPageNumberInput\n                                \n                                \n                                            Optional\n                                        shouldShowPageSizeSelector\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageSize\n                                    \n                                \n                                \n                                    \n                                        pageSize:     number | \"Magic\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \"Magic\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\nnumber of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\nMagic: Auto calculates the size based on available height of the container\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageSizeOptions\n                                    \n                                \n                                \n                                    \n                                        pageSizeOptions:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Available page size options in the dropdown\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rowHeight\n                                    \n                                \n                                \n                                    \n                                        rowHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The height of a row in the datagrid. If not set, will use the default of ROW_HEIGHT.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shouldShowPageNumberInput\n                                    \n                                \n                                \n                                    \n                                        shouldShowPageNumberInput:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the page number input should be shown.\nDefaults to false.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shouldShowPageSizeSelector\n                                    \n                                \n                                \n                                    \n                                        shouldShowPageSizeSelector:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the page size option dropdown should be shown.\nDefaults to false.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridFilter, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PagionationInformation.html":{"url":"interfaces/PagionationInformation.html","title":"interface - PagionationInformation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PagionationInformation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information about pagionation that will be exposed.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        itemsPerPage\n                                \n                                \n                                        pageNumber\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemsPerPage\n                                    \n                                \n                                \n                                    \n                                        itemsPerPage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    How many items belong on a page.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageNumber\n                                    \n                                \n                                \n                                    \n                                        pageNumber:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    What page is currently selected.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridFilter, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Percent.html":{"url":"classes/Percent.html","title":"class - Percent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Percent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Percent is handled differently compared to other Units.\nCan be represented in two different formats -\nZERO_TO_100 - ex: 50 %\nZERO_TO_1 - ex: 0.5 %\nIn both formats single unitName - \"%\" is used represent the value\n\n            \n\n            \n                Extends\n            \n            \n                        Unit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                unitTranslationKey\n                            \n                            \n                                    Static\n                                valueWithUnitTranslationKey\n                            \n                            \n                                    Static\n                                ZERO_TO_1\n                            \n                            \n                                    Static\n                                ZERO_TO_100\n                            \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBestUnit\n                            \n                            \n                                getUnitNameTranslationKey\n                            \n                            \n                                getValueWithUnitTranslationKey\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(multiplier: number)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit.ts:163\n                            \n                        \n\n                \n                    \n                            Percent always has unitName as \"%\"\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        multiplier\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            unitTranslationKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.units.percent'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:163\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            valueWithUnitTranslationKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.display.percent'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:162\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ZERO_TO_1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Percent\n\n                        \n                    \n                    \n                        \n                            Default value : new Percent(1)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:171\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ZERO_TO_100\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Percent\n\n                        \n                    \n                    \n                        \n                            Default value : new Percent(0.01)\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:172\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, unitList: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:188\n                \n            \n\n\n            \n                \n                    Percent is always best represented in ZERO_TO_100 format\nand so returns ZERO_TO_100\nEx: 50 % is the display format for ZERO_TO_100 for value - 50\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    unitList\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \ngetValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PipesModule.html":{"url":"modules/PipesModule.html","title":"module - PipesModule","body":"\n                   \n\n\n\n\n    Modules\n    PipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_declarations\n\n\n\ncluster_PipesModule_exports\n\n\n\n\nNestedPropertyPipe\n\nNestedPropertyPipe\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nNestedPropertyPipe->PipesModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nPipesModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nPipesModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nPipesModule->FormSelectComponent \n\n\n\n\n\nMinMaxValidator \n\nMinMaxValidator \n\nMinMaxValidator  -->\n\nPipesModule->MinMaxValidator \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nPipesModule->NumberWithUnitFormInputComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/pipes/pipes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NestedPropertyPipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            MinMaxValidator\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { NestedPropertyPipe } from './nested-property.pipe';\n\nconst declarations = [NestedPropertyPipe];\n\n@NgModule({\n    declarations,\n    exports: [...declarations],\n})\nexport class PipesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisteredProviders.html":{"url":"interfaces/RegisteredProviders.html","title":"interface - RegisteredProviders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RegisteredProviders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.service.ts\n        \n\n            \n                Description\n            \n            \n                Interface describing what providers are registered within the system\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        provider\n                                \n                                \n                                        section\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:         SpotlightSearchProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpotlightSearchProvider\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The very search provider\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        section\n                                    \n                                \n                                \n                                    \n                                        section:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The section name (the title or the group name) that this provider will provides results for.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SpotlightSearchProvider } from './spotlight-search.provider';\n\n/**\n * Interface describing what providers are registered within the system\n */\nexport interface RegisteredProviders {\n    /**\n     * The very search provider\n     */\n    provider: SpotlightSearchProvider;\n\n    /**\n     * The section name (the title or the group name) that this provider will provides results for.\n     */\n    section: string;\n}\n\n/**\n * This interface is used internally by the service\n */\ninterface InternalRegistrationData extends RegisteredProviders {\n    order?: number;\n    id: string;\n}\n\n/**\n * Create unique id\n */\nconst createId = ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})();\n\n@Injectable()\nexport class SpotlightSearchService {\n    registrations: InternalRegistrationData[] = [];\n\n    /**\n     * Register a search provider\n     * @param provider The search provider {@link SpotlightSearchProvider}\n     * @param section The section name (the title or the group name) that this provider will provides results for.\n     * @param order The order of the section in the spotlight search results. Less the order, closer to the beginning\n     *        of the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n     */\n    public registerProvider(provider: SpotlightSearchProvider, section: string, order: number = -1): string {\n        const registrationData = { provider, section, order, id: createId() };\n\n        let insertIndex = -1;\n        // Determine the position of the new registration\n        if (order > -1) {\n            insertIndex = this.registrations.findIndex(data => {\n                // If an item has a negative index, this means no order had been provided for that item\n                // which means we have found the insert index\n                if (data.order  -1) {\n            this.registrations.splice(insertIndex, 0, registrationData);\n        } else {\n            this.registrations.push(registrationData);\n        }\n\n        return registrationData.id;\n    }\n\n    /**\n     * Unregister a search provider by providing the registration id.\n     * Returns true if unregistration was done.\n     * @param registrationId the id returned when registering the provider\n     */\n    public unregisterProvider(registrationId: string): boolean {\n        const index = this.registrations.findIndex(data => data.id === registrationId);\n        if (index > -1) {\n            this.registrations.splice(index, 1);\n        }\n        return index > -1;\n    }\n\n    /**\n     * Get a list of all the registered search providers.\n     */\n    public getRegisteredProviders(): RegisteredProviders[] {\n        return this.registrations.map(data => ({ provider: data.provider, section: data.section }));\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SearchSection.html":{"url":"interfaces/SearchSection.html","title":"interface - SearchSection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SearchSection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                        RegisteredProviders\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isLoading\n                                \n                                \n                                        results\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        results\n                                    \n                                \n                                \n                                    \n                                        results:         SpotlightSearchResult[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpotlightSearchResult[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { SpotlightSearchResult, SpotlightSearchResultType } from './spotlight-search-result';\nimport { RegisteredProviders, SpotlightSearchService } from './spotlight-search.service';\n\ninterface SearchSection extends RegisteredProviders {\n    results: SpotlightSearchResult[];\n    isLoading: boolean;\n}\n\n/**\n * The Spotlight Search component is inspired by the Spotlight Search functionality in Mac OSX (cmd+space)\n * and the Search Everywhere in IntelliJ (shift+shift)\n *\n * This VCD Spotlight Search does not provide any search by itself. It is not also a single component\n * but rather a group of objects that work together in order to allow the developer to build a might search experience\n * for the end user.\n *\n * Basically the VCD Spotlight Search consists of:\n * \n *     SpotlightSearchComponent - the visual component that you should include in your template\n *     {@link SpotlightSearchService}SpotlightSearchService\n *     - the service that you should register your own providers with\n *     {@link SpotlightSearchProvider}SpotlightSearchProvider\n *     - the interface your search provider should implement.\n *     It can return either an array of {@link SpotlightSearchResult} or a promise for lazy loading of results\n * \n *\n * SpotlightSearchComponent:\n *\n *    \n *\n *\n * {@link SpotlightSearchService}:\n *\n * This service works along with the component in order to provide search results displayed. Those results are gropued\n * in sections based on the registered provider {@link SpotlightSearchProvider}.\n *\n * You can provide order of the search providers, hence the order of the displayed sections\n *\n * If there is just one search provider no section title is displayed.\n *\n * In case of multiple search providers the Spotlight Search can be configured to hide the entire section if it contains no data.\n *\n *\n * For a complete end-to-end running example please take a look at the `Examples` tab of the live-docs\n */\n@Component({\n    selector: 'vcd-spotlight-search',\n    templateUrl: './spotlight-search.component.html',\n    styleUrls: ['./spotlight-search.component.scss'],\n})\nexport class SpotlightSearchComponent {\n    /**\n     * Placeholder for the search input. Default is empty string;\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * This property alongside with `openChange` provide two-way binding [(open)] for controlling the visibility state\n     * of the spotlight component\n     */\n    @Input()\n    public set open(open: boolean) {\n        this.handleOpen(open);\n    }\n    public get open(): boolean {\n        return this._open;\n    }\n\n    /**\n     * This method along with `open` property provide two-way binding [(open)] for controlling the visibility state\n     * of the spotlight component\n     */\n    @Output() openChange: EventEmitter = new EventEmitter(false);\n\n    constructor(\n        private searchService: SpotlightSearchService,\n        private changeDetectorRef: ChangeDetectorRef,\n        public translationService: TranslationService\n    ) {}\n\n    get searchCriteria(): string {\n        return this._searchCriteria;\n    }\n\n    set searchCriteria(value: string) {\n        this._searchCriteria = value;\n        this.doSearch();\n    }\n    private _searchCriteria: string;\n\n    private _open = false;\n\n    @ViewChild('searchInput', { static: false, read: ElementRef }) searchInput: ElementRef;\n\n    private searchId = 0;\n\n    /**\n     * The search sections are provided by the {@link SpotlightSearchService} upon opening the Spotlight Search.\n     * This insures that new sections based on the current context of the application may appear.\n     */\n    searchSections: SearchSection[] = [];\n\n    selectedItem: SpotlightSearchResult;\n\n    itemClicked(item: SpotlightSearchResult): void {\n        this.handleItem(item);\n    }\n\n    onArrowDown(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(true);\n    }\n\n    onArrowUp(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.selectNext(false);\n    }\n\n    onEnterKey(event): void {\n        event.preventDefault();\n        if (!this.selectedItem) {\n            return;\n        }\n        this.handleItem(this.selectedItem);\n    }\n\n    private doSearch(): void {\n        // Remember which is the current search. This will help us not to show results from an old search\n        const searchId = ++this.searchId;\n        // Upon new search we clear the currently selected item\n        this.selectedItem = null;\n\n        // Go through the available search sections, i.e. the registered search providers and request for results\n        this.searchSections.forEach(async searchSection => {\n            let results: SpotlightSearchResultType = [];\n            // Only request for data if the search is not empty\n            if (!!this.searchCriteria) {\n                results = searchSection.provider.search(this.searchCriteria);\n\n                // Some of the results may be provided later, so mark the section as loading\n                if (results instanceof Promise) {\n                    searchSection.isLoading = true;\n                    results = await results;\n                }\n                // Use the closure to verify that the displayed data is going to be really from the latest search\n                if (searchId !== this.searchId) {\n                    return;\n                }\n            }\n            searchSection.results = results;\n            searchSection.isLoading = false;\n            this.selectFirst(true);\n        });\n    }\n\n    /**\n     * Try to select the first item in the compound search result.\n     * @param ensureFirstSectionIsLoaded if true and if the topmost section is still loading then do not select an item\n     */\n    private selectFirst(ensureFirstSectionIsLoaded: boolean): void {\n        // Do nothing if there is already a selection\n        if (this.selectedItem) {\n            return;\n        }\n\n        for (const section of this.searchSections) {\n            // The section is still loading. If it was requested to ensure the loading has completed than abort\n            // the attempt to select an item or just skip it and examine the next section.\n            if (section.isLoading) {\n                if (ensureFirstSectionIsLoaded) {\n                    return;\n                }\n                continue;\n            }\n            this.selectedItem = section.results[0];\n            if (this.selectedItem) {\n                break;\n            }\n        }\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private selectNext(down: boolean): void {\n        // If there is no selection then just select the first available item\n        if (!this.selectedItem) {\n            this.selectFirst(false);\n            return;\n        }\n\n        // Get all the items form all the sections in a single flat array\n        const allResults = this.searchSections.reduce((acc, v) => [...acc, ...(v.results || [])], []);\n\n        let selectedItemIndex = allResults.indexOf(this.selectedItem);\n\n        // There is a selected item but it is not one of the available ones, so just select the first from the list\n        if (selectedItemIndex  ({ ...data, results: [], isLoading: true }));\n            this.doSearch();\n\n            setTimeout(() => {\n                this.searchInput.nativeElement.focus();\n                this.searchInput.nativeElement.select();\n            }, 0);\n        }\n\n        this._open = open;\n        this.openChange.emit(this._open);\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private handleItem(item: SpotlightSearchResult): void {\n        item.handler();\n        this.open = false;\n    }\n\n    showSectionTitle(searchSection: SearchSection): boolean {\n        // In order to show a section title there should be more than one sections\n        // and the current section should either be loading data or have results\n        return this.searchSections.length > 1 && (searchSection.isLoading || searchSection.results.length > 0);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOption.html":{"url":"interfaces/SelectOption.html","title":"interface - SelectOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SelectOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/interfaces/select-option.ts\n        \n\n            \n                Description\n            \n            \n                Options displayed in a select input option list\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        display\n                                \n                                \n                                            Optional\n                                        isTranslatable\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Text to be shown for the option\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isTranslatable\n                                    \n                                \n                                \n                                    \n                                        isTranslatable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used for translation of the SelectOption.display text\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Value of a option\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SelectOption {\n    /**\n     * Value of a option\n     */\n    value: string | number;\n    /**\n     * Text to be shown for the option\n     */\n    display: string;\n    /**\n     * Used for translation of the {@link SelectOption.display} text\n     */\n    isTranslatable?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ShowClippedTextDirective.html":{"url":"directives/ShowClippedTextDirective.html","title":"directive - ShowClippedTextDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ShowClippedTextDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.ts\n        \n\n            \n                Description\n            \n            \n                Displays a clarity tooltip with the full contents of a host element on hover but only if\nthe elements is clipped.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n                            OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [vcdShowClippedText]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                    Public\n                                hostElement\n                            \n                            \n                                    Static\n                                instanceCount\n                            \n                            \n                                mouseoutDelay\n                            \n                            \n                                    Private\n                                onMouseIn\n                            \n                            \n                                    Private\n                                onMouseOut\n                            \n                            \n                                tooltipSize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                activate\n                            \n                            \n                                deactivate\n                            \n                            \n                                    Private\n                                isOverflowing\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                vcdShowClippedText\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    config\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(host: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:251\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        host\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        vcdShowClippedText\n                    \n                \n                \n                    \n                        Type :         CliptextConfig\n\n                    \n                \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:225\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            activate\n                        \n                        \n                    \n                \n            \n            \n                \nactivate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deactivate\n                        \n                        \n                    \n                \n            \n            \n                \ndeactivate()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:280\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isOverflowing\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOverflowing()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:303\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:274\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:246\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hostElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.host.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:251\n                            \n                        \n\n                \n                    \n                        The HTML element receiving the directive\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            instanceCount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:222\n                            \n                        \n\n                \n                    \n                        To destroy the tooltip when no longer needed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mouseoutDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 500\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:244\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onMouseIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:288\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onMouseOut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    }\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:299\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TooltipSize.md\n\n                        \n                    \n                    \n                        \n                            Default value : TooltipSize.md\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:245\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n\n                \n                    \n                        setconfig(config)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.ts:225\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            config\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n\nexport enum TooltipPosition {\n    tl = 'tooltip-top-left',\n    tr = 'tooltip-top-right',\n    br = 'tooltip-bottom-right',\n    bl = 'tooltip-bottom-left',\n}\n\nexport enum TooltipSize {\n    sm = '100px',\n    md = '200px',\n    lg = '400px',\n}\n\n/**\n * The configuration information for the cliptext within the cells of the datagrid.\n */\nexport interface CliptextConfig {\n    /**\n     * The size of the tooltip to be displayed in the cell.\n     */\n    size?: TooltipSize;\n    /**\n     * The time delay from mouse off to hide the cliptext.\n     */\n    mouseoutDelay?: number;\n    /**\n     * If the cliptext should be disabled.\n     */\n    disabled?: boolean;\n}\n\n/**\n * Singleton tooltip created by directive\n */\nconst tip = {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        tip.hideTooltip(tip.mouseoutDelay);\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n};\n\ntype EventHandler = (e: MouseEvent) => void;\n\nfunction watchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.addEventListener('mouseenter', mouseIn);\n    el.addEventListener('mouseleave', mouseOut);\n}\n\nfunction unwatchEvents(el: HTMLElement, mouseIn: EventHandler, mouseOut: EventHandler): void {\n    el.removeEventListener('mouseenter', mouseIn);\n    el.removeEventListener('mouseleave', mouseOut);\n}\n\nfunction setStyle(el: HTMLElement, style: Partial): void {\n    Object.assign(el.style, style);\n}\n\n/**\n * Displays a clarity tooltip with the full contents of a host element on hover but only if\n * the elements is clipped.\n */\n@Directive({\n    selector: '[vcdShowClippedText]',\n})\nexport class ShowClippedTextDirective implements OnDestroy, OnInit {\n    /** To destroy the tooltip when no longer needed */\n    static instanceCount = 0;\n\n    @Input('vcdShowClippedText')\n    set config(config: CliptextConfig) {\n        if (config && config.mouseoutDelay) {\n            this.mouseoutDelay = config.mouseoutDelay;\n        }\n        if (config && config.size) {\n            this.tooltipSize = config.size;\n        }\n        const nextDisabled = config !== undefined && config.disabled;\n        if (this.disabled === nextDisabled) {\n            return;\n        }\n        this.disabled = nextDisabled;\n        if (this.disabled) {\n            this.deactivate();\n        } else {\n            this.activate();\n        }\n    }\n\n    mouseoutDelay = 500;\n    tooltipSize = TooltipSize.md;\n    disabled = false;\n\n    /**\n     * The HTML element receiving the directive\n     */\n    public hostElement: HTMLElement = this.host.nativeElement;\n\n    constructor(private host: ElementRef) {}\n\n    ngOnInit(): void {\n        if (!this.disabled) {\n            this.activate();\n        }\n    }\n\n    activate(): void {\n        ShowClippedTextDirective.instanceCount++;\n        tip.create();\n        watchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n\n        // A host must have the following styles to show text ellipsis when overflowing\n        setStyle(this.hostElement, {\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (!this.disabled) {\n            this.deactivate();\n        }\n    }\n\n    deactivate(): void {\n        ShowClippedTextDirective.instanceCount--;\n        unwatchEvents(this.hostElement, this.onMouseIn, this.onMouseOut);\n        if (ShowClippedTextDirective.instanceCount === 0) {\n            tip.destroy();\n        }\n    }\n\n    private onMouseIn = (e: MouseEvent) => {\n        tip.clearHideTimeout();\n        tip.isMouseOver = true;\n        if (this.isOverflowing()) {\n            tip.currentDirective = this;\n            tip.update();\n        } else {\n            tip.hideTooltip(this.mouseoutDelay);\n        }\n    };\n\n    private onMouseOut = () => {\n        tip.hideTooltip(this.mouseoutDelay);\n    };\n\n    private isOverflowing(): boolean {\n        // Text overflows when the content element's width is less than its scrollWidth.\n        return Math.ceil(this.hostElement.getBoundingClientRect().width)  {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShowClippedTextDirectiveModule.html":{"url":"modules/ShowClippedTextDirectiveModule.html","title":"module - ShowClippedTextDirectiveModule","body":"\n                   \n\n\n\n\n    Modules\n    ShowClippedTextDirectiveModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowClippedTextDirectiveModule\n\n\n\ncluster_ShowClippedTextDirectiveModule_declarations\n\n\n\ncluster_ShowClippedTextDirectiveModule_exports\n\n\n\n\nShowClippedTextDirective\n\nShowClippedTextDirective\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule -->\n\nShowClippedTextDirective->ShowClippedTextDirectiveModule\n\n\n\n\n\nShowClippedTextDirective \n\nShowClippedTextDirective \n\nShowClippedTextDirective  -->\n\nShowClippedTextDirectiveModule->ShowClippedTextDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ShowClippedTextDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ShowClippedTextDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { ShowClippedTextDirective } from './show-clipped-text.directive';\n\n@NgModule({\n    declarations: [ShowClippedTextDirective],\n    exports: [ShowClippedTextDirective],\n})\nexport class ShowClippedTextDirectiveModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShowClippedTextDirectiveTestHelper.html":{"url":"classes/ShowClippedTextDirectiveTestHelper.html","title":"class - ShowClippedTextDirectiveTestHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShowClippedTextDirectiveTestHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n        \n\n            \n                Description\n            \n            \n                Used to remove DOM specific code from the jasmine tests while testing this directive\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                componentInstance\n                            \n                            \n                                    Public\n                                hideDelay\n                            \n                            \n                                    Private\n                                host\n                            \n                            \n                                    Private\n                                secondHost\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                moveMouseOffHost\n                            \n                            \n                                moveMouseOffTooltip\n                            \n                            \n                                moveMouseOverHost\n                            \n                            \n                                moveMouseOverSecondHost\n                            \n                            \n                                moveMouseOverTooltip\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    width\n                                \n                                \n                                    hostPosition\n                                \n                                \n                                    disabled\n                                \n                                \n                                    hostText\n                                \n                                \n                                    tooltipSize\n                                \n                                \n                                    isTooltipVisible\n                                \n                                \n                                    tooltipText\n                                \n                                \n                                    tooltipPosition\n                                \n                                \n                                    tooltipCount\n                                \n                                \n                                    tooltipVisibility\n                                \n                                \n                                    tooltipContent\n                                \n                                \n                                    tooltip\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fixture: ComponentFixture)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fixture\n                                                  \n                                                        \n                                                                        ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            componentInstance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.fixture.componentInstance\n\n                        \n                    \n                    \n                        \n                            Default value : this.fixture.componentInstance\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     this.componentInstance.directive.mouseoutDelay\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.directive.mouseoutDelay\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            host\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.div.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            secondHost\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                    \n                        \n                            Default value : this.componentInstance.div2.nativeElement\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOffHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOffHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOffTooltip\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOffTooltip()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverSecondHost\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverSecondHost()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            moveMouseOverTooltip\n                        \n                        \n                    \n                \n            \n            \n                \nmoveMouseOverTooltip()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n\n                \n                    \n                        setwidth(width: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:24\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            width\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        hostPosition\n                    \n                \n\n\n                \n                    \n                        sethostPosition(quadrant)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:28\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            quadrant\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n\n                \n                    \n                        setdisabled(disabled: boolean)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:44\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            disabled\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        hostText\n                    \n                \n\n\n                \n                    \n                        sethostText(text: string)\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:49\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            text\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipSize\n                    \n                \n\n                \n                    \n                        gettooltipSize()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:54\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isTooltipVisible\n                    \n                \n\n                \n                    \n                        getisTooltipVisible()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:78\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipText\n                    \n                \n\n                \n                    \n                        gettooltipText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:82\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipPosition\n                    \n                \n\n                \n                    \n                        gettooltipPosition()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:86\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipCount\n                    \n                \n\n                \n                    \n                        gettooltipCount()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:98\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipVisibility\n                    \n                \n\n                \n                    \n                        gettooltipVisibility()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:102\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltipContent\n                    \n                \n\n                \n                    \n                        gettooltipContent()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:110\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tooltip\n                    \n                \n\n                \n                    \n                        gettooltip()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:114\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { ShowClippedTextDirective, TooltipPosition } from './show-clipped-text.directive';\n\n/**\n * Used to remove DOM specific code from the jasmine tests while testing this directive\n */\nexport class ShowClippedTextDirectiveTestHelper {\n    constructor(private fixture: ComponentFixture) {}\n\n    public componentInstance = this.fixture.componentInstance;\n\n    public hideDelay = this.componentInstance.directive.mouseoutDelay;\n\n    private host: HTMLElement = this.componentInstance.div.nativeElement;\n\n    private secondHost: HTMLElement = this.componentInstance.div2.nativeElement;\n\n    set width(width: string) {\n        this.host.style.width = width;\n    }\n\n    set hostPosition(quadrant: TooltipPosition) {\n        this.host.style.position = 'absolute';\n        const defaults = { top: '', left: '', bottom: '', right: '' };\n        if (quadrant === TooltipPosition.tl) {\n            Object.assign(defaults, { top: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.tr) {\n            Object.assign(defaults, { top: '0', right: '0' });\n        } else if (quadrant === TooltipPosition.bl) {\n            Object.assign(defaults, { bottom: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.br) {\n            Object.assign(defaults, { bottom: '0', right: '0' });\n        }\n\n        Object.assign(this.host.style, defaults);\n    }\n\n    set disabled(disabled: boolean) {\n        this.componentInstance.disabled = disabled;\n        this.fixture.detectChanges();\n    }\n\n    set hostText(text: string) {\n        this.componentInstance.text = text;\n        this.fixture.detectChanges();\n    }\n\n    get tooltipSize(): number {\n        return this.tooltipContent.offsetWidth;\n    }\n\n    moveMouseOverHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverSecondHost(): void {\n        this.secondHost.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOffHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    moveMouseOffTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    get isTooltipVisible(): boolean {\n        return !!this.tooltip && (this.tooltip.style.opacity === '1' || this.tooltip.style.opacity === '');\n    }\n\n    get tooltipText(): string {\n        return this.tooltipContent.innerText;\n    }\n\n    get tooltipPosition(): TooltipPosition {\n        const classes = this.tooltipContent.classList;\n        for (const className of Array.from(classes)) {\n            for (const key of Object.keys(TooltipPosition)) {\n                if (TooltipPosition[key] === className) {\n                    return TooltipPosition[key] as TooltipPosition;\n                }\n            }\n        }\n        return null;\n    }\n\n    public get tooltipCount(): number {\n        return document.querySelectorAll('.tooltip.vcd-show-clipped-text').length;\n    }\n\n    public get tooltipVisibility(): string {\n        return this.tooltipContent.style.visibility;\n    }\n\n    public destroy(): void {\n        this.fixture.destroy();\n    }\n\n    private get tooltipContent(): HTMLElement {\n        return this.tooltip.querySelector('.tooltip-content');\n    }\n\n    private get tooltip(): HTMLElement {\n        return document.querySelector('.tooltip.vcd-show-clipped-text');\n    }\n}\n\n@Component({\n    template: `\n        {{ text }}\n        {{ text2 }}\n    `,\n})\nexport class ShowClippedTextDirectiveTestHostComponent {\n    @ViewChild(ShowClippedTextDirective) directive!: ShowClippedTextDirective;\n    @ViewChild('div') div!: ElementRef;\n    @ViewChild('div2') div2!: ElementRef;\n\n    public text = 'texting';\n    public text2 = 'texting too';\n    public disabled = false;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ShowClippedTextDirectiveTestHostComponent.html":{"url":"components/ShowClippedTextDirectiveTestHostComponent.html","title":"component - ShowClippedTextDirectiveTestHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ShowClippedTextDirectiveTestHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n                template\n                {{ text }}\n{{ text2 }}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                directive\n                            \n                            \n                                    Public\n                                disabled\n                            \n                            \n                                div\n                            \n                            \n                                div2\n                            \n                            \n                                    Public\n                                text\n                            \n                            \n                                    Public\n                                text2\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            directive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ShowClippedTextDirective\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(ShowClippedTextDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:126\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:132\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            div\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('div')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:127\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            div2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('div2')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:128\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'texting'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:130\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            text2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'texting too'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts:131\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { ShowClippedTextDirective, TooltipPosition } from './show-clipped-text.directive';\n\n/**\n * Used to remove DOM specific code from the jasmine tests while testing this directive\n */\nexport class ShowClippedTextDirectiveTestHelper {\n    constructor(private fixture: ComponentFixture) {}\n\n    public componentInstance = this.fixture.componentInstance;\n\n    public hideDelay = this.componentInstance.directive.mouseoutDelay;\n\n    private host: HTMLElement = this.componentInstance.div.nativeElement;\n\n    private secondHost: HTMLElement = this.componentInstance.div2.nativeElement;\n\n    set width(width: string) {\n        this.host.style.width = width;\n    }\n\n    set hostPosition(quadrant: TooltipPosition) {\n        this.host.style.position = 'absolute';\n        const defaults = { top: '', left: '', bottom: '', right: '' };\n        if (quadrant === TooltipPosition.tl) {\n            Object.assign(defaults, { top: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.tr) {\n            Object.assign(defaults, { top: '0', right: '0' });\n        } else if (quadrant === TooltipPosition.bl) {\n            Object.assign(defaults, { bottom: '0', left: '0' });\n        } else if (quadrant === TooltipPosition.br) {\n            Object.assign(defaults, { bottom: '0', right: '0' });\n        }\n\n        Object.assign(this.host.style, defaults);\n    }\n\n    set disabled(disabled: boolean) {\n        this.componentInstance.disabled = disabled;\n        this.fixture.detectChanges();\n    }\n\n    set hostText(text: string) {\n        this.componentInstance.text = text;\n        this.fixture.detectChanges();\n    }\n\n    get tooltipSize(): number {\n        return this.tooltipContent.offsetWidth;\n    }\n\n    moveMouseOverHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverSecondHost(): void {\n        this.secondHost.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOverTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseenter'));\n    }\n\n    moveMouseOffHost(): void {\n        this.host.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    moveMouseOffTooltip(): void {\n        this.tooltip.dispatchEvent(new MouseEvent('mouseleave'));\n    }\n\n    get isTooltipVisible(): boolean {\n        return !!this.tooltip && (this.tooltip.style.opacity === '1' || this.tooltip.style.opacity === '');\n    }\n\n    get tooltipText(): string {\n        return this.tooltipContent.innerText;\n    }\n\n    get tooltipPosition(): TooltipPosition {\n        const classes = this.tooltipContent.classList;\n        for (const className of Array.from(classes)) {\n            for (const key of Object.keys(TooltipPosition)) {\n                if (TooltipPosition[key] === className) {\n                    return TooltipPosition[key] as TooltipPosition;\n                }\n            }\n        }\n        return null;\n    }\n\n    public get tooltipCount(): number {\n        return document.querySelectorAll('.tooltip.vcd-show-clipped-text').length;\n    }\n\n    public get tooltipVisibility(): string {\n        return this.tooltipContent.style.visibility;\n    }\n\n    public destroy(): void {\n        this.fixture.destroy();\n    }\n\n    private get tooltipContent(): HTMLElement {\n        return this.tooltip.querySelector('.tooltip-content');\n    }\n\n    private get tooltip(): HTMLElement {\n        return document.querySelector('.tooltip.vcd-show-clipped-text');\n    }\n}\n\n@Component({\n    template: `\n        {{ text }}\n        {{ text2 }}\n    `,\n})\nexport class ShowClippedTextDirectiveTestHostComponent {\n    @ViewChild(ShowClippedTextDirective) directive!: ShowClippedTextDirective;\n    @ViewChild('div') div!: ElementRef;\n    @ViewChild('div2') div2!: ElementRef;\n\n    public text = 'texting';\n    public text2 = 'texting too';\n    public disabled = false;\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ text }}{{ text2 }}'\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'ShowClippedTextDirectiveTestHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SortedColumn.html":{"url":"interfaces/SortedColumn.html","title":"interface - SortedColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SortedColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.component.ts\n        \n\n            \n                Description\n            \n            \n                The information about the currently sorted column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        reverse\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the column that is sorted.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reverse\n                                    \n                                \n                                \n                                    \n                                        reverse:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the column is sorted normally or reversed.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnInit,\n    Output,\n    TrackByFunction,\n    ViewChild,\n} from '@angular/core';\nimport { ClrDatagrid, ClrDatagridFilter, ClrDatagridPagination, ClrDatagridStateInterface } from '@clr/angular';\nimport { LazyString, TranslationService } from '@vcd/i18n';\nimport { Observable } from 'rxjs';\nimport { ActivityReporter } from '../common/activity-reporter';\nimport { TextIcon } from '../common/interfaces/action-item.interface';\nimport { TooltipSize } from '../lib/directives/show-clipped-text.directive';\nimport { DatagridFilter } from './filters/datagrid-filter';\nimport { ComponentRendererConstructor, ComponentRendererSpec } from './interfaces/component-renderer.interface';\nimport {\n    Button,\n    ButtonConfig,\n    ColumnRendererSpec,\n    ContextualButtonPosition,\n    FunctionRenderer,\n    GridColumn,\n    GridColumnHideable,\n    InactiveButtonDisplayMode,\n} from './interfaces/datagrid-column.interface';\nimport { ContextualButton } from './interfaces/datagrid-column.interface';\n\n/**\n * The default number of items on a single page.\n */\nconst DEFAULT_SIZE = 15;\n\n/**\n * The default items to show in the page size dropdown.\n */\nconst DEFAULT_SIZE_OPTIONS = [DEFAULT_SIZE, 20, 50, 100];\n\n/**\n * The maximum allowed .datagrid-header element clientHeight in pixels.\n */\nconst MAX_HEADER_HEIGHT = 40;\n\n/**\n * The default clr-dr-row element clientHeight in pixels.\n */\nconst ROW_HEIGHT = 37;\n\n/**\n * Key used for translation of pagination when a translation key is not given as input from the caller\n */\nexport const DEFAULT_PAGINATION_TRANSLATION_KEY = 'vcd.cc.grid.default.pagination';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * The types of activity indicators that can be displayed on top of the grid.\n */\nexport enum ActivityIndicatorType {\n    /**\n     * Display a {@link SpinnerActivityReporterComponent} indicator\n     */\n    SPINNER,\n    /**\n     * Display a {@link BannerActivityReporterComponent} indicator\n     */\n    BANNER,\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n\n/**\n * The information the user gives to show page size and page size options in the pagination footer.\n */\nexport interface PaginationConfiguration {\n    /**\n     * Available page size options in the dropdown\n     */\n    pageSizeOptions?: number[];\n\n    /**\n     * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n     * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n     *\n     * Magic: Auto calculates the size based on available height of the container\n     */\n    pageSize: number | 'Magic';\n\n    /**\n     * The height of a row in the datagrid. If not set, will use the default of {@link ROW_HEIGHT}.\n     */\n    rowHeight?: number;\n    /**\n     * If the page size option dropdown should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageSizeSelector?: boolean;\n    /**\n     * If the page number input should be shown.\n     * Defaults to false.\n     */\n    shouldShowPageNumberInput?: boolean;\n}\n\n/**\n * The configuration object that is passed to the detail row component.\n */\nexport interface DetailRowConfig {\n    /**\n     * The record that this detail row should render.\n     */\n    record: R;\n    /**\n     * The index this detail row is in the datagrid.\n     */\n    index: number;\n    /**\n     * The total number of rows in the datagrid.\n     */\n    count: number;\n}\n\n/**\n * The configuration object that is passed to the detail pane component.\n */\nexport interface DetailPaneConfig {\n    /**\n     * The record that this detail pane should render.\n     */\n    record: R;\n}\n\n/**\n * The configuration objet used to create the detail pane on the datagrid.\n */\nexport interface DetailPane {\n    /**\n     * The header that goes on top of this detail pane.\n     */\n    header: string;\n    /**\n     * The contents that go within this detail pane.\n     */\n    component: ComponentRendererConstructor>;\n}\n\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n */\nexport interface GridState {\n    /**\n     * FIQL formatted list of active filters\n     */\n    filters?: string[];\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination?: PagionationInformation;\n}\n\n/**\n * A function that can be used to render the pagination data in the grid.\n */\nexport interface PaginationCallback {\n    (firstItem: number, lastItem: number, totalItems: number): string | Observable;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal extends GridColumn {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer;\n    fieldColumnRendererSpec?: ColumnRendererSpec;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n *\n * @example\n * \n *  \n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n    styleUrls: ['./datagrid.component.scss'],\n})\nexport class DatagridComponent implements OnInit, AfterViewInit {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array. Also pushes\n     * notifications for listeners to make changes to the _columns array\n     */\n    @Input()\n    set columns(cols: GridColumn[]) {\n        this._columns = cols;\n        this.updateColumnsConfig();\n        this.columnsUpdated.emit();\n    }\n    get columns(): GridColumn[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        /**\n         * This is due to a known bug in clarity (@link https://github.com/vmware/clarity/issues/2265)\n         * where using trackBy breaks the select all functionality unless you\n         * add a detectChanges before updating the selection manually.\n         */\n        if (this.viewInitted) {\n            this.changeDetectorRef.detectChanges();\n        }\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n\n    /**\n     * Sets the button configuration on the datagrid.\n     *\n     * {@link ButtonConfig.inactiveDisplayMode} defualts to Disabled.\n     */\n    @Input() set buttonConfig(config: ButtonConfig) {\n        this._buttonConfig = config;\n        this._buttonConfig.contextualButtonConfig = this._buttonConfig.contextualButtonConfig\n            ? this._buttonConfig.contextualButtonConfig\n            : {\n                  buttons: [],\n                  position: ContextualButtonPosition.TOP,\n              };\n        this._buttonConfig.contextualButtonConfig.buttonContents =\n            this._buttonConfig.contextualButtonConfig.buttonContents || TextIcon.ICON;\n        this._buttonConfig.inactiveDisplayMode =\n            this._buttonConfig.inactiveDisplayMode || InactiveButtonDisplayMode.Disable;\n        if (this._buttonConfig.contextualButtonConfig.featured) {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.featured.map(featuredButtonClass => [\n                    featuredButtonClass,\n                    this._buttonConfig.contextualButtonConfig.buttons.find(\n                        button => button.class === featuredButtonClass\n                    ),\n                ])\n            );\n            this.featuredButtons.forEach(featured => {\n                if (!featured) {\n                    throw new Error('Featured button was not found');\n                }\n            });\n        } else {\n            this.featuredButtons = new Map(\n                this._buttonConfig.contextualButtonConfig.buttons.map(featuredButton => [\n                    featuredButton.class,\n                    featuredButton,\n                ])\n            );\n        }\n    }\n\n    /**\n     * Gives the button config of the datagrid.\n     */\n    get buttonConfig(): ButtonConfig {\n        return this._buttonConfig;\n    }\n\n    constructor(\n        private node: ElementRef,\n        private translationService: TranslationService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() set pagination(pagination: PaginationConfiguration) {\n        this._pagination = { ...pagination };\n        if (this._pagination.pageSizeOptions === undefined) {\n            this._pagination.pageSizeOptions = [];\n        }\n        if (this._pagination.shouldShowPageSizeSelector === undefined) {\n            this._pagination.shouldShowPageSizeSelector = false;\n        }\n        if (this._pagination.shouldShowPageNumberInput === undefined) {\n            this._pagination.shouldShowPageNumberInput = false;\n        }\n        this.updatePagination();\n    }\n\n    get pagination(): PaginationConfiguration {\n        return this._pagination;\n    }\n\n    /**\n     * Desired height of the grid in pixels. If unspecificed, the grid fills the parent container.\n     */\n    @Input() set height(height: number) {\n        this._height = height;\n        const heightCssValue = this.height ? `${this.height}px` : 'unset';\n        this.node.nativeElement.style.setProperty('--datagrid-height', heightCssValue);\n        this.updatePagination();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    @HostBinding('class.fill-parent') get shouldFillParent(): boolean {\n        return this.height === undefined;\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    get datagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * An output that emits when the selection changes on the grid.\n     */\n    @Output() selectionChanged = new EventEmitter();\n\n    /**\n     * Emitted whenever {@link #columns} input is updated\n     */\n    @Output() columnsUpdated = new EventEmitter();\n\n    /**\n     * Columns are updated using set columns, addColumn and removeColumn methods. This cache helps in preserving changes\n     * made by each of the methods to columns array and helps in not overwriting the changes made by one of the methods\n     * with changes made by another method\n     */\n    private _columns: GridColumn[];\n    /**\n     * A optional string to be displayed above the grid.\n     */\n    @Input()\n    header?: string;\n\n    /**\n     * The type of activity indicator that should sit ontop of the grid.\n     */\n    @Input()\n    indicatorType: ActivityIndicatorType;\n\n    ContextualButtonPosition = ContextualButtonPosition;\n    GridColumnHideable = GridColumnHideable;\n    TooltipSize = TooltipSize;\n    ActivityIndicatorType = ActivityIndicatorType;\n    TextIcon = TextIcon;\n\n    /**\n     * The component that sound be rendered for this detail row.\n     *\n     * @param R The type of record that this detail component will display.\n     */\n    @Input() detailComponent: ComponentRendererConstructor>;\n\n    /**\n     * Specifies if the row is expanded. The default is false.\n     */\n    @Input() isRowExpanded = false;\n\n    /**\n     * A detail pane that will be displayed when a user selects to expand a row.\n     *\n     * @param R The type of record that this detail pane will display.\n     */\n    @Input() detailPane: DetailPane;\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * The stored button config where inactiveDisplayMode is always non-undefined.\n     */\n    _buttonConfig: ButtonConfig = {\n        globalButtons: [],\n        contextualButtonConfig: {\n            buttons: [],\n            featured: [],\n            position: ContextualButtonPosition.TOP,\n            featuredCount: 0,\n        },\n        inactiveDisplayMode: InactiveButtonDisplayMode.Disable,\n    };\n\n    /**\n     * The cache of button ID to button config that contains only the featured buttons.\n     */\n    featuredButtons: Map> = new Map();\n\n    /**\n     * When there is no data, show this message.\n     */\n    @Input()\n    emptyGridPlaceholder: string;\n\n    private _pagination: PaginationConfiguration = {\n        pageSize: 'Magic',\n        pageSizeOptions: DEFAULT_SIZE_OPTIONS,\n    };\n\n    /**\n     * The page size to display.\n     */\n    pageSize = DEFAULT_SIZE;\n\n    /**\n     * The complete set of options to show the user.\n     */\n    pageSizeOptions = DEFAULT_SIZE_OPTIONS;\n\n    private _height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[] = [];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter> = new EventEmitter>();\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination) paginationComponent: ClrDatagridPagination;\n    /**\n     * The activity reporter that all activites are displayed on\n     */\n    @ViewChild('actionReporter') actionReporter: ActivityReporter;\n\n    private viewInitted = false;\n\n    private widthSetTimes = 0;\n\n    /**\n     * Used for translating pagination information displayed in the grid\n     */\n    @Input() paginationTranslationKey: string = DEFAULT_PAGINATION_TRANSLATION_KEY;\n\n    /**\n     * To add or replace a column of this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public addColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns[colIndex] = col;\n        } else {\n            this._columns.push(col);\n        }\n        this.updateColumnsConfig();\n    }\n\n    /**\n     * To remove a column from this datagrid columns. Exposed for columns modifiers(eg: directives) that listen to\n     * {@link columnsUpdated} event and want to modify the columns set by components using this datagrid.\n     */\n    public removeColumn(col: GridColumn): void {\n        if (!col) {\n            return;\n        }\n        const colIndex = this.findColumnIndex(col);\n        if (colIndex !== -1) {\n            this._columns.splice(colIndex, 1);\n            this.updateColumnsConfig();\n        }\n    }\n\n    private findColumnIndex(col: GridColumn): number {\n        return this.columns.findIndex(column => col.displayName === column.displayName);\n    }\n\n    private updateColumnsConfig(): void {\n        this.columnsConfig = this.getColumnsConfig(this.columns);\n    }\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction = (index: number, record): string => {\n        return (record as any).href || String(index);\n    };\n\n    /**\n     * Says if the action bar has contents to show.\n     */\n    shouldShowActionBar(): boolean {\n        return (\n            this.buttonConfig.globalButtons.length !== 0 ||\n            this.buttonConfig.contextualButtonConfig.buttons.length !== 0\n        );\n    }\n\n    /**\n     * If the button icon should be displayed.\n     */\n    shouldShowIcon(): boolean {\n        return (TextIcon.ICON & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.ICON;\n    }\n\n    /**\n     * If the text should be displayed on the button.\n     */\n    shouldShowText(): boolean {\n        return (TextIcon.TEXT & this.buttonConfig.contextualButtonConfig.buttonContents) === TextIcon.TEXT;\n    }\n\n    /**\n     * If the buttons icon should have a tooltip.\n     */\n    shouldShowTooltip(): boolean {\n        return this.buttonConfig.contextualButtonConfig.buttonContents === TextIcon.ICON;\n    }\n\n    /**\n     * Returns the buttons that should be featured given the {@link datagridSelection} or the given {@param record}.\n     *\n     * @throws Error if a featured button cannot be found.\n     */\n    getFeaturedButtons(records?: R[]): ContextualButton[] {\n        return this._buttonConfig.contextualButtonConfig.buttons\n            .filter(button => this.isButtonShown(button, records) && this.featuredButtons.get(button.class))\n            .slice(0, this._buttonConfig.contextualButtonConfig.featuredCount || this.featuredButtons.size);\n    }\n\n    /**\n     * Returns the maximum number of featured buttons next to a single row.\n     */\n    getMaxFeaturedButtonsOnRow(): number {\n        let max = 0;\n        this.items.forEach(item => {\n            max = Math.max(this.getFeaturedButtons([item]).length, max);\n        });\n        return max;\n    }\n\n    /**\n     * Says if the given button should appear on the datagrid.\n     */\n    isButtonShown(button: Button, records?: R[]): boolean {\n        const selection = records ? records : this.datagridSelection;\n        return button.isActive(selection) || this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Says if the given button should be marked as disabled.\n     */\n    isButtonDisabled(button: Button, active: boolean): boolean {\n        return !active && this.getDisplayMode(button) === InactiveButtonDisplayMode.Disable;\n    }\n\n    /**\n     * Gives the display mode of a button.\n     */\n    getDisplayMode(button: Button): InactiveButtonDisplayMode {\n        return button.inactiveDisplayMode || this._buttonConfig.inactiveDisplayMode;\n    }\n\n    /**\n     * Says if the contextual buttons should display on the top.\n     */\n    shouldDisplayButtonsOnTop(): boolean {\n        return (\n            this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.TOP &&\n            this.datagridSelection.length !== 0\n        );\n    }\n\n    /**\n     * Says if the contextual buttons should display on the row.\n     */\n    shouldDisplayButtonsOnRow(): boolean {\n        return this._buttonConfig.contextualButtonConfig.position === ContextualButtonPosition.ROW;\n    }\n\n    /**\n     * Says if there are contextual buttons to display.\n     */\n    hasContextualButtons(): boolean {\n        return this._buttonConfig.contextualButtonConfig.buttons.length !== 0;\n    }\n\n    /**\n     * Runs the handler function for the given button with the given selection.\n     */\n    runButtonHandler(button: Button, selection?: R[]): void {\n        const response = button.handler(selection);\n        if (response && this.actionReporter) {\n            this.actionReporter.monitorGet(response);\n        }\n    }\n\n    /**\n     * Gives the render spec to create the detail row for the row with the given record, at the given index, and\n     * in a datagrid with the given count of total items.\n     */\n    getDetailRowRenderSpec(record: R, index: number, count: number): ComponentRendererSpec> {\n        return {\n            type: this.detailComponent,\n            config: { record, index, count },\n        };\n    }\n\n    getDetailPaneRenderSpec(record: R): ComponentRendererSpec> {\n        return {\n            type: this.detailPane.component,\n            config: { record },\n        };\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single && this.datagrid.selection.currentSingle) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const current = this.datagrid.selection.currentSingle as R;\n            const found = this.mapSelectedRecords([current], this.items)[0];\n            if (!found) {\n                this.datagrid.selection.clearSelection();\n            } else {\n                this.datagrid.selection.setSelected(found, true);\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                const current = [...this.datagrid.selection.current] as R[];\n                this.datagrid.selection.clearSelection();\n                const nextSelection = this.mapSelectedRecords(current, this.items).filter(item => item);\n                this.datagrid.selection.updateCurrent(nextSelection, false);\n            }\n        }\n        if (this.datagrid.rows) {\n            this.datagrid.rows.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Given an existing selection that is made up of records that are about to become stale,\n     * and new records to be loaded into the grid, returns the selection mapped to records\n     * from the newly added records, excluding any records that may not be present in the\n     * new selection because they are not present in the new data.\n     */\n    private mapSelectedRecords(currentSelection: R[], newRecords: R[]): R[] {\n        return currentSelection.map((selected, selectedIndex) => {\n            const found = newRecords.find(\n                (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n            );\n            return found;\n        });\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        const vcdDgState: GridState = {\n            pagination: {\n                pageNumber: state.page ? state.page.current : 1,\n                itemsPerPage: state.page ? state.page.size : DEFAULT_SIZE,\n            },\n        };\n        if (state.filters) {\n            vcdDgState.filters = state.filters.map((filter: DatagridFilter) => filter.getValue());\n        }\n        if (state.sort && typeof state.sort.by === 'string') {\n            vcdDgState.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(vcdDgState);\n    }\n\n    /**\n     * Is the given column able to be hidden by the user through the show/hide menu.\n     */\n    isColumnHideable(column: GridColumn): boolean {\n        return column && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    /**\n     * Gives the correct string to display for the pagination.\n     */\n    getPaginationTranslation(paginationData: ClrDatagridPagination): LazyString {\n        return this.translationService.translateAsync(this.paginationTranslationKey, [\n            {\n                firstItem: paginationData.firstItem + 1,\n                lastItem: paginationData.lastItem + 1,\n                totalItems: paginationData.totalItems,\n            },\n        ]);\n    }\n\n    /**\n     * The number of rows in a single page.\n     */\n    private getPageSize(): number {\n        if (typeof this.pagination.pageSize === 'number') {\n            return this.pagination.pageSize;\n        }\n        if (this.pagination.pageSize === 'Magic' && this.viewInitted) {\n            return this.calculatePageSize();\n        }\n        return DEFAULT_SIZE;\n    }\n\n    /**\n     * Available page size options in the dropdown\n     */\n    private getPageSizeOptions(): number[] {\n        let options = this.pagination.pageSizeOptions.map(size => size);\n        if (options.indexOf(this.pageSize) === -1) {\n            options.push(this.pageSize);\n            options = options.sort((a, b) => a - b);\n        }\n        return options;\n    }\n\n    /**\n     *  Calculates the pageSize from the available space in the datagrid body\n     */\n    private calculatePageSize(): number {\n        const grid = this.node.nativeElement;\n        const gridHeight = grid.parentNode.clientHeight;\n\n        const headerHeight = grid.querySelector('.datagrid-header').offsetHeight;\n        const footerHeight = grid.querySelector('clr-dg-footer').offsetHeight;\n        const rowHeight = this.pagination.rowHeight || ROW_HEIGHT;\n\n        // Substracting the height of the header, actionbar and footer\n        let availableHeight = (this.height || gridHeight) - headerHeight - footerHeight;\n        if (!this.height) {\n            const header = grid.querySelector('.vcd-header');\n            availableHeight -= header ? header.offsetHeight : 0;\n        }\n        if (this.shouldShowActionBar()) {\n            availableHeight -= ROW_HEIGHT;\n        }\n\n        // Calculate the pageSize by dividing the available height by the row height.\n        const pageSize = Math.floor(availableHeight / rowHeight);\n\n        // If the calculated pageSize is less than the default, set the pageSize to the default one.\n        return Math.max(DEFAULT_SIZE, pageSize);\n    }\n\n    /**\n     * Updates the pagination information by recalculating pageSize if needed.\n     */\n    private updatePagination(): void {\n        this.pageSize = this.getPageSize();\n        this.pageSizeOptions = this.getPageSizeOptions();\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    public getColumnsConfig(columns): ColumnConfigInternal[] {\n        return columns.map(column => {\n            const columnConfig: ColumnConfigInternal = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer;\n            } else if ((column.renderer as ColumnRendererSpec).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ColumnRendererSpec;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            // Add query filed required for the column filtering. This is then used in DatagridFilter.queryField\n            if (column.queryFieldName && column.filter) {\n                column.filter.config.queryField = column.queryFieldName;\n            }\n\n            return columnConfig;\n        });\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    ngAfterViewInit(): void {\n        this.viewInitted = true;\n        if (this.pagination.pageSize === 'Magic') {\n            this.updatePagination();\n            // We need to update the page size in ngAfterViewInit because when it is set\n            // to magically calculate, we need to know that the rest of the page has been rendered.\n            // Yet, this causes a ExpressionChangedAfterItHasBeenCheckedError because we are changing\n            // pageSize in this method. So we need to detectChanges to avoid an error or\n            // calling a setTimeout.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SpinnerActivityReporterComponent.html":{"url":"components/SpinnerActivityReporterComponent.html","title":"component - SpinnerActivityReporterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SpinnerActivityReporterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts\n\n\n    \n        Description\n    \n    \n        Spinner activity reporter shows the spinner until an error or success message is returned.\nAn error message is displayed through the error banner.\n\n    \n\n    \n        Extends\n    \n    \n                ActivityReporter\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                vcd-spinner-activity-reporter\n            \n\n\n\n\n            \n                templateUrl\n                ./spinner-activity-reporter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                errorText\n                            \n                            \n                                    Public\n                                running\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reportError\n                            \n                            \n                                reportSuccess\n                            \n                            \n                                startActivity\n                            \n                            \n                                    Async\n                                monitorEdit\n                            \n                            \n                                    Async\n                                monitorGet\n                            \n                            \n                                    Async\n                                monitorGetAll\n                            \n                            \n                                    Abstract\n                                reportError\n                            \n                            \n                                    Abstract\n                                reportSuccess\n                            \n                            \n                                    Abstract\n                                startActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(promiseResolver: ActivityPromiseResolver)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        promiseResolver\n                                                  \n                                                        \n                                                                        ActivityPromiseResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \nreportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:44\n                \n            \n\n\n            \n                \n                    Hides the loading indicator and shows an error message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \nreportSuccess()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:52\n                \n            \n\n\n            \n                \n                    Hides the loading indicator.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \nstartActivity()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:36\n                \n            \n\n\n            \n                \n                    Begins to show the loading indicator to the user.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorEdit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorEdit(activityResolutionPromise: Promise, successMessage?: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:73\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity and posts a successMessage using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGet(activityResolutionPromise: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:38\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns an entity using ActivityPromiseResolver.monitorActivity.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromise\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            monitorGetAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    monitorGetAll(activityResolutionPromises: Promise)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:53\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Monitors a promise that returns many entities using ActivityPromiseResolver.monitorActivities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activityResolutionPromises\n                                    \n                                            Promise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportError(errorText: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:27\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom error reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errorText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text to display in the error alert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            reportSuccess\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportSuccess(successMessage: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:33\n\n                \n            \n\n\n            \n                \n                    Override this method to provide custom success reporting behavior.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    successMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A message to display to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            startActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startActivity()\n                \n            \n\n\n            \n                \n                    Inherited from         ActivityReporter\n\n                \n            \n            \n                \n                        Defined in         ActivityReporter:21\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            errorText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:27\n                            \n                        \n\n                \n                    \n                        When set show the error text\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            running\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts:22\n                            \n                        \n\n                \n                    \n                        When true show the spinner\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { ActivityPromiseResolver } from './activity-promise-resolver';\nimport { ActivityReporter } from './activity-reporter';\n\n/**\n * Spinner activity reporter shows the spinner until an error or success message is returned.\n * An error message is displayed through the error banner.\n */\n@Component({\n    selector: 'vcd-spinner-activity-reporter',\n    templateUrl: './spinner-activity-reporter.component.html',\n})\nexport class SpinnerActivityReporterComponent extends ActivityReporter {\n    /**\n     * When true show the spinner\n     */\n    public running = false;\n\n    /**\n     * When set show the error text\n     */\n    public errorText: string = null;\n\n    constructor(@Inject(ActivityPromiseResolver) promiseResolver: ActivityPromiseResolver) {\n        super(promiseResolver);\n    }\n\n    /**\n     * Begins to show the loading indicator to the user.\n     */\n    startActivity(): void {\n        this.running = true;\n        this.errorText = null;\n    }\n\n    /**\n     * Hides the loading indicator and shows an error message.\n     */\n    reportError(errorText: string): void {\n        this.errorText = errorText;\n        this.running = false;\n    }\n\n    /**\n     * Hides the loading indicator.\n     */\n    reportSuccess(): void {\n        this.running = false;\n    }\n}\n\n    \n\n    \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ActionMenuComponent', 'selector': 'vcd-action-menu'},{'name': 'BannerActivityReporterComponent', 'selector': 'vcd-banner-activity-reporter'},{'name': 'BoldTextRendererComponent', 'selector': 'vcd-bold-text-renderer'},{'name': 'DataExporterComponent', 'selector': 'vcd-data-exporter'},{'name': 'DatagridComponent', 'selector': 'vcd-datagrid'},{'name': 'DatagridMultiSelectFilterComponent', 'selector': 'vcd-dg-multiselect-filter'},{'name': 'DatagridNumericFilterComponent', 'selector': 'vcd-dg-numeric-filter'},{'name': 'DatagridSelectFilterComponent', 'selector': 'vcd-dg-select-filter'},{'name': 'DatagridStringFilterComponent', 'selector': 'vcd-dg-string-filter'},{'name': 'ErrorBannerComponent', 'selector': 'vcd-error-banner'},{'name': 'FilterTestHostComponent', 'selector': ''},{'name': 'FormCheckboxComponent', 'selector': 'vcd-form-checkbox'},{'name': 'FormInputComponent', 'selector': 'vcd-form-input'},{'name': 'FormSelectComponent', 'selector': 'vcd-form-select'},{'name': 'LoadingIndicatorComponent', 'selector': 'vcd-loading-indicator'},{'name': 'NumberWithUnitFormInputComponent', 'selector': 'vcd-number-with-unit-form-input'},{'name': 'ShowClippedTextDirectiveTestHostComponent', 'selector': ''},{'name': 'SpinnerActivityReporterComponent', 'selector': 'vcd-spinner-activity-reporter'},{'name': 'SpotlightSearchComponent', 'selector': 'vcd-spotlight-search'}];\n    var DIRECTIVES = [{'name': 'ComponentRendererOutletDirective', 'selector': '[vcdComponentRendererOutlet]'},{'name': 'MinMaxValidator', 'selector': 'vcd-number-with-unit-form-input[min],vcd-number-with-unit-form-input[max]'},{'name': 'ShowClippedTextDirective', 'selector': '[vcdShowClippedText]'}];\n    var ACTUAL_COMPONENT = {'name': 'SpinnerActivityReporterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpinnerActivityReporterWidgetObject.html":{"url":"classes/SpinnerActivityReporterWidgetObject.html","title":"class - SpinnerActivityReporterWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpinnerActivityReporterWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts\n        \n\n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getSpinner\n                            \n                            \n                                    Public\n                                isSpinnerSpinning\n                            \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    running\n                                \n                                \n                                    errorText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd-spinner-activity-reporter'\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getSpinner\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSpinner()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:24\n                \n            \n\n\n            \n                \n                    Gives the spinner for this element\n\n\n                    \n                        Returns :         DebugElement\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isSpinnerSpinning\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isSpinnerSpinning()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        running\n                    \n                \n\n                \n                    \n                        getrunning()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:13\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorText\n                    \n                \n\n                \n                    \n                        geterrorText()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts:17\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DebugElement } from '@angular/core';\nimport { SpinnerActivityReporterComponent } from '../../../common/activity-reporter';\nimport { WidgetObject } from '../widget-object';\n\nexport class SpinnerActivityReporterWidgetObject extends WidgetObject {\n    static tagName = 'vcd-spinner-activity-reporter';\n\n    get running(): boolean {\n        return this.component.running;\n    }\n\n    get errorText(): string {\n        return this.component.errorText;\n    }\n\n    /**\n     * Gives the spinner for this element\n     */\n    private getSpinner(): DebugElement {\n        const element = this.findElement('.spinner');\n\n        if (!element) {\n            throw new Error('Could not find the spinner element.');\n        }\n        return element;\n    }\n\n    public isSpinnerSpinning(): boolean {\n        try {\n            return !!this.getSpinner();\n        } catch (error) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SpotlightSearchModule.html":{"url":"modules/SpotlightSearchModule.html","title":"module - SpotlightSearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SpotlightSearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SpotlightSearchModule\n\n\n\ncluster_SpotlightSearchModule_declarations\n\n\n\ncluster_SpotlightSearchModule_exports\n\n\n\ncluster_SpotlightSearchModule_providers\n\n\n\n\nSpotlightSearchComponent\n\nSpotlightSearchComponent\n\n\n\nSpotlightSearchModule\n\nSpotlightSearchModule\n\nSpotlightSearchModule -->\n\nSpotlightSearchComponent->SpotlightSearchModule\n\n\n\n\n\nSpotlightSearchComponent \n\nSpotlightSearchComponent \n\nSpotlightSearchComponent  -->\n\nSpotlightSearchModule->SpotlightSearchComponent \n\n\n\n\n\nSpotlightSearchService\n\nSpotlightSearchService\n\nSpotlightSearchModule -->\n\nSpotlightSearchService->SpotlightSearchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            SpotlightSearchComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            SpotlightSearchService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SpotlightSearchComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { SpotlightSearchComponent } from './spotlight-search.component';\nimport { SpotlightSearchService } from './spotlight-search.service';\n\n@NgModule({\n    imports: [CommonModule, ClarityModule, FormsModule, ReactiveFormsModule, I18nModule],\n    declarations: [SpotlightSearchComponent],\n    exports: [SpotlightSearchComponent],\n    providers: [SpotlightSearchService],\n})\nexport class SpotlightSearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpotlightSearchProvider.html":{"url":"interfaces/SpotlightSearchProvider.html","title":"interface - SpotlightSearchProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpotlightSearchProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.provider.ts\n        \n\n            \n                Description\n            \n            \n                The interface a search providers should implement in order to register itself with the SpotlightSearchService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    search\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(criteria: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.provider.ts:16\n                \n            \n\n\n            \n                \n                    Returns an array or a promise of array of items that comply with the search criteria.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    criteria\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search string provided by the user when typing in the Spotlight Search Component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SpotlightSearchResultType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { SpotlightSearchResultType } from './spotlight-search-result';\n\n/**\n * The interface a search providers should implement in order to register itself with the {@link SpotlightSearchService}\n */\nexport interface SpotlightSearchProvider {\n    /**\n     * Returns an array or a promise of array of items that comply with the search criteria.\n     * @param criteria The search string provided by the user when typing in the Spotlight Search Component\n     */\n    search(criteria: string): SpotlightSearchResultType;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpotlightSearchResult.html":{"url":"interfaces/SpotlightSearchResult.html","title":"interface - SpotlightSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpotlightSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search-result.ts\n        \n\n            \n                Description\n            \n            \n                The interface a spotlight search result item should implement\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayText\n                                \n                                \n                                        handler\n                                \n                                \n                                            Optional\n                                        kbdShortcut\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayText\n                                    \n                                \n                                \n                                    \n                                        displayText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The text that will be displayed in the spotlight search component\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                    \n                                \n                                \n                                    \n                                        handler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Function that is going to be called when this item is to be handled, i.e. when the\nuser clicks on this item or  selects it and presses the Enter key.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        kbdShortcut\n                                    \n                                \n                                \n                                    \n                                        kbdShortcut:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The keyboard shortcut that can be used to call the handler of this item\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SpotlightSearchResult {\n    /**\n     * The text that will be displayed in the spotlight search component\n     */\n    displayText: string;\n\n    /**\n     * The keyboard shortcut that can be used to call the handler of this item\n     */\n    kbdShortcut?: string;\n\n    /**\n     * Function that is going to be called when this item is to be handled, i.e. when the\n     * user clicks on this item or  selects it and presses the Enter key.\n     */\n    handler: () => void;\n}\n\n/**\n * The type of the spotlight search result which can be a promise\n */\nexport type SpotlightSearchResultType = SpotlightSearchResult[] | Promise;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpotlightSearchService.html":{"url":"injectables/SpotlightSearchService.html","title":"injectable - SpotlightSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SpotlightSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/spotlight-search/spotlight-search.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getRegisteredProviders\n                            \n                            \n                                    Public\n                                registerProvider\n                            \n                            \n                                    Public\n                                unregisterProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRegisteredProviders\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRegisteredProviders()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:96\n                \n            \n\n\n            \n                \n                    Get a list of all the registered search providers.\n\n\n                    \n                        Returns :         RegisteredProviders[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            registerProvider\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    registerProvider(provider: SpotlightSearchProvider, section: string, order: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:51\n                \n            \n\n\n            \n                \n                    Register a search provider\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    provider\n                                    \n                                                SpotlightSearchProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The search provider {\n\n                                    \n                                \n                                \n                                    section\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The section name (the title or the group name) that this provider will provides results for.\n\n                                    \n                                \n                                \n                                    order\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        The order of the section in the spotlight search results. Less the order, closer to the beginning\nof the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            unregisterProvider\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unregisterProvider(registrationId: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:85\n                \n            \n\n\n            \n                \n                    Unregister a search provider by providing the registration id.\nReturns true if unregistration was done.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    registrationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id returned when registering the provider\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InternalRegistrationData[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/spotlight-search/spotlight-search.service.ts:42\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SpotlightSearchProvider } from './spotlight-search.provider';\n\n/**\n * Interface describing what providers are registered within the system\n */\nexport interface RegisteredProviders {\n    /**\n     * The very search provider\n     */\n    provider: SpotlightSearchProvider;\n\n    /**\n     * The section name (the title or the group name) that this provider will provides results for.\n     */\n    section: string;\n}\n\n/**\n * This interface is used internally by the service\n */\ninterface InternalRegistrationData extends RegisteredProviders {\n    order?: number;\n    id: string;\n}\n\n/**\n * Create unique id\n */\nconst createId = ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})();\n\n@Injectable()\nexport class SpotlightSearchService {\n    registrations: InternalRegistrationData[] = [];\n\n    /**\n     * Register a search provider\n     * @param provider The search provider {@link SpotlightSearchProvider}\n     * @param section The section name (the title or the group name) that this provider will provides results for.\n     * @param order The order of the section in the spotlight search results. Less the order, closer to the beginning\n     *        of the list. So 0 means put provider in the beginning of the list, -1 appends the provider at the back.\n     */\n    public registerProvider(provider: SpotlightSearchProvider, section: string, order: number = -1): string {\n        const registrationData = { provider, section, order, id: createId() };\n\n        let insertIndex = -1;\n        // Determine the position of the new registration\n        if (order > -1) {\n            insertIndex = this.registrations.findIndex(data => {\n                // If an item has a negative index, this means no order had been provided for that item\n                // which means we have found the insert index\n                if (data.order  -1) {\n            this.registrations.splice(insertIndex, 0, registrationData);\n        } else {\n            this.registrations.push(registrationData);\n        }\n\n        return registrationData.id;\n    }\n\n    /**\n     * Unregister a search provider by providing the registration id.\n     * Returns true if unregistration was done.\n     * @param registrationId the id returned when registering the provider\n     */\n    public unregisterProvider(registrationId: string): boolean {\n        const index = this.registrations.findIndex(data => data.id === registrationId);\n        if (index > -1) {\n            this.registrations.splice(index, 1);\n        }\n        return index > -1;\n    }\n\n    /**\n     * Get a list of all the registered search providers.\n     */\n    public getRegisteredProviders(): RegisteredProviders[] {\n        return this.registrations.map(data => ({ provider: data.provider, section: data.section }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubscriptionTracker.html":{"url":"classes/SubscriptionTracker.html","title":"class - SubscriptionTracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubscriptionTracker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/common/subscription/subscription-tracker.ts\n        \n\n            \n                Description\n            \n            \n                Components can use this to have subscriptions automatically removed when the component is destroyed\n\n            \n\n\n            \n                Implements\n            \n            \n                            ISubscriptionTracker\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                subscribe\n                            \n                            \n                                unsubscribe\n                            \n                            \n                                unsubscribeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(destroyable: OnDestroy)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/common/subscription/subscription-tracker.ts:40\n                            \n                        \n\n                \n                    \n                            Constructs this tracker to call unsubscribeAll when OnDestroy.ngOnDestroy is called.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        destroyable\n                                                  \n                                                        \n                                                                        OnDestroy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:40\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subscribe\n                        \n                        \n                    \n                \n            \n            \n                \nsubscribe(observable: Observable, observerOrNext?: PartialObserver | , error?: (error?: any) => void, complete?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    observable\n                                    \n                                            Observable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    observerOrNext\n                                    \n                                            PartialObserver | \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    complete\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribe\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribe(subscription: Subscription)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                            Subscription\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/common/subscription/subscription-tracker.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OnDestroy } from '@angular/core';\nimport { Observable, PartialObserver, Subscription } from 'rxjs';\nimport { toSubscriber } from 'rxjs/internal-compatibility';\n\n/**\n * An interface that knows how to subscribe and unsubscribe from observables.\n */\nexport interface ISubscriptionTracker {\n    /**\n     * Subscribes to the given {@param observable}. Passes along the given {@param observerOrNext}.\n     * Will call the {@param complete} when complete, and {@param error} when errors happen.\n     */\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription;\n\n    /**\n     * Unsubscribes from the given {@param subscription}.\n     */\n    unsubscribe(subscription: Subscription): Subscription;\n\n    /**\n     * Unsubscribes from all subscriptions on this {@link Subscribable}.\n     */\n    unsubscribeAll(): void;\n}\n\n/**\n * Components can use this to have subscriptions automatically removed when the component is destroyed\n */\nexport class SubscriptionTracker implements ISubscriptionTracker {\n    private subscriptions: Subscription[] = [];\n\n    /**\n     * Constructs this tracker to call {@link unsubscribeAll} when {@link OnDestroy.ngOnDestroy} is called.\n     */\n    constructor(destroyable: OnDestroy) {\n        const originalOnDestroy = destroyable.ngOnDestroy;\n        destroyable.ngOnDestroy = () => {\n            this.unsubscribeAll();\n            originalOnDestroy.call(destroyable);\n        };\n    }\n\n    subscribe(\n        observable: Observable,\n        observerOrNext?: PartialObserver | ((value: T) => void),\n        error?: (error: any) => void,\n        complete?: () => void\n    ): Subscription {\n        const subscription = observable.subscribe(toSubscriber(observerOrNext, error, complete));\n        this.subscriptions.push(subscription);\n        return subscription;\n    }\n\n    unsubscribe(subscription: Subscription): Subscription {\n        subscription.unsubscribe();\n        const indexOfSubscription = this.subscriptions.indexOf(subscription);\n        if (indexOfSubscription === -1) {\n            throw new Error('Unsubscribing to untracked subscription');\n        }\n        this.subscriptions.splice(indexOfSubscription, 1);\n        return subscription;\n    }\n\n    unsubscribeAll(): void {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThousandsUnit.html":{"url":"classes/ThousandsUnit.html","title":"class - ThousandsUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThousandsUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Finds the bestUnit by trying groups of thousands\n\n            \n\n            \n                Extends\n            \n            \n                        Unit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBestUnit\n                            \n                            \n                                    Abstract\n                                getAllUnitTypes\n                            \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Unit\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unit:12\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \nfindBestUnit(value: number, availableUnits: ThousandsUnit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:89\n                \n            \n\n\n            \n                \n                    Calculates the best unit out of available units to display in UI cell for a given input Unit\nand value\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nValue of input Unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                            ThousandsUnit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.getAllUnitTypes()\n                                    \n\n                                    \n                                        \nArray of available Units to display in UI cell\navailableUnits array should be pre-sorted ascending by multiplier\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getAllUnitTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUnitTypes()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ThousandsUnit[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:71\n\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:45\n\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:37\n\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:61\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Inherited from         Unit\n\n                \n            \n            \n                \n                        Defined in         Unit:54\n\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Unit.html":{"url":"classes/Unit.html","title":"class - Unit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Unit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit.ts\n        \n\n            \n                Description\n            \n            \n                Allows you to define different types of units with unitName and\nmultiplier that converts to baseUnit.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _multiplier\n                            \n                            \n                                    Private\n                                    Readonly\n                                _unitName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                findBestUnit\n                            \n                            \n                                    Public\n                                getBaseValue\n                            \n                            \n                                    Public\n                                getMultiplier\n                            \n                            \n                                    Public\n                                getOutputValue\n                            \n                            \n                                    Public\n                                getUnitName\n                            \n                            \n                                    Abstract\n                                getUnitNameTranslationKey\n                            \n                            \n                                    Abstract\n                                getValueWithUnitTranslationKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(multiplier: number, unitName: string)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        multiplier\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nValue that is used to convert this to base unit\n\n\n                                                        \n                                                \n                                                \n                                                        unitName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nName of the Unit. Also used to construct translation\nkeys for each type of Unit.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _multiplier\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _unitName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/unit/unit.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            findBestUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBestUnit(value: number, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:71\n                \n            \n\n\n            \n                \n                    Returns the best unit out of available units for given value of current unit\nBest unit is a Unit whose converted value is less than 1000\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nList of available Units out of which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Unit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBaseValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:45\n                \n            \n\n\n            \n                \n                    Returns the value in base unit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMultiplier\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMultiplier()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOutputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputValue(value, outputUnit: Unit)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:37\n                \n            \n\n\n            \n                \n                    Returns the value in outputUnit for this unit\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nValue of this unit\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUnit to which value is converted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnitName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitName()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getUnitNameTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnitNameTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:61\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying unitName\nEx: MB, B, GHz, MHz, %\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            getValueWithUnitTranslationKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValueWithUnitTranslationKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit.ts:54\n                \n            \n\n\n            \n                \n                    Translation key to be used when displaying value with unit\nEx: 25 MB, 100 %, 2 GHz\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export abstract class Unit {\n    private readonly _multiplier: number;\n    private readonly _unitName: string;\n\n    /**\n     * @param multiplier - Value that is used to convert this to base unit\n     * @param unitName - Name of the Unit. Also used to construct translation\n     * keys for each type of Unit.\n     */\n    constructor(private multiplier: number, private unitName: string) {\n        this._multiplier = multiplier;\n        this._unitName = unitName;\n    }\n\n    public getMultiplier(): number {\n        return this._multiplier;\n    }\n\n    public getUnitName(): string {\n        return this._unitName;\n    }\n\n    /**\n     * Returns the value in outputUnit for this unit\n     * @param value - Value of this unit\n     * @param outputUnit - Unit to which value is converted\n     */\n    public getOutputValue(value, outputUnit: Unit): number {\n        return this.getBaseValue(value) / outputUnit.multiplier;\n    }\n\n    /**\n     * Returns the value in base unit for this unit\n     * @param value - Value of this unit\n     */\n    public getBaseValue(value: number): number {\n        return value * this.multiplier;\n    }\n\n    /**\n     * Translation key to be used when displaying value with unit\n     *\n     * Ex: 25 MB, 100 %, 2 GHz\n     */\n    abstract getValueWithUnitTranslationKey(): string;\n\n    /**\n     * Translation key to be used when displaying unitName\n     *\n     * Ex: MB, B, GHz, MHz, %\n     */\n    abstract getUnitNameTranslationKey(): string;\n\n    /**\n     * Returns the best unit out of available units for given value of current unit\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of this unit\n     * @param availableUnits - List of available Units out of which best unit is calculated\n     */\n    abstract findBestUnit(value: number, availableUnits: Unit[]): Unit;\n}\n\n/**\n * Finds the bestUnit by trying groups of thousands\n */\nexport abstract class ThousandsUnit extends Unit {\n    /**\n     * Calculates the best unit out of available units to display in UI cell for a given input Unit\n     * and value\n     *\n     * Best unit is a Unit whose converted value is less than 1000\n     *\n     * @param value - Value of input Unit\n     * @param availableUnits - Array of available Units to display in UI cell\n     * availableUnits array should be pre-sorted ascending by multiplier\n     *\n     */\n    findBestUnit(value: number, availableUnits: ThousandsUnit[] = this.getAllUnitTypes()): Unit {\n        if (value >= 1000) {\n            const baseValue = this.getBaseValue(value);\n            let outputNumber = baseValue;\n            const unitTypes = availableUnits;\n            let i = 0;\n            while (outputNumber >= 1000 && i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UnitFormatter.html":{"url":"injectables/UnitFormatter.html","title":"injectable - UnitFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UnitFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/unit/unit-formatter.ts\n        \n\n            \n                Description\n            \n            \n                UnitFormatter is used to format the value with unitName in localized string\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bestFormat\n                            \n                            \n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(translationService: TranslationService)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/unit/unit-formatter.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translationService\n                                                  \n                                                        \n                                                                    TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bestFormat\n                        \n                        \n                    \n                \n            \n            \n                \nbestFormat(value: number, inputUnit: Unit, availableUnits: Unit[])\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit-formatter.ts:46\n                \n            \n\n\n            \n                \n                    Converts the value of inputUnit to best unit out of availableUnits and returns\nin localized string format ${value} ${outputUnit.unitName}\nEx: bestFormat(1000000, Unit.KB, [Unit.KB, Unit.MB, Unit.GB]) = \"1 GB\"\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        = value of inputUnit\n\n                                    \n                                \n                                \n                                    inputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit of value\n\n\n                                    \n                                \n                                \n                                    availableUnits\n                                    \n                                                Unit[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nlist of units from which best unit is calculated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            format\n                        \n                        \n                    \n                \n            \n            \n                \nformat(value: number, inputUnit: Unit, outputUnit: Unit, precision?: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/unit/unit-formatter.ts:29\n                \n            \n\n\n            \n                \n                    Converts the value of inputUnit to outPutUnit returns in\nlocalized string format ${value} ${outputUnit.unitName}\nEx: format(1000, Unit.MB, Unit.GB, 2) = \"1 GB\"\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nvalue of inputUnit\n\n\n                                    \n                                \n                                \n                                    inputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit of value\n\n\n                                    \n                                \n                                \n                                    outputUnit\n                                    \n                                                Unit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nunit to which value is converted\n\n\n                                    \n                                \n                                \n                                    precision\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nhow many digits are shown after decimal\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { TranslationService } from '@vcd/i18n';\nimport { CommonUtil } from '../common-util';\nimport { Unit } from './unit';\n\n/**\n * UnitFormatter is used to format the value with unitName in localized string\n */\n@Injectable()\nexport class UnitFormatter {\n    constructor(private translationService: TranslationService) {}\n\n    /**\n     * Converts the value of inputUnit to outPutUnit returns in\n     * localized string format `${value} ${outputUnit.unitName}`\n     *\n     * Ex: format(1000, Unit.MB, Unit.GB, 2) = \"1 GB\"\n     *\n     * @param value - value of inputUnit\n     * @param inputUnit - unit of value\n     * @param outputUnit - unit to which value is converted\n     * @param precision - how many digits are shown after decimal\n     */\n    format(value: number, inputUnit: Unit, outputUnit: Unit, precision?: number): string {\n        // TODO response from getOutputValue() needs to be formatted to localized number\n        return this.translationService.translate(outputUnit.getValueWithUnitTranslationKey(), [\n            CommonUtil.roundTo(inputUnit.getOutputValue(value, outputUnit), precision),\n        ]);\n    }\n\n    /**\n     * Converts the value of inputUnit to best unit out of availableUnits and returns\n     * in localized string format `${value} ${outputUnit.unitName}`\n     *\n     * Ex: bestFormat(1000000, Unit.KB, [Unit.KB, Unit.MB, Unit.GB]) = \"1 GB\"\n     *\n     * @param value = value of inputUnit\n     * @param inputUnit - unit of value\n     * @param availableUnits - list of units from which best unit is calculated\n     */\n    bestFormat(value: number, inputUnit: Unit, availableUnits: Unit[]): string {\n        return this.format(value, inputUnit, inputUnit.findBestUnit(value, availableUnits));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdActionMenuModule.html":{"url":"modules/VcdActionMenuModule.html","title":"module - VcdActionMenuModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdActionMenuModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdActionMenuModule\n\n\n\ncluster_VcdActionMenuModule_declarations\n\n\n\ncluster_VcdActionMenuModule_exports\n\n\n\n\nActionMenuComponent\n\nActionMenuComponent\n\n\n\nVcdActionMenuModule\n\nVcdActionMenuModule\n\nVcdActionMenuModule -->\n\nActionMenuComponent->VcdActionMenuModule\n\n\n\n\n\nActionMenuComponent \n\nActionMenuComponent \n\nActionMenuComponent  -->\n\nVcdActionMenuModule->ActionMenuComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/action-menu/action-menu.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ActionMenuComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ActionMenuComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { ActionMenuComponent } from './action-menu.component';\n\n@NgModule({\n    imports: [ClarityModule, CommonModule, I18nModule],\n    declarations: [ActionMenuComponent],\n    providers: [],\n    exports: [ActionMenuComponent],\n})\nexport class VcdActionMenuModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdActivityReporterModule.html":{"url":"modules/VcdActivityReporterModule.html","title":"module - VcdActivityReporterModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdActivityReporterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdActivityReporterModule\n\n\n\ncluster_VcdActivityReporterModule_declarations\n\n\n\ncluster_VcdActivityReporterModule_imports\n\n\n\ncluster_VcdActivityReporterModule_exports\n\n\n\n\nBannerActivityReporterComponent\n\nBannerActivityReporterComponent\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule -->\n\nBannerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nSpinnerActivityReporterComponent\n\nSpinnerActivityReporterComponent\n\nVcdActivityReporterModule -->\n\nSpinnerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent  -->\n\nVcdActivityReporterModule->BannerActivityReporterComponent \n\n\n\n\n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent  -->\n\nVcdActivityReporterModule->SpinnerActivityReporterComponent \n\n\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdActivityReporterModule -->\n\nVcdErrorBannerModule->VcdActivityReporterModule\n\n\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdActivityReporterModule -->\n\nVcdLoadingIndicatorModule->VcdActivityReporterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/activity-reporter/activity-reporter.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            VcdErrorBannerModule\n                        \n                        \n                            VcdLoadingIndicatorModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BannerActivityReporterComponent\n                        \n                        \n                            SpinnerActivityReporterComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { VcdErrorBannerModule } from '../error/error-banner.module';\nimport { VcdLoadingIndicatorModule } from '../loading/loading-indicator.module';\nimport { BannerActivityReporterComponent } from './banner-activity-reporter.component';\nimport { SpinnerActivityReporterComponent } from './spinner-activity-reporter.component';\n\n@NgModule({\n    declarations: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n    imports: [CommonModule, ClarityModule, I18nModule, VcdErrorBannerModule, VcdLoadingIndicatorModule],\n    exports: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n    entryComponents: [BannerActivityReporterComponent, SpinnerActivityReporterComponent],\n})\nexport class VcdActivityReporterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdComponentsModule.html":{"url":"modules/VcdComponentsModule.html","title":"module - VcdComponentsModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdComponentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdComponentsModule\n\n\n\ncluster_VcdComponentsModule_exports\n\n\n\n\nShowClippedTextDirectiveModule \n\nShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule \n\nSpotlightSearchModule \n\n\n\nVcdActivityReporterModule \n\nVcdActivityReporterModule \n\n\n\nVcdDataExporterModule \n\nVcdDataExporterModule \n\n\n\nVcdDatagridModule \n\nVcdDatagridModule \n\n\n\nVcdErrorBannerModule \n\nVcdErrorBannerModule \n\n\n\nVcdFormModule \n\nVcdFormModule \n\n\n\nVcdLoadingIndicatorModule \n\nVcdLoadingIndicatorModule \n\n\n\nVcdComponentsModule\n\nVcdComponentsModule\n\nShowClippedTextDirectiveModule  -->\n\nVcdComponentsModule->ShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule  -->\n\nVcdComponentsModule->SpotlightSearchModule \n\n\n\nVcdActivityReporterModule  -->\n\nVcdComponentsModule->VcdActivityReporterModule \n\n\n\nVcdDataExporterModule  -->\n\nVcdComponentsModule->VcdDataExporterModule \n\n\n\nVcdDatagridModule  -->\n\nVcdComponentsModule->VcdDatagridModule \n\n\n\nVcdErrorBannerModule  -->\n\nVcdComponentsModule->VcdErrorBannerModule \n\n\n\nVcdFormModule  -->\n\nVcdComponentsModule->VcdFormModule \n\n\n\nVcdLoadingIndicatorModule  -->\n\nVcdComponentsModule->VcdLoadingIndicatorModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/components.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                        \n                            SpotlightSearchModule\n                        \n                        \n                            VcdActivityReporterModule\n                        \n                        \n                            VcdDataExporterModule\n                        \n                        \n                            VcdDatagridModule\n                        \n                        \n                            VcdErrorBannerModule\n                        \n                        \n                            VcdFormModule\n                        \n                        \n                            VcdLoadingIndicatorModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { VcdActivityReporterModule } from './common/activity-reporter/activity-reporter.module';\nimport { VcdErrorBannerModule } from './common/error/error-banner.module';\nimport { VcdLoadingIndicatorModule } from './common/loading/loading-indicator.module';\nimport { VcdDataExporterModule } from './data-exporter/data-exporter.module';\nimport { VcdDatagridModule } from './datagrid/datagrid.module';\nimport { VcdFormModule } from './form/form.module';\nimport { ShowClippedTextDirectiveModule } from './lib/directives/show-clipped-text.directive.module';\nimport { SpotlightSearchModule } from './spotlight-search/spotlight-search.module';\n\n@NgModule({\n    exports: [\n        VcdDataExporterModule,\n        VcdDatagridModule,\n        ShowClippedTextDirectiveModule,\n        VcdErrorBannerModule,\n        VcdLoadingIndicatorModule,\n        VcdActivityReporterModule,\n        VcdFormModule,\n        SpotlightSearchModule,\n    ],\n})\nexport class VcdComponentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdDataExporterModule.html":{"url":"modules/VcdDataExporterModule.html","title":"module - VcdDataExporterModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdDataExporterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdDataExporterModule\n\n\n\ncluster_VcdDataExporterModule_declarations\n\n\n\ncluster_VcdDataExporterModule_exports\n\n\n\n\nDataExporterComponent\n\nDataExporterComponent\n\n\n\nVcdDataExporterModule\n\nVcdDataExporterModule\n\nVcdDataExporterModule -->\n\nDataExporterComponent->VcdDataExporterModule\n\n\n\n\n\nDataExporterComponent \n\nDataExporterComponent \n\nDataExporterComponent  -->\n\nVcdDataExporterModule->DataExporterComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/data-exporter/data-exporter.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DataExporterComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DataExporterComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { DataExporterComponent } from './data-exporter.component';\n\n@NgModule({\n    declarations: [DataExporterComponent],\n    imports: [CommonModule, ReactiveFormsModule, ClarityModule, I18nModule],\n    exports: [DataExporterComponent],\n})\nexport class VcdDataExporterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdDatagridModule.html":{"url":"modules/VcdDatagridModule.html","title":"module - VcdDatagridModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdDatagridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdDatagridModule\n\n\n\ncluster_VcdDatagridModule_declarations\n\n\n\ncluster_VcdDatagridModule_imports\n\n\n\ncluster_VcdDatagridModule_exports\n\n\n\n\nBoldTextRendererComponent\n\nBoldTextRendererComponent\n\n\n\nVcdDatagridModule\n\nVcdDatagridModule\n\nVcdDatagridModule -->\n\nBoldTextRendererComponent->VcdDatagridModule\n\n\n\n\n\nComponentRendererOutletDirective\n\nComponentRendererOutletDirective\n\nVcdDatagridModule -->\n\nComponentRendererOutletDirective->VcdDatagridModule\n\n\n\n\n\nDatagridComponent\n\nDatagridComponent\n\nVcdDatagridModule -->\n\nDatagridComponent->VcdDatagridModule\n\n\n\n\n\nDatagridMultiSelectFilterComponent\n\nDatagridMultiSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridMultiSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridNumericFilterComponent\n\nDatagridNumericFilterComponent\n\nVcdDatagridModule -->\n\nDatagridNumericFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridSelectFilterComponent\n\nDatagridSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridStringFilterComponent\n\nDatagridStringFilterComponent\n\nVcdDatagridModule -->\n\nDatagridStringFilterComponent->VcdDatagridModule\n\n\n\n\n\nFunctionRendererPipe\n\nFunctionRendererPipe\n\nVcdDatagridModule -->\n\nFunctionRendererPipe->VcdDatagridModule\n\n\n\n\n\nBoldTextRendererComponent \n\nBoldTextRendererComponent \n\nBoldTextRendererComponent  -->\n\nVcdDatagridModule->BoldTextRendererComponent \n\n\n\n\n\nDatagridComponent \n\nDatagridComponent \n\nDatagridComponent  -->\n\nVcdDatagridModule->DatagridComponent \n\n\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nVcdDatagridModule -->\n\nShowClippedTextDirectiveModule->VcdDatagridModule\n\n\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdDatagridModule -->\n\nVcdActivityReporterModule->VcdDatagridModule\n\n\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nVcdDatagridModule -->\n\nVcdFormModule->VcdDatagridModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/datagrid/datagrid.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BoldTextRendererComponent\n                        \n                        \n                            ComponentRendererOutletDirective\n                        \n                        \n                            DatagridComponent\n                        \n                        \n                            DatagridMultiSelectFilterComponent\n                        \n                        \n                            DatagridNumericFilterComponent\n                        \n                        \n                            DatagridSelectFilterComponent\n                        \n                        \n                            DatagridStringFilterComponent\n                        \n                        \n                            FunctionRendererPipe\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            filters\n                        \n                        \n                            renderers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ShowClippedTextDirectiveModule\n                        \n                        \n                            VcdActivityReporterModule\n                        \n                        \n                            VcdFormModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BoldTextRendererComponent\n                        \n                        \n                            DatagridComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { VcdActivityReporterModule } from '../common/activity-reporter/activity-reporter.module';\nimport { PipesModule } from '../common/pipes/pipes.module';\nimport { VcdFormModule } from '../form/form.module';\nimport { ShowClippedTextDirectiveModule } from '../lib/directives/show-clipped-text.directive.module';\nimport { DatagridComponent } from './datagrid.component';\nimport { ComponentRendererOutletDirective } from './directives/component-renderer-outlet.directive';\nimport { DatagridMultiSelectFilterComponent } from './filters/datagrid-multiselect-filter.component';\nimport { DatagridNumericFilterComponent } from './filters/datagrid-numeric-filter.component';\nimport { DatagridSelectFilterComponent } from './filters/datagrid-select-filter.component';\nimport { DatagridStringFilterComponent } from './filters/datagrid-string-filter.component';\nimport { FunctionRendererPipe } from './pipes/function-renderer.pipe';\nimport { BoldTextRendererComponent } from './renderers/bold-text-renderer.component';\n\nconst directives = [ComponentRendererOutletDirective];\nconst pipes = [FunctionRendererPipe];\nconst renderers = [BoldTextRendererComponent];\nconst filters = [\n    DatagridNumericFilterComponent,\n    DatagridStringFilterComponent,\n    DatagridSelectFilterComponent,\n    DatagridMultiSelectFilterComponent,\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ClarityModule,\n        RouterModule,\n        PipesModule,\n        ReactiveFormsModule,\n        ShowClippedTextDirectiveModule,\n        FormsModule,\n        I18nModule,\n        VcdActivityReporterModule,\n        VcdFormModule,\n    ],\n    declarations: [DatagridComponent, ...directives, ...renderers, ...pipes, ...filters],\n    providers: [],\n    exports: [DatagridComponent, ...renderers],\n    entryComponents: [...renderers, ...filters],\n})\nexport class VcdDatagridModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VcdDatagridWidgetObject.html":{"url":"classes/VcdDatagridWidgetObject.html","title":"class - VcdDatagridWidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VcdDatagridWidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts\n        \n\n            \n                Description\n            \n            \n                Widget Object for our VCD DataGrid\n\n            \n\n            \n                Extends\n            \n            \n                        WidgetObject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tagName\n                            \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gridHeader\n                                \n                                \n                                    clrDatagrid\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            tagName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : `vcd-datagrid`\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                            \n                                \n                                    Inherited from         WidgetObject\n\n                                \n                            \n                        \n                            \n                                    Defined in         WidgetObject:42\n\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:73\n\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:54\n\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:62\n\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:127\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:115\n\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:123\n\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:87\n\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Inherited from         WidgetObject\n\n                \n            \n            \n                \n                        Defined in         WidgetObject:101\n\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gridHeader\n                    \n                \n\n                \n                    \n                        getgridHeader()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:19\n                                \n                            \n                    \n                        \n                                Gives the header above the grid.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        clrDatagrid\n                    \n                \n\n                \n                    \n                        getclrDatagrid()\n                    \n                \n                            \n                                \n                                    Defined in projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts:26\n                                \n                            \n                    \n                        \n                                Gives the widget object for this clr datagrid.\n\n\n                                \n                                    Returns :         ClrDatagridWidgetObject\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { WidgetObject } from '../widget-object';\nimport { DatagridComponent } from './../../../datagrid/datagrid.component';\nimport { ClrDatagridWidgetObject } from './datagrid.wo';\n\n/**\n * Widget Object for our VCD DataGrid\n */\nexport class VcdDatagridWidgetObject extends WidgetObject> {\n    static tagName = `vcd-datagrid`;\n\n    /**\n     * Gives the header above the grid.\n     */\n    get gridHeader(): string {\n        return this.getText('h3');\n    }\n\n    /**\n     * Gives the widget object for this clr datagrid.\n     */\n    get clrDatagrid(): ClrDatagridWidgetObject {\n        const constElement = this.findElement(ClrDatagridWidgetObject.tagName);\n        return new ClrDatagridWidgetObject(this.fixture, constElement, constElement.componentInstance);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdErrorBannerModule.html":{"url":"modules/VcdErrorBannerModule.html","title":"module - VcdErrorBannerModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdErrorBannerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdErrorBannerModule\n\n\n\ncluster_VcdErrorBannerModule_declarations\n\n\n\ncluster_VcdErrorBannerModule_exports\n\n\n\n\nErrorBannerComponent\n\nErrorBannerComponent\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule -->\n\nErrorBannerComponent->VcdErrorBannerModule\n\n\n\n\n\nErrorBannerComponent \n\nErrorBannerComponent \n\nErrorBannerComponent  -->\n\nVcdErrorBannerModule->ErrorBannerComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/error/error-banner.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ErrorBannerComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { ErrorBannerComponent } from './error-banner.component';\n\n@NgModule({\n    declarations: [ErrorBannerComponent],\n    imports: [CommonModule, ClarityModule, I18nModule],\n    exports: [ErrorBannerComponent],\n    entryComponents: [ErrorBannerComponent],\n})\nexport class VcdErrorBannerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdFormModule.html":{"url":"modules/VcdFormModule.html","title":"module - VcdFormModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdFormModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdFormModule\n\n\n\ncluster_VcdFormModule_declarations\n\n\n\ncluster_VcdFormModule_exports\n\n\n\ncluster_VcdFormModule_providers\n\n\n\n\nFormCheckboxComponent\n\nFormCheckboxComponent\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nVcdFormModule -->\n\nFormCheckboxComponent->VcdFormModule\n\n\n\n\n\nFormInputComponent\n\nFormInputComponent\n\nVcdFormModule -->\n\nFormInputComponent->VcdFormModule\n\n\n\n\n\nFormSelectComponent\n\nFormSelectComponent\n\nVcdFormModule -->\n\nFormSelectComponent->VcdFormModule\n\n\n\n\n\nMinMaxValidator\n\nMinMaxValidator\n\nVcdFormModule -->\n\nMinMaxValidator->VcdFormModule\n\n\n\n\n\nNumberWithUnitFormInputComponent\n\nNumberWithUnitFormInputComponent\n\nVcdFormModule -->\n\nNumberWithUnitFormInputComponent->VcdFormModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nVcdFormModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nVcdFormModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nVcdFormModule->FormSelectComponent \n\n\n\n\n\nMinMaxValidator \n\nMinMaxValidator \n\nMinMaxValidator  -->\n\nVcdFormModule->MinMaxValidator \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nVcdFormModule->NumberWithUnitFormInputComponent \n\n\n\n\n\nUnitFormatter\n\nUnitFormatter\n\nVcdFormModule -->\n\nUnitFormatter->VcdFormModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/form/form.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            MinMaxValidator\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            UnitFormatter\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FormCheckboxComponent\n                        \n                        \n                            FormInputComponent\n                        \n                        \n                            FormSelectComponent\n                        \n                        \n                            MinMaxValidator\n                        \n                        \n                            NumberWithUnitFormInputComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { UnitFormatter } from '../utils/unit/unit-formatter';\nimport { FormCheckboxComponent } from './form-checkbox/form-checkbox.component';\nimport { FormInputComponent } from './form-input/form-input.component';\nimport { FormSelectComponent } from './form-select/form-select.component';\nimport {\n    MinMaxValidator,\n    NumberWithUnitFormInputComponent,\n} from './number-with-unit-input/number-with-unit-form-input.component';\n\nconst declarations = [\n    FormInputComponent,\n    FormSelectComponent,\n    FormCheckboxComponent,\n    NumberWithUnitFormInputComponent,\n    MinMaxValidator,\n];\n\n@NgModule({\n    imports: [ClarityModule, FormsModule, ReactiveFormsModule, CommonModule, I18nModule],\n    declarations,\n    providers: [UnitFormatter],\n    exports: [...declarations],\n})\nexport class VcdFormModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VcdLoadingIndicatorModule.html":{"url":"modules/VcdLoadingIndicatorModule.html","title":"module - VcdLoadingIndicatorModule","body":"\n                   \n\n\n\n\n    Modules\n    VcdLoadingIndicatorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VcdLoadingIndicatorModule\n\n\n\ncluster_VcdLoadingIndicatorModule_declarations\n\n\n\ncluster_VcdLoadingIndicatorModule_exports\n\n\n\n\nLoadingIndicatorComponent\n\nLoadingIndicatorComponent\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule -->\n\nLoadingIndicatorComponent->VcdLoadingIndicatorModule\n\n\n\n\n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent  -->\n\nVcdLoadingIndicatorModule->LoadingIndicatorComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/components/src/common/loading/loading-indicator.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LoadingIndicatorComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { I18nModule } from '@vcd/i18n';\nimport { LoadingIndicatorComponent } from './loading-indicator.component';\n\n@NgModule({\n    declarations: [LoadingIndicatorComponent],\n    imports: [CommonModule, ClarityModule, I18nModule],\n    exports: [LoadingIndicatorComponent],\n    entryComponents: [LoadingIndicatorComponent],\n})\nexport class VcdLoadingIndicatorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetFinder.html":{"url":"classes/WidgetFinder.html","title":"class - WidgetFinder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetFinder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                Finds instances that implement FindableWidget\nH is the host component's type\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixture\n                            \n                            \n                                    Public\n                                hostComponent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                detectChanges\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                findWidgets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(componentConstructor: Type)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object.ts:178\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        componentConstructor\n                                                  \n                                                        \n                                                                    Type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The host component to be created as the root of the tests's fixture\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ComponentFixture\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:173\n                            \n                        \n\n                \n                    \n                        We don't care or could possibly know the type of fixture\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hostComponent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     H\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:178\n                            \n                        \n\n                \n                    \n                        If you need direct access to manipulate the host\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    detectChanges()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(params: FindParams | T)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:217\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                        T\n                    \n                \n            \n\n            \n                \n                    Finds a single widget object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                FindParams | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findWidgets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findWidgets(params: FindParams | T, parent?: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:192\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                        T\n                    \n                \n            \n\n            \n                \n                    Finds widgets within a fixture\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                FindParams | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType[]\n\n                    \n                    \n                        A Potentially empty list of widgets matching the given specs\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type> {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\ninterface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nfunction isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetObject.html":{"url":"classes/WidgetObject.html","title":"class - WidgetObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/components/src/utils/test/widget-object.ts\n        \n\n            \n                Description\n            \n            \n                An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\nThe main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\nqueries the internals of a component from a test.\nSubclass Rules\n\nMethods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\ncallers to query it from the outside creating potential duplicate querying code and abstraction leaks.\nSubclasses also should not have testing assertions. They should only provide the state and the calling test can\nassert code on its own.\n\n\n\nT is the type of the JS/TS object being wrapped\nIt is recommended that files for implementations be named with a .wo.ts extension\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                click\n                            \n                            \n                                detectChanges\n                            \n                            \n                                    Protected\n                                findElement\n                            \n                            \n                                    Protected\n                                findElements\n                            \n                            \n                                    Protected\n                                getNodeText\n                            \n                            \n                                    Protected\n                                getText\n                            \n                            \n                                    Protected\n                                getTexts\n                            \n                            \n                                    Protected\n                                sendKeyboardEvent\n                            \n                            \n                                    Protected\n                                setInputValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fixture: ComponentFixture, root: DebugElement, component: T)\n                    \n                \n                        \n                            \n                                Defined in projects/components/src/utils/test/widget-object.ts:27\n                            \n                        \n\n                \n                    \n                            Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\nneed to find a widget within the tree, you should use find.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fixture\n                                                  \n                                                        \n                                                                    ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The test fixture, so we can call {\n\n                                                        \n                                                \n                                                \n                                                        root\n                                                  \n                                                        \n                                                                        DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The root element (host) for the component instance. We typically prefer to interact with the\ncomponent but there are times when we must check the DOM.\n\n                                                        \n                                                \n                                                \n                                                        component\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The component instance being managed. Whenever possible, we should access the component's API.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                    \n                        \n                            Default value : fixture.componentInstance\n                        \n                    \n                        \n                            \n                                    Defined in projects/components/src/utils/test/widget-object.ts:42\n                            \n                        \n\n                \n                    \n                        The component instance being managed. Whenever possible, we should access the component's API.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    click(cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:73\n                \n            \n\n\n            \n                \n                    Clicks an element and detects changes so the DOM is immediately updated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to click a specific element. If not passed in, the entire node will\nreceive the click event\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            detectChanges\n                        \n                        \n                    \n                \n            \n            \n                \ndetectChanges()\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElement(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:54\n                \n            \n\n\n            \n                \n                    Finds first element within this widget matching the given selector\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        What to search for\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DebugElement\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            findElements\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findElements(selector: string | Type, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:62\n                \n            \n\n\n            \n                \n                    Same as findElement but returns all elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                            string | Type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DebugElement[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getNodeText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeText(el: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getText\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(cssSelector: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:115\n                \n            \n\n\n            \n                \n                    Returns text content of this widget\nIf the element cannot be found, gives empty string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want to retrieve text for a specific element within this widget.\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        Where to start the search; defaults to the root of this component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getTexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTexts(cssSelector: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:123\n                \n            \n\n\n            \n                \n                    Same as getText but return the text for all matching nodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            sendKeyboardEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:87\n                \n            \n\n\n            \n                \n                    Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\nThe keyboard event consists of keydow\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the key, for example Enter, Escape, ArrowUp etc.\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            setInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputValue(value: string | number, cssSelector?: string, parent: DebugElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/components/src/utils/test/widget-object.ts:101\n                \n            \n\n\n            \n                \n                    Sets the value of an input element or textarea element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        the value that the element should display\n\n                                    \n                                \n                                \n                                    cssSelector\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pass this in if you want trigger the event on a specific element.\nIf not passed in, the event will be triggered on the entire node\n\n                                    \n                                \n                                \n                                    parent\n                                    \n                                                DebugElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.root\n                                    \n\n                                    \n                                        the parent element for which to search for the {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DebugElement, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n/**\n * An implementation of the page object pattern, but applied to widgets, since they can be reused on multiple pages.\n *\n * The main purpose for the wrapper are providing access to the internals of a widget avoiding duplication of code that\n * queries the internals of a component from a test.\n *\n * ## Subclass Rules\n *\n * - Methods exposed by subclasses should not expose HTMLElements or DebugElements directly. That would encourage\n * callers to query it from the outside creating potential duplicate querying code and abstraction leaks.\n *  - Subclasses also should not have testing assertions. They should only provide the state and the calling test can\n * assert code on its own.\n *\n * `T` is the type of the JS/TS object being wrapped\n *\n * It is recommended that files for implementations be named with a `.wo.ts` extension\n */\nexport abstract class WidgetObject {\n    /**\n     *\n     * Constructor should only be called directly if you are directly instantiating the widget being wrapped (T). If you\n     * need to find a widget within the tree, you should use {@link find}.\n     *\n     * @param component The component instance being managed. Whenever possible, we should access the component's API.\n     * @param root The root element (host) for the component instance. We typically prefer to interact with the\n     * component but there are times when we must check the DOM.\n     * @param fixture The test fixture, so we can call {@link ComponentFixture#detectChanges} after something that\n     * requires re-rendering of the DOM.\n     */\n    constructor(\n        protected fixture: ComponentFixture,\n        protected root: DebugElement = fixture.debugElement,\n        public component: T = fixture.componentInstance\n    ) {}\n\n    detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n\n    /**\n     * Finds first element within this widget matching the given selector\n     * @param selector What to search for\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n    protected findElement(selector: string | Type, parent: DebugElement = this.root): DebugElement {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.query(query);\n    }\n\n    /**\n     * Same as {@link findElement} but returns all elements\n     */\n    protected findElements(selector: string | Type, parent: DebugElement = this.root): DebugElement[] {\n        const query = typeof selector === 'string' ? By.css(selector) : By.directive(selector);\n        return parent.queryAll(query);\n    }\n\n    /**\n     * Clicks an element and detects changes so the DOM is immediately updated\n     * @param cssSelector Pass this in if you want to click a specific element. If not passed in, the entire node will\n     * receive the click event\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected click(cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.click();\n        this.detectChanges();\n    }\n\n    /**\n     * Sends a keyboard event defined by the key to an element and detects changes so the DOM is immediately updated.\n     * The keyboard event consists of keydow\n     * @param key the key, for example Enter, Escape, ArrowUp etc.\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected sendKeyboardEvent(key: string, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLBaseElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.dispatchEvent(new KeyboardEvent('keydown', { key, bubbles: true }));\n        nativeElement.dispatchEvent(new KeyboardEvent('keyup', { key, bubbles: true }));\n        this.detectChanges();\n    }\n\n    /**\n     * Sets the value of an input element or textarea element\n     * @param value the value that the element should display\n     * @param cssSelector Pass this in if you want trigger the event on a specific element.\n     *        If not passed in, the event will be triggered on the entire node\n     * @param parent the parent element for which to search for the {@param cssSelector} within. Defaults to root if not provided.\n     */\n    protected setInputValue(value: string | number, cssSelector?: string, parent: DebugElement = this.root): void {\n        const nativeElement: HTMLInputElement | HTMLTextAreaElement = parent.query(By.css(cssSelector)).nativeElement;\n        nativeElement.value = String(value);\n        nativeElement.dispatchEvent(new Event('input'));\n        this.detectChanges();\n    }\n\n    /**\n     * Returns text content of this widget\n     * If the element cannot be found, gives empty string.\n     * @param cssSelector Pass this in if you want to retrieve text for a specific element within this widget.\n     * @param parent Where to start the search; defaults to the root of this component\n     */\n\n    protected getText(cssSelector: string, parent: DebugElement = this.root): string {\n        const element = this.findElement(cssSelector, parent);\n        return element ? this.getNodeText(element) : '';\n    }\n\n    /**\n     * Same as {@link getText} but return the text for all matching nodes\n     */\n    protected getTexts(cssSelector: string): string[] {\n        return this.findElements(cssSelector).map(el => this.getNodeText(el));\n    }\n\n    protected getNodeText(el: DebugElement): string {\n        // The || '' is because textContent could technically be null when passed in the document\n        // element object. We know that cannot be pased in here, so we ignore it for coverage\n        // but we still need the line there to make strictNullChecks work\n        return el.nativeElement.textContent.trim() || /* istanbul ignore next */ '';\n    }\n}\n\n/**\n * Subclasses should implement the FindableWidget interface so they can be found with {@link WidgetFinder}\n *\n * ## Note\n * This is done by creating a static property `tagName`on your subclass, not a regular instance, since this\n * interface represents a constructor for a {@link WidgetObject}, not an instance.\n */\nexport interface FindableWidget extends Type> {\n    tagName: string;\n}\n\n/**\n * Arguments for {@link WidgetFinder#findWidgets} and {@link WidgetFinder#find}\n */\ninterface FindParams {\n    /**\n     * The constructor of the widget to be found\n     */\n    woConstructor: T;\n    /**\n     * If provided, search starts from this container. It defaults to the fixture's root debugElement\n     */\n    ancestor?: DebugElement;\n    /**\n     * Optional CSS class name that can be used when there could be multiple instances of the object within the\n     * fixture tree\n     */\n    className?: string;\n}\n\n/**\n * Finds instances that implement {@link FindableWidget}\n * H is the host component's type\n */\nexport class WidgetFinder {\n    /**\n     * We don't care or could possibly know the type of fixture\n     */\n    private fixture: ComponentFixture;\n\n    /**\n     * If you need direct access to manipulate the host\n     */\n    public hostComponent: H;\n\n    /**\n     * @param componentConstructor The host component to be created as the root of the tests's fixture\n     */\n    constructor(componentConstructor: Type) {\n        this.fixture = TestBed.createComponent(componentConstructor);\n        this.hostComponent = this.fixture.componentInstance;\n    }\n\n    /**\n     * Finds widgets within a fixture\n     * @return A Potentially empty list of widgets matching the given specs\n     */\n    public findWidgets>(\n        params: FindParams | T,\n        parent?: DebugElement\n    ): InstanceType[] {\n        const defaults = { ancestor: this.fixture.debugElement, className: '' };\n        const { woConstructor, ancestor, className } = isFindParamsObject(params)\n            ? { ...defaults, ...params }\n            : { ...defaults, woConstructor: params };\n\n        let query = woConstructor.tagName;\n        if (className) {\n            query += `.${className}`;\n        }\n        const componentRoots = (parent ? parent : ancestor).queryAll(By.css(query));\n        const widgets = componentRoots.map(\n            // Typescript is not able to infer it correctly as the subclass but we know for sure\n            root => new woConstructor(this.fixture, root, root.componentInstance) as InstanceType\n        );\n        return widgets;\n    }\n\n    /**\n     * Finds a single widget object\n     * @throws An error if the widget is not found or if there are multiple instances\n     */\n    public find>(params: FindParams | T): InstanceType {\n        const widgets = this.findWidgets(params);\n        const tagName = isFindParamsObject(params) ? params.woConstructor.tagName : params.tagName;\n        if (widgets.length === 0) {\n            throw Error(`Did not find a `);\n        }\n        if (widgets.length > 1) {\n            throw Error(`Expected to find a single  but found ${widgets.length}`);\n        }\n        return widgets[0] as InstanceType;\n    }\n\n    public detectChanges(): void {\n        this.fixture.detectChanges();\n    }\n}\n\nfunction isFindParamsObject(params: FindParams | T): params is FindParams {\n    return !!(params as FindParams).woConstructor;\n}\n/**\n * Can be used in tests that use `this` to share a finder with before/AfterEach instead of leaky closures\n */\nexport interface HasFinder {\n    finder: WidgetFinder;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing to vcd-ui-common\nThe vcd-ui-common project team welcomes contributions from the community. Before you start working with vcd-ui-common, please\nread our Developer Certificate of Origin. All contributions to this repository must be\nsigned as described on that page. Your signature certifies that you wrote the patch or have the right to pass it on\nas an open-source patch.\nContribution Flow\nThis is a rough outline of what a contributor's workflow looks like:\n\nCreate a topic branch from where you want to base your work\nMake commits of logical units\nMake sure your commit messages are in the proper format (see below)\nPush your changes to a topic branch in your fork of the repository\nSubmit a pull request\n\nContribution Requirements\n\nPublic/exported members must be documented using tsdoc\n\nEvery commit must contain unit tests, striving for full coverage. If full coverage cannot be achieved, the Pull\nRequest should explain why tests could not be written.\n\nDescriptive Pull Requests:\n\nInclude list of steps for manual testing\nExplain alternatives that were considered\nFor bug fixes, explain what was causing the issue, don't repeat the text from the issue\n\n\n\nMerge vs fast-forward\nPRs with single commits should use --fast-forward. Otherwise, pull requests should be merge commits.\nStaying In Sync With Upstream\nWhen your branch gets out of sync with the vmware/master branch, use the following to update:\ngit checkout my-new-feature\ngit fetch -a\ngit pull --rebase upstream master\ngit push --force-with-lease origin my-new-featureUpdating pull requests\nIf your PR fails to pass CI or needs changes based on code review, you'll most likely want to squash these changes into\nexisting commits.\nIf your pull request contains a single commit or your changes are related to the most recent commit, you can simply\namend the commit.\ngit add .\ngit commit --amend\ngit push --force-with-lease origin my-new-featureIf you need to squash changes into an earlier commit, you can use:\ngit add .\ngit commit --fixup \ngit rebase -i --autosquash master\ngit push --force-with-lease origin my-new-featureBe sure to add a comment to the PR indicating your new changes are ready to review, as GitHub does not generate a\nnotification when you git push.\nCode Style\nFormatting Commit Messages\nWe follow the conventions on How to Write a Git Commit Message.\nBe sure to include any related GitHub issue references in the commit message. See\nGFM syntax for referencing issues\nand commits.\nReporting Bugs and Creating Issues\nWhen opening a new issue, try to roughly follow the commit message format conventions above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/components/src/action-menu/action-menu.component.ts\n            \n            component\n            ActionMenuComponent\n            \n                78 %\n                (15/19)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n            \n            class\n            ActivityPromiseResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n            \n            interface\n            ActivityResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-promise-resolver.ts\n            \n            interface\n            ObjectAndResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/activity-reporter.ts\n            \n            class\n            ActivityReporter\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/banner-activity-reporter.component.ts\n            \n            component\n            BannerActivityReporterComponent\n            \n                66 %\n                (12/18)\n            \n        \n        \n            \n                \n                projects/components/src/common/activity-reporter/spinner-activity-reporter.component.ts\n            \n            component\n            SpinnerActivityReporterComponent\n            \n                84 %\n                (11/13)\n            \n        \n        \n            \n                \n                projects/components/src/common/error/error-banner.component.ts\n            \n            component\n            ErrorBannerComponent\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                projects/components/src/common/interfaces/action-item.interface.ts\n            \n            interface\n            ActionDisplayConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/common/interfaces/action-item.interface.ts\n            \n            interface\n            ActionItem\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                projects/components/src/common/interfaces/select-option.ts\n            \n            interface\n            SelectOption\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/common/loading/loading-indicator.component.ts\n            \n            component\n            LoadingIndicatorComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            pipe\n            NestedPropertyPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            function\n            isNullOrUndefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            variable\n            DATE_OBJECT_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/nested-property.pipe.ts\n            \n            variable\n            OBJECT_PROPERTY_SEPARATOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/pipes/pipes.module.ts\n            \n            variable\n            declarations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/common/subscription/subscription-tracker.ts\n            \n            class\n            SubscriptionTracker\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                projects/components/src/common/subscription/subscription-tracker.ts\n            \n            interface\n            ISubscriptionTracker\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            injectable\n            CsvExporterService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            encodeValue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            hasPotentialInjection\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            processRow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            function\n            sanitizeString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/csv-exporter.service.ts\n            \n            variable\n            LEADING_CONTROL_CHAR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.component.ts\n            \n            component\n            DataExporterComponent\n            \n                58 %\n                (23/39)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.component.ts\n            \n            interface\n            DataExportRequestEvent\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.component.ts\n            \n            interface\n            ExportColumn\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/data-exporter/data-exporter.wo.ts\n            \n            class\n            DataExporterWidgetObject\n            \n                82 %\n                (14/17)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            component\n            DatagridComponent\n            \n                75 %\n                (60/80)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            ColumnConfigInternal\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            DetailPane\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            DetailPaneConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            DetailRowConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            GridDataFetchResult\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            GridState\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            PaginationCallback\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            PaginationConfiguration\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            PagionationInformation\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            interface\n            SortedColumn\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            DEFAULT_PAGINATION_TRANSLATION_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            DEFAULT_SIZE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            DEFAULT_SIZE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            MAX_HEADER_HEIGHT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.component.ts\n            \n            variable\n            ROW_HEIGHT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            directives\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            filters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            pipes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/datagrid.module.ts\n            \n            variable\n            renderers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/directives/component-renderer-outlet.directive.ts\n            \n            directive\n            ComponentRendererOutletDirective\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            class\n            DatagridFilter\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            interface\n            FilterConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            interface\n            FilterRendererSpec\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            function\n            FilterComponentRendererSpec\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-filter.ts\n            \n            variable\n            DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            component\n            DatagridMultiSelectFilterComponent\n            \n                50 %\n                (12/24)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            interface\n            DatagridMultiSelectFilterConfig\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            interface\n            MultiSelectOption\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            interface\n            MultiSelectOptionInternal\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            function\n            DatagridMultiSelectFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n            \n            variable\n            idGenerator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n            \n            component\n            DatagridNumericFilterComponent\n            \n                36 %\n                (11/30)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n            \n            interface\n            DatagridNumericFilterConfig\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n            \n            function\n            DatagridNumericFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n            \n            component\n            DatagridSelectFilterComponent\n            \n                47 %\n                (11/23)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n            \n            interface\n            DatagridSelectFilterConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n            \n            function\n            DatagridSelectFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n            \n            component\n            DatagridStringFilterComponent\n            \n                45 %\n                (10/22)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n            \n            interface\n            DatagridStringFilterConfig\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n            \n            function\n            DatagridStringFilter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n            \n            interface\n            ComponentRenderer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n            \n            interface\n            ComponentRendererSpec\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            Button\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ButtonConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ColumnRendererSpec\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ContextualButton\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            ContextualButtonConfig\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            FunctionRenderer\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            GlobalButton\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            interface\n            GridColumn\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n            \n            function\n            ColumnComponentRendererSpec\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/mock-data.ts\n            \n            interface\n            MockRecord\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/mock-data.ts\n            \n            variable\n            mockData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/pipes/function-renderer.pipe.ts\n            \n            pipe\n            FunctionRendererPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n            \n            component\n            BoldTextRendererComponent\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n            \n            interface\n            BoldTextRendererConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n            \n            function\n            BoldTextRenderer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n            \n            class\n            BoldTextRendererWidgetObject\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n            \n            function\n            WithGridBoldRenderer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/base-form-control.ts\n            \n            class\n            BaseFormControl\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                projects/components/src/form/base-form-control.ts\n            \n            variable\n            idGenerator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-checkbox/form-checkbox.component.ts\n            \n            component\n            FormCheckboxComponent\n            \n                76 %\n                (16/21)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-input/form-input.component.ts\n            \n            component\n            FormInputComponent\n            \n                77 %\n                (24/31)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-input/form-input.component.ts\n            \n            function\n            getFormattedDateValue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-input/form-input.component.ts\n            \n            function\n            pad\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/form-select/form-select.component.ts\n            \n            component\n            FormSelectComponent\n            \n                72 %\n                (13/18)\n            \n        \n        \n            \n                \n                projects/components/src/form/form.module.ts\n            \n            variable\n            declarations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/interfaces/can-be-read-only.interface.ts\n            \n            interface\n            CanBeReadOnly\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n            \n            component\n            NumberWithUnitFormInputComponent\n            \n                59 %\n                (25/42)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n            \n            directive\n            MinMaxValidator\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n            \n            variable\n            UNLIMITED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/form/number-with-unit-input/number-with-unit-form-input.widget-object.ts\n            \n            class\n            NumberWithUnitFormInputWidgetObject\n            \n                52 %\n                (9/17)\n            \n        \n        \n            \n                \n                projects/components/src/form/validators.ts\n            \n            class\n            FormValidators\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n            \n            component\n            ShowClippedTextDirectiveTestHostComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.test-helper.ts\n            \n            class\n            ShowClippedTextDirectiveTestHelper\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            directive\n            ShowClippedTextDirective\n            \n                20 %\n                (3/15)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            interface\n            CliptextConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            function\n            setStyle\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            function\n            unwatchEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            function\n            watchEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            variable\n            fireTipTransitionEndForTests\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/lib/directives/show-clipped-text.directive.ts\n            \n            variable\n            tip\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search-result.ts\n            \n            interface\n            SpotlightSearchResult\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.component.ts\n            \n            component\n            SpotlightSearchComponent\n            \n                31 %\n                (7/22)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.component.ts\n            \n            interface\n            SearchSection\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.provider.ts\n            \n            interface\n            SpotlightSearchProvider\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            injectable\n            SpotlightSearchService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            interface\n            InternalRegistrationData\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            interface\n            RegisteredProviders\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/components/src/spotlight-search/spotlight-search.service.ts\n            \n            variable\n            createId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/common-util.ts\n            \n            class\n            CommonUtil\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/utils/filter-builder.ts\n            \n            class\n            FilterBuilder\n            \n                70 %\n                (17/24)\n            \n        \n        \n            \n                \n                projects/components/src/utils/filter-builder.ts\n            \n            variable\n            Operators\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/id-generator/id-generator.ts\n            \n            class\n            IdGenerator\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/activity-reporter/banner-activity-reporter.wo.ts\n            \n            class\n            BannerActivityReporterWidgetObject\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/activity-reporter/spinner-activity-reporter.wo.ts\n            \n            class\n            SpinnerActivityReporterWidgetObject\n            \n                64 %\n                (9/14)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            class\n            ClrDatagridWidgetObject\n            \n                90 %\n                (37/41)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            CELL_TAG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            COLUMN_CSS_SELECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            COLUMN_SELECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            FILTER_SELECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/datagrid.wo.ts\n            \n            variable\n            ROW_TAG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            component\n            FilterTestHostComponent\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            function\n            configureTestingModule\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            function\n            createDatagridFilterTestHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/filter-utils.ts\n            \n            function\n            createDatagridFilterTestHelperWithFinder\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/datagrid/vcd-datagrid.wo.ts\n            \n            class\n            VcdDatagridWidgetObject\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            class\n            WidgetFinder\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            class\n            WidgetObject\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            interface\n            FindableWidget\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            interface\n            FindParams\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            interface\n            HasFinder\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/components/src/utils/test/widget-object.ts\n            \n            function\n            isFindParamsObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit-formatter.ts\n            \n            injectable\n            UnitFormatter\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Bytes\n            \n                34 %\n                (11/32)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Hertz\n            \n                34 %\n                (11/32)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Percent\n            \n                44 %\n                (8/18)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            ThousandsUnit\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                projects/components/src/utils/unit/unit.ts\n            \n            class\n            Unit\n            \n                54 %\n                (6/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 9.1.9\n        \n            @angular/common : 9.1.9\n        \n            @angular/compiler : 9.1.9\n        \n            @angular/core : 9.1.9\n        \n            @angular/forms : 9.1.9\n        \n            @angular/platform-browser : 9.1.9\n        \n            @angular/platform-browser-dynamic : 9.1.9\n        \n            @angular/router : 9.1.9\n        \n            @clr/angular : 3.1.3\n        \n            @clr/core : 3.1.3\n        \n            @clr/icons : 3.1.3\n        \n            @clr/ui : 3.1.3\n        \n            @stackblitz/sdk : 1.3.0\n        \n            @vmw/ng-live-docs : 0.0.6\n        \n            @vmw/plain-js-live-docs : 0.0.2\n        \n            @webcomponents/webcomponentsjs : 2.0.0\n        \n            @wessberg/ts-evaluator : 0.0.25\n        \n            angular-cli-ghpages : 0.6.2\n        \n            classlist.js : 1.1.20150312\n        \n            codecov.io : 0.1.6\n        \n            karma-coverage : 2.0.2\n        \n            lit-html : 1.1.2\n        \n            messageformat : 1.0.2\n        \n            mousetrap : 1.6.5\n        \n            prismjs : 1.17.1\n        \n            properties : 1.2.1\n        \n            rbradford-compodoc : 1.1.11\n        \n            rxjs : 6.5.5\n        \n            tsickle : 0.38.1\n        \n            tslib : 1.10.0\n        \n            zone.js : 0.10.2\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/animations : 9.*\n        \n            @angular/common : 9.*\n        \n            @angular/compiler : 9.*\n        \n            @angular/core : 9.*\n        \n            @angular/forms : 9.*\n        \n            @angular/platform-browser : 9.*\n        \n            @angular/platform-browser-dynamic : 9.*\n        \n            @angular/router : 9.*\n        \n            @clr/angular : 3.*\n        \n            @clr/ui : 3.*\n        \n            @clr/icons : 3.*\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionStyling   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ActionType   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ActivityIndicatorType   (projects/.../datagrid.component.ts)\n                        \n                        \n                            CheckBoxStyling   (projects/.../form-checkbox.component.ts)\n                        \n                        \n                            ContextualButtonPosition   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            FormFields   (projects/.../datagrid-numeric-filter.component.ts)\n                        \n                        \n                            GridColumnHideable   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            GridSelectionType   (projects/.../datagrid.component.ts)\n                        \n                        \n                            InactiveButtonDisplayMode   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            SIZES   (projects/.../loading-indicator.component.ts)\n                        \n                        \n                            TextIcon   (projects/.../action-item.interface.ts)\n                        \n                        \n                            TooltipPosition   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            TooltipSize   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            UserOptions   (projects/.../data-exporter.component.ts)\n                        \n                        \n                            WildCardPosition   (projects/.../datagrid-string-filter.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/common/interfaces/action-item.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        ActionStyling\n                    \n                \n                    \n                        \n                            Display options for action menu\n\n                        \n                    \n                        \n                            \n                                 INLINE\n                            \n                        \n                        \n                            \n                                Value : INLINE\n                            \n                        \n                        \n                            \n                                 DROPDOWN\n                            \n                        \n                        \n                            \n                                Value : DROPDOWN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ActionType\n                    \n                \n                    \n                        \n                            List of different type of action buckets\n\n                        \n                    \n                        \n                            \n                                 STATIC_FEATURED\n                            \n                        \n                        \n                            \n                                Value : STATIC_FEATURED\n                            \n                        \n                        \n                            \n                                 CONTEXTUAL_FEATURED\n                            \n                        \n                        \n                            \n                                Value : CONTEXTUAL_FEATURED\n                            \n                        \n                        \n                            \n                                 CONTEXTUAL\n                            \n                        \n                        \n                            \n                                Value : CONTEXTUAL\n                            \n                        \n                        \n                            \n                                 STATIC\n                            \n                        \n                        \n                            \n                                Value : STATIC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TextIcon\n                    \n                \n                    \n                        \n                            An enum that describes the possible ways to display the button title.\n\n                        \n                    \n                        \n                            \n                                 ICON\n                            \n                        \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                 ICON_AND_TEXT\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/datagrid.component.ts\n    \n        \n            \n                \n                    \n                        \n                        ActivityIndicatorType\n                    \n                \n                    \n                        \n                            The types of activity indicators that can be displayed on top of the grid.\n\n                        \n                    \n                        \n                            \n                                 SPINNER\n                            \n                        \n                        \n                            \n                                 BANNER\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        GridSelectionType\n                    \n                \n                    \n                        \n                            Different types of row selection on the grid\n\n                        \n                    \n                        \n                            \n                                 Multi\n                            \n                        \n                        \n                            \n                                Value : MULTI\n                            \n                        \n                        \n                            \n                                 Single\n                            \n                        \n                        \n                            \n                                Value : SINGLE\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : NONE\n                            \n                        \n            \n        \n\n    projects/components/src/form/form-checkbox/form-checkbox.component.ts\n    \n        \n            \n                \n                    \n                        \n                        CheckBoxStyling\n                    \n                \n                        \n                            \n                                 CHECKBOX\n                            \n                        \n                        \n                            \n                                Value : checkbox\n                            \n                        \n                        \n                            \n                                 TOGGLESWITCH\n                            \n                        \n                        \n                            \n                                Value : toggle-switch\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        ContextualButtonPosition\n                    \n                \n                    \n                        \n                            An enum that describes where the contextual buttons should display.\n\n                        \n                    \n                        \n                            \n                                 TOP\n                            \n                        \n                        \n                            \n                                Value : TOP\n                            \n                        \n                        \n                            \n                                 ROW\n                            \n                        \n                        \n                            \n                                Value : ROW\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        GridColumnHideable\n                    \n                \n                        \n                            \n                                 Never\n                            \n                        \n                        \n                            \n                                Value : NEVER\n                            \n                        \n                        \n                            \n                                 Shown\n                            \n                        \n                        \n                            \n                                Value : SHOWN\n                            \n                        \n                        \n                            \n                                 Hidden\n                            \n                        \n                        \n                            \n                                Value : HIDDEN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        InactiveButtonDisplayMode\n                    \n                \n                    \n                        \n                            The ways buttons should be displayed when they are inactive.\n\n                        \n                    \n                        \n                            \n                                 Hide\n                            \n                        \n                        \n                            \n                                Value : HIDE\n                            \n                        \n                        \n                            \n                                 Disable\n                            \n                        \n                        \n                            \n                                Value : Disable\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        FormFields\n                    \n                \n                        \n                            \n                                 from\n                            \n                        \n                        \n                            \n                                Value : from\n                            \n                        \n                        \n                            \n                                 to\n                            \n                        \n                        \n                            \n                                Value : to\n                            \n                        \n            \n        \n\n    projects/components/src/common/loading/loading-indicator.component.ts\n    \n        \n            \n                \n                    \n                        \n                        SIZES\n                    \n                \n                        \n                            \n                                 sm\n                            \n                        \n                        \n                            \n                                Value : sm\n                            \n                        \n                        \n                            \n                                 md\n                            \n                        \n                        \n                            \n                                Value : md\n                            \n                        \n                        \n                            \n                                 lg\n                            \n                        \n                        \n                            \n                                Value : lg\n                            \n                        \n            \n        \n\n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        TooltipPosition\n                    \n                \n                        \n                            \n                                 tl\n                            \n                        \n                        \n                            \n                                Value : tooltip-top-left\n                            \n                        \n                        \n                            \n                                 tr\n                            \n                        \n                        \n                            \n                                Value : tooltip-top-right\n                            \n                        \n                        \n                            \n                                 br\n                            \n                        \n                        \n                            \n                                Value : tooltip-bottom-right\n                            \n                        \n                        \n                            \n                                 bl\n                            \n                        \n                        \n                            \n                                Value : tooltip-bottom-left\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TooltipSize\n                    \n                \n                        \n                            \n                                 sm\n                            \n                        \n                        \n                            \n                                Value : 100px\n                            \n                        \n                        \n                            \n                                 md\n                            \n                        \n                        \n                            \n                                Value : 200px\n                            \n                        \n                        \n                            \n                                 lg\n                            \n                        \n                        \n                            \n                                Value : 400px\n                            \n                        \n            \n        \n\n    projects/components/src/data-exporter/data-exporter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        UserOptions\n                    \n                \n                        \n                            \n                                 selectAll\n                            \n                        \n                        \n                            \n                                Value : selectAll\n                            \n                        \n                        \n                            \n                                 friendlyNames\n                            \n                        \n                        \n                            \n                                Value : friendlyNames\n                            \n                        \n                        \n                            \n                                 sanitize\n                            \n                        \n                        \n                            \n                                Value : sanitize\n                            \n                        \n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n    \n        \n            \n                \n                    \n                        \n                        WildCardPosition\n                    \n                \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 START\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 END\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 WRAP\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BoldTextRenderer   (projects/.../bold-text-renderer.component.ts)\n                        \n                        \n                            ColumnComponentRendererSpec   (projects/.../datagrid-column.interface.ts)\n                        \n                        \n                            configureTestingModule   (projects/.../filter-utils.ts)\n                        \n                        \n                            createDatagridFilterTestHelper   (projects/.../filter-utils.ts)\n                        \n                        \n                            createDatagridFilterTestHelperWithFinder   (projects/.../filter-utils.ts)\n                        \n                        \n                            DatagridMultiSelectFilter   (projects/.../datagrid-multiselect-filter.component.ts)\n                        \n                        \n                            DatagridNumericFilter   (projects/.../datagrid-numeric-filter.component.ts)\n                        \n                        \n                            DatagridSelectFilter   (projects/.../datagrid-select-filter.component.ts)\n                        \n                        \n                            DatagridStringFilter   (projects/.../datagrid-string-filter.component.ts)\n                        \n                        \n                            encodeValue   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            FilterComponentRendererSpec   (projects/.../datagrid-filter.ts)\n                        \n                        \n                            getFormattedDateValue   (projects/.../form-input.component.ts)\n                        \n                        \n                            hasPotentialInjection   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            isFindParamsObject   (projects/.../widget-object.ts)\n                        \n                        \n                            isNullOrUndefined   (projects/.../nested-property.pipe.ts)\n                        \n                        \n                            pad   (projects/.../form-input.component.ts)\n                        \n                        \n                            processRow   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            sanitizeString   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            setStyle   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            unwatchEvents   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            watchEvents   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            WithGridBoldRenderer   (projects/.../bold-text-renderer.wo.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/datagrid/renderers/bold-text-renderer.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            BoldTextRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nBoldTextRenderer(textExtractor)\n                \n            \n\n\n\n\n            \n                \n                    Creates a ColumnRendererSpec for rendering bold text in a column.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    textExtractor\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ColumnRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/interfaces/datagrid-column.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ColumnComponentRendererSpec\n                        \n                        \n                    \n                \n            \n            \n                \nColumnComponentRendererSpec(componentRendererSpec)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to enforce type safety on config object of components of ComponentRenderer type. Used for creating\ncomponent renderer specification of ColumnRendererSpec type\nExample usage:\nconst gridColumn = {\n   renderer: ColumnComponentRendererSpec({type: BoldTextRendererComponent, config: record => ({text: ''})\n}\nIn the above example this method helps in making sure that:\n\nValue \"v\" returned by the config function is of BoldTextRendererConfig type for gridColumn.renderer\n\n#Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\nhttps://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    componentRendererSpec\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ColumnRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/utils/test/datagrid/filter-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            configureTestingModule\n                        \n                        \n                    \n                \n            \n            \n                \nconfigureTestingModule()\n                \n            \n\n\n\n\n            \n                \n                    Creates a testing module with FilterTestHostComponent that has only single column for filter testing\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createDatagridFilterTestHelper\n                        \n                        \n                    \n                \n            \n            \n                \ncreateDatagridFilterTestHelper(filterType, config?)\n                \n            \n\n\n\n\n            \n                \n                    Used inside beforeEach functions of filter tests and it does the following:\n\nCreates a testing module with FilterTestHostComponent that has only single column for filter testing\nSets the filter on the column of host component(FilterTestHostComponent)\nOpens the filter and returns a component instance of the filter created\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filterType\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        to be created in the test host component grid's column\n\n                                    \n                                \n                                \n                                    config\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The configuration for the filter\nExample:\nbeforeEach(function(this: HasDgStringFilter): void {\nthis.filter = createDatagridFilterTestHelper(\nDatagridStringFilterComponent,\n{ wildCardPosition: WildCardPosition.END, value: 'testInput-1' }\n);\n});\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DatagridFilter\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createDatagridFilterTestHelperWithFinder\n                        \n                        \n                    \n                \n            \n            \n                \ncreateDatagridFilterTestHelperWithFinder(filterType, config?)\n                \n            \n\n\n\n\n            \n                \n                    Same as the above function but used for tests which need finder\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterType\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridMultiSelectFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridMultiSelectFilter(options, value?)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of options for select input\n\n                                    \n                                \n                                \n                                    value\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value that should go in this multi-select filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridNumericFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridNumericFilter(value?, unitOptions?, unit?)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value that should go in this numeric filter.\n\n                                    \n                                \n                                \n                                    unitOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Select dropdown options for unit input\n\n                                    \n                                \n                                \n                                    unit\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        initial value for unit input to be selected\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-select-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridSelectFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridSelectFilter(options, value?, customFiql?: boolean)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of options for select input\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value that should go in this select filter.\n\n                                    \n                                \n                                \n                                    customFiql\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        when set as true will disable any formatting by {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-string-filter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DatagridStringFilter\n                        \n                        \n                    \n                \n            \n            \n                \nDatagridStringFilter(wildCardPosition?, value?)\n                \n            \n\n\n\n\n            \n                \n                    Creates a FilterRendererSpec with the given config.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    wildCardPosition\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        where the * should go in the FIQL string output.\n\n                                    \n                                \n                                \n                                    value\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the default value of the filter\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/data-exporter/csv-exporter.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            encodeValue\n                        \n                        \n                    \n                \n            \n            \n                \nencodeValue(cellValue, shouldSanitize: boolean)\n                \n            \n\n\n\n\n            \n                \n                    Returns a cell's cellValue encoded against spaces, quotes, and CSV injection character\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cellValue\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cell cellValue to be encoded\n\n                                    \n                                \n                                \n                                    shouldSanitize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If this cellValue starts with a control should it be\nprefixed with the tab character\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasPotentialInjection\n                        \n                        \n                    \n                \n            \n            \n                \nhasPotentialInjection(row)\n                \n            \n\n\n\n\n            \n                \n                    Whether the given row data is at risk of code injection when exported to CSV.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    row\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            processRow\n                        \n                        \n                    \n                \n            \n            \n                \nprocessRow(row, shouldSanitize: boolean)\n                \n            \n\n\n\n\n            \n                \n                    Returns a string\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    row\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A list of cells to be turned into a CSV string, separated by commas\n\n                                    \n                                \n                                \n                                    shouldSanitize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If a cell starting with a control character should be edited to prevent\npossible code injection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sanitizeString\n                        \n                        \n                    \n                \n            \n            \n                \nsanitizeString(value)\n                \n            \n\n\n\n\n            \n                \n                    Prevents CSV injection by prefixing with a tab character if the string contains a\nspecial character.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-filter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            FilterComponentRendererSpec\n                        \n                        \n                    \n                \n            \n            \n                \nFilterComponentRendererSpec(componentRendererSpec)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to enforce type safety on config object of components of ComponentRenderer type. Used for creating\ncomponent renderer specifications of FilterRendererSpec type\nExample usage:\nconst gridColumn = {\n   filterRendererSpec: FilterComponentRendererSpec({type: DatagridNumericFilterComponent, config: {value: [1, 2]}}),\n}\nIn the above examples these methods help in making sure that:\n\nValue \"v\" of the config property is of [number, number] type for gridColumn.filterRendererSpec\n\n#Note: 'C & {}' below makes the inference site for C be the constructor type from the first argument.\nhttps://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    componentRendererSpec\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FilterRendererSpec\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/form/form-input/form-input.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getFormattedDateValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetFormattedDateValue(value)\n                \n            \n\n\n\n\n            \n                \n                    To format a date string into a value which can be given to the input html element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pad\n                        \n                        \n                    \n                \n            \n            \n                \npad(num)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/utils/test/widget-object.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isFindParamsObject\n                        \n                        \n                    \n                \n            \n            \n                \nisFindParamsObject(params)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FindParams\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/common/pipes/nested-property.pipe.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isNullOrUndefined\n                        \n                        \n                    \n                \n            \n            \n                \nisNullOrUndefined(value)\n                \n            \n\n\n\n\n            \n                \n                    Utility method for covering the 'null' and 'undefined' checks as 'value == null' is equivalent to 'value === null || value === undefined'\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            setStyle\n                        \n                        \n                    \n                \n            \n            \n                \nsetStyle(el, style)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    style\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unwatchEvents\n                        \n                        \n                    \n                \n            \n            \n                \nunwatchEvents(el, mouseIn, mouseOut)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseIn\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseOut\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            watchEvents\n                        \n                        \n                    \n                \n            \n            \n                \nwatchEvents(el, mouseIn, mouseOut)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseIn\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseOut\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/components/src/datagrid/renderers/bold-text-renderer.wo.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            WithGridBoldRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nWithGridBoldRenderer(Base)\n                \n            \n\n\n\n\n            \n                \n                    Mixin that allows ClrDatagridWidgetObject to read information from BoldTextRendererComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Base\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVMware Cloud Director UI Common Components\nRepo Structure\nThis monorepo contains four separate but related projects:\nComponent Library (./projects/components) @vcd/ui-components\nReusable components for vcd-ui and its plugin developers. See its README\nfor further details\nInternalization Library (./projects/i18n) @vcd/i18n\nTranslation code for vcd-ui and its plugin developers. See its README\nfor further details\nExamples App (./projects/examples)\nThe application that showcases @vcd/ui-components using @vmw/ng-live-docs.\nRun npm start for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if\nyou change any of the source files. This is where you'll see changes made in components\nRoute Analyzer (./projects/route-analyzer) @vcd/route-analyzer\nRoute Analyzer statically analyzes angular source code and generates a json file with all the available routes,\nincluding the ones from lazy loaded modules. See its README\nfor further details\nPeer Dependencies\nThe component library depends on Clarity and Angular\nwhich must must be installed from your application's package.json. See package.json for version\ninformation.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use\nng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun npm run build:components, or npm run build:i18n. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun npm run test:components, or npm run test:i18n to execute the unit tests via Karma.\nRunning end-to-end tests (Examples App)\nRun ng e2e to execute the end-to-end tests via Protractor.\nCloning the repo\nWe typically use git clone https://github.com/vmware/vmware-cloud-director-ui-components ./vcd-ui-common to avoid\nthe extremely long folder name.\nPublishing\nPublishing happens through the CI/CD pipeline. See package.json\nSteps for publishing an @next release:\n\nUpdate version number in projects//package.json\nPush the changes to a remote topic branch and create a pull request into vmware/vmware-cloud-director-ui-components/master\nUpon approval of the PR, merge that PR into master\n\nFollowing the above steps makes the CI-CD pipeline to execute publishing job to npm with @next tag(npm publish --tag next)\nSteps for publishing an @latest release:\n\nUpdate version number in projects//package.json\nPush the changes to a remote topic branch and create a pull request into vmware/vmware-cloud-director-ui-components/master\nUpon approval of the PR, Push the changes to remote repo using Git tag using following commands:\nAdd a Git tag to the HEAD commit that has to be published as latest: git tag -fa -v[0-999].[0-999].[0-999]\nPush to the remote repo(vmware/vmware-cloud-director-ui-components): git push git@github.com:vmware/vmware-cloud-director-ui-components.git refs/tags/-v[0-999].[0-999].[0-999]\n\n\n\nFollowing the above steps makes the CI-CD pipeline to execute publishing job to npm with @latest tag(npm publish)\nAngular CLI\nThis project was generated with Angular CLI version 8.3.20. We attempt to\nkeep the project following CLI guidelines so we can benefit from ng update.\nFurther help\nTo get further help, please file issues on github.\nTo get more help on the Angular CLI use ng help or go check out the\nAngular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        PipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ShowClippedTextDirectiveModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SpotlightSearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdActionMenuModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdActivityReporterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdComponentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdDataExporterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdDatagridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdErrorBannerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdFormModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VcdLoadingIndicatorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PipesModule\n\n\n\ncluster_PipesModule_declarations\n\n\n\ncluster_PipesModule_exports\n\n\n\ncluster_ShowClippedTextDirectiveModule\n\n\n\ncluster_ShowClippedTextDirectiveModule_declarations\n\n\n\ncluster_ShowClippedTextDirectiveModule_exports\n\n\n\ncluster_SpotlightSearchModule\n\n\n\ncluster_SpotlightSearchModule_declarations\n\n\n\ncluster_SpotlightSearchModule_exports\n\n\n\ncluster_SpotlightSearchModule_providers\n\n\n\ncluster_VcdActionMenuModule\n\n\n\ncluster_VcdActionMenuModule_declarations\n\n\n\ncluster_VcdActionMenuModule_exports\n\n\n\ncluster_VcdActivityReporterModule\n\n\n\ncluster_VcdActivityReporterModule_declarations\n\n\n\ncluster_VcdActivityReporterModule_imports\n\n\n\ncluster_VcdActivityReporterModule_exports\n\n\n\ncluster_VcdComponentsModule\n\n\n\ncluster_VcdComponentsModule_exports\n\n\n\ncluster_VcdDataExporterModule\n\n\n\ncluster_VcdDataExporterModule_declarations\n\n\n\ncluster_VcdDataExporterModule_exports\n\n\n\ncluster_VcdDatagridModule\n\n\n\ncluster_VcdDatagridModule_declarations\n\n\n\ncluster_VcdDatagridModule_imports\n\n\n\ncluster_VcdDatagridModule_exports\n\n\n\ncluster_VcdErrorBannerModule\n\n\n\ncluster_VcdErrorBannerModule_declarations\n\n\n\ncluster_VcdErrorBannerModule_exports\n\n\n\ncluster_VcdFormModule\n\n\n\ncluster_VcdFormModule_declarations\n\n\n\ncluster_VcdFormModule_providers\n\n\n\ncluster_VcdLoadingIndicatorModule\n\n\n\ncluster_VcdLoadingIndicatorModule_declarations\n\n\n\ncluster_VcdLoadingIndicatorModule_exports\n\n\n\n\nNestedPropertyPipe\n\nNestedPropertyPipe\n\n\n\nPipesModule\n\nPipesModule\n\nPipesModule -->\n\nNestedPropertyPipe->PipesModule\n\n\n\n\n\nFormCheckboxComponent \n\nFormCheckboxComponent \n\nFormCheckboxComponent  -->\n\nPipesModule->FormCheckboxComponent \n\n\n\n\n\nFormInputComponent \n\nFormInputComponent \n\nFormInputComponent  -->\n\nPipesModule->FormInputComponent \n\n\n\n\n\nFormSelectComponent \n\nFormSelectComponent \n\nFormSelectComponent  -->\n\nPipesModule->FormSelectComponent \n\n\n\n\n\nMinMaxValidator \n\nMinMaxValidator \n\nMinMaxValidator  -->\n\nPipesModule->MinMaxValidator \n\n\n\n\n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent \n\nNumberWithUnitFormInputComponent  -->\n\nPipesModule->NumberWithUnitFormInputComponent \n\n\n\n\n\nShowClippedTextDirective\n\nShowClippedTextDirective\n\n\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule\n\nShowClippedTextDirectiveModule -->\n\nShowClippedTextDirective->ShowClippedTextDirectiveModule\n\n\n\n\n\nShowClippedTextDirective \n\nShowClippedTextDirective \n\nShowClippedTextDirective  -->\n\nShowClippedTextDirectiveModule->ShowClippedTextDirective \n\n\n\n\n\nVcdDatagridModule\n\nVcdDatagridModule\n\nVcdDatagridModule -->\n\nShowClippedTextDirectiveModule->VcdDatagridModule\n\n\n\n\n\nSpotlightSearchComponent\n\nSpotlightSearchComponent\n\n\n\nSpotlightSearchModule\n\nSpotlightSearchModule\n\nSpotlightSearchModule -->\n\nSpotlightSearchComponent->SpotlightSearchModule\n\n\n\n\n\nSpotlightSearchComponent \n\nSpotlightSearchComponent \n\nSpotlightSearchComponent  -->\n\nSpotlightSearchModule->SpotlightSearchComponent \n\n\n\n\n\nSpotlightSearchService\n\nSpotlightSearchService\n\nSpotlightSearchModule -->\n\nSpotlightSearchService->SpotlightSearchModule\n\n\n\n\n\nActionMenuComponent\n\nActionMenuComponent\n\n\n\nVcdActionMenuModule\n\nVcdActionMenuModule\n\nVcdActionMenuModule -->\n\nActionMenuComponent->VcdActionMenuModule\n\n\n\n\n\nActionMenuComponent \n\nActionMenuComponent \n\nActionMenuComponent  -->\n\nVcdActionMenuModule->ActionMenuComponent \n\n\n\n\n\nBannerActivityReporterComponent\n\nBannerActivityReporterComponent\n\n\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule\n\nVcdActivityReporterModule -->\n\nBannerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nSpinnerActivityReporterComponent\n\nSpinnerActivityReporterComponent\n\nVcdActivityReporterModule -->\n\nSpinnerActivityReporterComponent->VcdActivityReporterModule\n\n\n\n\n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent \n\nBannerActivityReporterComponent  -->\n\nVcdActivityReporterModule->BannerActivityReporterComponent \n\n\n\n\n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent \n\nSpinnerActivityReporterComponent  -->\n\nVcdActivityReporterModule->SpinnerActivityReporterComponent \n\n\n\nVcdDatagridModule -->\n\nVcdActivityReporterModule->VcdDatagridModule\n\n\n\n\n\nVcdErrorBannerModule\n\nVcdErrorBannerModule\n\nVcdActivityReporterModule -->\n\nVcdErrorBannerModule->VcdActivityReporterModule\n\n\n\n\n\nErrorBannerComponent \n\nErrorBannerComponent \n\nErrorBannerComponent  -->\n\nVcdErrorBannerModule->ErrorBannerComponent \n\n\n\n\n\nVcdLoadingIndicatorModule\n\nVcdLoadingIndicatorModule\n\nVcdActivityReporterModule -->\n\nVcdLoadingIndicatorModule->VcdActivityReporterModule\n\n\n\n\n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent \n\nLoadingIndicatorComponent  -->\n\nVcdLoadingIndicatorModule->LoadingIndicatorComponent \n\n\n\n\n\nShowClippedTextDirectiveModule \n\nShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule \n\nSpotlightSearchModule \n\n\n\nVcdActivityReporterModule \n\nVcdActivityReporterModule \n\n\n\nVcdDataExporterModule \n\nVcdDataExporterModule \n\n\n\nVcdDatagridModule \n\nVcdDatagridModule \n\n\n\nVcdErrorBannerModule \n\nVcdErrorBannerModule \n\n\n\nVcdFormModule \n\nVcdFormModule \n\n\n\nVcdLoadingIndicatorModule \n\nVcdLoadingIndicatorModule \n\n\n\nVcdComponentsModule\n\nVcdComponentsModule\n\nShowClippedTextDirectiveModule  -->\n\nVcdComponentsModule->ShowClippedTextDirectiveModule \n\n\n\nSpotlightSearchModule  -->\n\nVcdComponentsModule->SpotlightSearchModule \n\n\n\nVcdActivityReporterModule  -->\n\nVcdComponentsModule->VcdActivityReporterModule \n\n\n\nVcdDataExporterModule  -->\n\nVcdComponentsModule->VcdDataExporterModule \n\n\n\nVcdDatagridModule  -->\n\nVcdComponentsModule->VcdDatagridModule \n\n\n\nVcdErrorBannerModule  -->\n\nVcdComponentsModule->VcdErrorBannerModule \n\n\n\nVcdFormModule  -->\n\nVcdComponentsModule->VcdFormModule \n\n\n\nVcdLoadingIndicatorModule  -->\n\nVcdComponentsModule->VcdLoadingIndicatorModule \n\n\n\n\n\nDataExporterComponent\n\nDataExporterComponent\n\n\n\nVcdDataExporterModule\n\nVcdDataExporterModule\n\nVcdDataExporterModule -->\n\nDataExporterComponent->VcdDataExporterModule\n\n\n\n\n\nDataExporterComponent \n\nDataExporterComponent \n\nDataExporterComponent  -->\n\nVcdDataExporterModule->DataExporterComponent \n\n\n\n\n\nBoldTextRendererComponent\n\nBoldTextRendererComponent\n\nVcdDatagridModule -->\n\nBoldTextRendererComponent->VcdDatagridModule\n\n\n\n\n\nComponentRendererOutletDirective\n\nComponentRendererOutletDirective\n\nVcdDatagridModule -->\n\nComponentRendererOutletDirective->VcdDatagridModule\n\n\n\n\n\nDatagridComponent\n\nDatagridComponent\n\nVcdDatagridModule -->\n\nDatagridComponent->VcdDatagridModule\n\n\n\n\n\nDatagridMultiSelectFilterComponent\n\nDatagridMultiSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridMultiSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridNumericFilterComponent\n\nDatagridNumericFilterComponent\n\nVcdDatagridModule -->\n\nDatagridNumericFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridSelectFilterComponent\n\nDatagridSelectFilterComponent\n\nVcdDatagridModule -->\n\nDatagridSelectFilterComponent->VcdDatagridModule\n\n\n\n\n\nDatagridStringFilterComponent\n\nDatagridStringFilterComponent\n\nVcdDatagridModule -->\n\nDatagridStringFilterComponent->VcdDatagridModule\n\n\n\n\n\nFunctionRendererPipe\n\nFunctionRendererPipe\n\nVcdDatagridModule -->\n\nFunctionRendererPipe->VcdDatagridModule\n\n\n\n\n\nBoldTextRendererComponent \n\nBoldTextRendererComponent \n\nBoldTextRendererComponent  -->\n\nVcdDatagridModule->BoldTextRendererComponent \n\n\n\n\n\nDatagridComponent \n\nDatagridComponent \n\nDatagridComponent  -->\n\nVcdDatagridModule->DatagridComponent \n\n\n\n\n\nVcdFormModule\n\nVcdFormModule\n\nFormCheckboxComponent  -->\n\nVcdFormModule->FormCheckboxComponent \n\n\n\nFormInputComponent  -->\n\nVcdFormModule->FormInputComponent \n\n\n\nFormSelectComponent  -->\n\nVcdFormModule->FormSelectComponent \n\n\n\nMinMaxValidator  -->\n\nVcdFormModule->MinMaxValidator \n\n\n\nNumberWithUnitFormInputComponent  -->\n\nVcdFormModule->NumberWithUnitFormInputComponent \n\n\n\nVcdDatagridModule -->\n\nVcdFormModule->VcdDatagridModule\n\n\n\n\n\nErrorBannerComponent\n\nErrorBannerComponent\n\nVcdErrorBannerModule -->\n\nErrorBannerComponent->VcdErrorBannerModule\n\n\n\n\n\nFormCheckboxComponent\n\nFormCheckboxComponent\n\nVcdFormModule -->\n\nFormCheckboxComponent->VcdFormModule\n\n\n\n\n\nFormInputComponent\n\nFormInputComponent\n\nVcdFormModule -->\n\nFormInputComponent->VcdFormModule\n\n\n\n\n\nFormSelectComponent\n\nFormSelectComponent\n\nVcdFormModule -->\n\nFormSelectComponent->VcdFormModule\n\n\n\n\n\nMinMaxValidator\n\nMinMaxValidator\n\nVcdFormModule -->\n\nMinMaxValidator->VcdFormModule\n\n\n\n\n\nNumberWithUnitFormInputComponent\n\nNumberWithUnitFormInputComponent\n\nVcdFormModule -->\n\nNumberWithUnitFormInputComponent->VcdFormModule\n\n\n\n\n\nUnitFormatter\n\nUnitFormatter\n\nVcdFormModule -->\n\nUnitFormatter->VcdFormModule\n\n\n\n\n\nLoadingIndicatorComponent\n\nLoadingIndicatorComponent\n\nVcdLoadingIndicatorModule -->\n\nLoadingIndicatorComponent->VcdLoadingIndicatorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    48 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActionHandlerType   (projects/.../action-item.interface.ts)\n                        \n                        \n                            ComponentRendererConstructor   (projects/.../component-renderer.interface.ts)\n                        \n                        \n                            DatagridNumericFilterValue   (projects/.../datagrid-numeric-filter.component.ts)\n                        \n                        \n                            EventHandler   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            LazyString   (projects/.../types.ts)\n                        \n                        \n                            Primitives   (projects/.../filter-builder.ts)\n                        \n                        \n                            SpinnerSize   (projects/.../loading-indicator.component.ts)\n                        \n                        \n                            SpotlightSearchResultType   (projects/.../spotlight-search-result.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/common/interfaces/action-item.interface.ts\n    \n    \n        \n            \n                \n                    \n                    ActionHandlerType\n                \n            \n            \n                \n                    Type of ActionItem.handler function\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/components/src/datagrid/interfaces/component-renderer.interface.ts\n    \n    \n        \n            \n                \n                    \n                    ComponentRendererConstructor\n                \n            \n            \n                \n                    Used for the type safety of ColumnRendererSpec\n\n                \n            \n            \n                \n                            Type>\n\n                \n            \n        \n    \n    projects/components/src/datagrid/filters/datagrid-numeric-filter.component.ts\n    \n    \n        \n            \n                \n                    \n                    DatagridNumericFilterValue\n                \n            \n            \n                \n                    The type of value that goes in the DatagridNumericFilterConfig.\n\n                \n            \n            \n                \n                        [number, number]\n\n                \n            \n        \n    \n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n    \n        \n            \n                \n                    \n                    EventHandler\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/components/src/utils/types.ts\n    \n    \n        \n            \n                \n                    \n                    LazyString\n                \n            \n            \n                \n                    The result of a call to either TranslationService.translate or TranslationService.translateAsync.\nA duplicate of the @vcd/i18n LazyString.\n\n                \n            \n            \n                \n                        string | Observable | Promise\n\n                \n            \n        \n    \n    projects/components/src/utils/filter-builder.ts\n    \n    \n        \n            \n                \n                    \n                    Primitives\n                \n            \n            \n                \n                        boolean | string | number\n\n                \n            \n        \n    \n    projects/components/src/common/loading/loading-indicator.component.ts\n    \n    \n        \n            \n                \n                    \n                    SpinnerSize\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/components/src/spotlight-search/spotlight-search-result.ts\n    \n    \n        \n            \n                \n                    \n                    SpotlightSearchResultType\n                \n            \n            \n                \n                    The type of the spotlight search result which can be a promise\n\n                \n            \n            \n                \n                            SpotlightSearchResult[] | Promise\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CELL_TAG   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            COLUMN_CSS_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            COLUMN_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            createId   (projects/.../spotlight-search.service.ts)\n                        \n                        \n                            DATE_OBJECT_CLASS   (projects/.../nested-property.pipe.ts)\n                        \n                        \n                            DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES   (projects/.../datagrid-filter.ts)\n                        \n                        \n                            declarations   (projects/.../form.module.ts)\n                        \n                        \n                            declarations   (projects/.../pipes.module.ts)\n                        \n                        \n                            DEFAULT_PAGINATION_TRANSLATION_KEY   (projects/.../datagrid.component.ts)\n                        \n                        \n                            DEFAULT_SIZE   (projects/.../datagrid.component.ts)\n                        \n                        \n                            DEFAULT_SIZE_OPTIONS   (projects/.../datagrid.component.ts)\n                        \n                        \n                            directives   (projects/.../datagrid.module.ts)\n                        \n                        \n                            FILTER_SELECTOR   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            filters   (projects/.../datagrid.module.ts)\n                        \n                        \n                            fireTipTransitionEndForTests   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            idGenerator   (projects/.../base-form-control.ts)\n                        \n                        \n                            idGenerator   (projects/.../datagrid-multiselect-filter.component.ts)\n                        \n                        \n                            LEADING_CONTROL_CHAR   (projects/.../csv-exporter.service.ts)\n                        \n                        \n                            MAX_HEADER_HEIGHT   (projects/.../datagrid.component.ts)\n                        \n                        \n                            mockData   (projects/.../mock-data.ts)\n                        \n                        \n                            OBJECT_PROPERTY_SEPARATOR   (projects/.../nested-property.pipe.ts)\n                        \n                        \n                            Operators   (projects/.../filter-builder.ts)\n                        \n                        \n                            pipes   (projects/.../datagrid.module.ts)\n                        \n                        \n                            renderers   (projects/.../datagrid.module.ts)\n                        \n                        \n                            ROW_HEIGHT   (projects/.../datagrid.component.ts)\n                        \n                        \n                            ROW_TAG   (projects/.../datagrid.wo.ts)\n                        \n                        \n                            tip   (projects/.../show-clipped-text.directive.ts)\n                        \n                        \n                            UNLIMITED   (projects/.../number-with-unit-form-input.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/components/src/utils/test/datagrid/datagrid.wo.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CELL_TAG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-cell'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COLUMN_CSS_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '.datagrid-column-title'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COLUMN_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-column'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FILTER_SELECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-filter'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROW_TAG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'clr-dg-row'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/spotlight-search/spotlight-search.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ((): (() => string) => {\n    let id = 1;\n    return () => `${new Date().getTime()}-${id++}`;\n})()\n                        \n                    \n\n                \n                    \n                        Create unique id\n\n                    \n                \n\n            \n        \n\n    projects/components/src/common/pipes/nested-property.pipe.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DATE_OBJECT_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '[object Date]'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            OBJECT_PROPERTY_SEPARATOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '.'\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-filter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEBOUNCE_TIME_FOR_GRID_FILTER_CHANGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 300\n                        \n                    \n\n                \n                    \n                        Number of milliseconds delayed before emitting the filter has changed observable\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/form.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            declarations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    FormInputComponent,\n    FormSelectComponent,\n    FormCheckboxComponent,\n    NumberWithUnitFormInputComponent,\n    MinMaxValidator,\n]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/common/pipes/pipes.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            declarations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [NestedPropertyPipe]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/datagrid.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_PAGINATION_TRANSLATION_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'vcd.cc.grid.default.pagination'\n                        \n                    \n\n                \n                    \n                        Key used for translation of pagination when a translation key is not given as input from the caller\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SIZE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 15\n                        \n                    \n\n                \n                    \n                        The default number of items on a single page.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SIZE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [DEFAULT_SIZE, 20, 50, 100]\n                        \n                    \n\n                \n                    \n                        The default items to show in the page size dropdown.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MAX_HEADER_HEIGHT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 40\n                        \n                    \n\n                \n                    \n                        The maximum allowed .datagrid-header element clientHeight in pixels.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROW_HEIGHT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : 37\n                        \n                    \n\n                \n                    \n                        The default clr-dr-row element clientHeight in pixels.\n\n                    \n                \n\n            \n        \n\n    projects/components/src/datagrid/datagrid.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            directives\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [ComponentRendererOutletDirective]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    DatagridNumericFilterComponent,\n    DatagridStringFilterComponent,\n    DatagridSelectFilterComponent,\n    DatagridMultiSelectFilterComponent,\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pipes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [FunctionRendererPipe]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [BoldTextRendererComponent]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/lib/directives/show-clipped-text.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fireTipTransitionEndForTests\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (event: Event) => {\n    // Since we're at it, please remove the param from onTransitionEnd since we don't use it\n    tip.onTransitionEnd(event);\n}\n                        \n                    \n\n                \n                    \n                        Used to call tip.onTransitionEnd from outside this file.\nWe need to expose tip.onTransitionEnd because when the window is not focused\n(as in a headless chrome environment), the transitionend event is not fired.\nAs such, from the tests, you need to manually call this method.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    /** A single DOM node structure for the popup is created and shared with all instances (the .tooltip)  */\n    container: null as HTMLElement,\n\n    /** The inner node (the .tooltip-content) */\n    content: null as HTMLElement,\n\n    /** Timer for setTimeout used when hiding */\n    hideTimeout: null as number,\n\n    /** The directive that last caused the tooltip to be displayed */\n    currentDirective: null as ShowClippedTextDirective,\n\n    /** Whether the mouse is currently over a host or the tooltip */\n    isMouseOver: false,\n\n    /**\n     * The host element that last caused the tooltip to be displayed\n     */\n    get currentHost(): HTMLElement {\n        return tip.currentDirective.hostElement;\n    },\n\n    /**\n     * The tooltip size requested for the last directive that caused the tooltip to be displayed\n     */\n    get tooltipSize(): TooltipSize {\n        return tip.currentDirective.tooltipSize;\n    },\n\n    /**\n     * How long to wait before hiding the tooltip after a mouseout. This gives the user a chance to hover over the\n     * tooltip so they can copy/paste its contents\n     */\n    get mouseoutDelay(): number {\n        return tip.currentDirective.mouseoutDelay;\n    },\n\n    create(): void {\n        if (tip.container) {\n            return;\n        }\n        tip.container = document.createElement('div');\n        tip.container.classList.add('tooltip', 'vcd-show-clipped-text');\n        tip.content = document.createElement('div');\n        tip.content.classList.add('tooltip-content');\n        setStyle(tip.container, {\n            position: 'absolute',\n            zIndex: '1000',\n            opacity: '0',\n        });\n        tip.container.appendChild(tip.content);\n        document.body.appendChild(tip.container);\n        watchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.addEventListener('transitionend', tip.onTransitionEnd);\n    },\n\n    destroy(): void {\n        document.body.removeChild(tip.container);\n        unwatchEvents(tip.container, tip.onMouseEnter, tip.onMouseLeave);\n        tip.content.removeEventListener('transitionend', this.onTransitionEnd);\n        tip.container = null;\n        tip.content = null;\n    },\n\n    onMouseEnter(): void {\n        tip.clearHideTimeout();\n    },\n\n    onMouseLeave(): void {\n        tip.hideTooltip(tip.mouseoutDelay);\n    },\n\n    hideTooltip(delay: number): void {\n        tip.clearHideTimeout();\n        tip.hideTimeout = window.setTimeout(() => {\n            tip.isMouseOver = false;\n            tip.container.style.opacity = '0';\n            tip.content.style.opacity = '0';\n            tip.hideTimeout = null;\n            tip.currentDirective = null;\n        }, delay);\n    },\n\n    clearHideTimeout(): void {\n        if (tip.hideTimeout) {\n            clearTimeout(tip.hideTimeout);\n            tip.hideTimeout = null;\n        }\n    },\n\n    onTransitionEnd(e: Event): void {\n        if (tip.container.style.opacity === '0') {\n            tip.container.style.visibility = 'hidden';\n            tip.content.style.visibility = 'hidden';\n        }\n    },\n\n    /**\n     * Update the tooltip based on the content/dimensions of {@link tip.currentDirective}\n     */\n    update(): void {\n        const el = tip.currentHost;\n        const rect = el.getBoundingClientRect();\n        setStyle(tip.container, {\n            top: rect.top + 'px',\n            left: rect.left + 'px',\n            width: rect.width + 'px',\n            height: rect.height + 'px',\n            opacity: '1',\n            wordBreak: 'break-all',\n        });\n        setStyle(tip.content, {\n            visibility: 'visible',\n            opacity: '1',\n            width: this.tooltipSize,\n        });\n        const { tl, tr, bl, br } = TooltipPosition;\n        tip.content.classList.remove(tl, tr, bl, br);\n        tip.content.classList.add(tip.calculatePosition(rect));\n        tip.content.innerHTML = el.innerHTML;\n    },\n\n    /**\n     *  Tooltip direction should be the opposite quadrant of where the center of the clipped element is\n     *     TL -> BR        TR -> BL\n     *     BL -> TR        BR -> TL\n     * @param rect THe dimensions of the clipped element\n     */\n    calculatePosition(rect: ClientRect): TooltipPosition {\n        const { innerWidth, innerHeight } = window;\n        const rectCenter = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };\n\n        // It's on the right\n        if (rectCenter.x > innerWidth / 2) {\n            if (rectCenter.y > innerHeight / 2) {\n                // Bottom right quad\n                return TooltipPosition.tl;\n            } else {\n                // Top right quad\n                return TooltipPosition.bl;\n            }\n        }\n\n        // It's on the left\n        if (rectCenter.y > innerHeight / 2) {\n            // Bottom left quad\n            return TooltipPosition.tr;\n        } else {\n            // Top left quad\n            return TooltipPosition.br;\n        }\n    },\n}\n                        \n                    \n\n                \n                    \n                        Singleton tooltip created by directive\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/base-form-control.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            idGenerator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new IdGenerator('base-form-control-id')\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/filters/datagrid-multiselect-filter.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            idGenerator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new IdGenerator('vcd-multiselect-filter-id')\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/data-exporter/csv-exporter.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LEADING_CONTROL_CHAR\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^[-+=@]/\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/datagrid/mock-data.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MockRecord[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n]\n                        \n                    \n\n\n            \n        \n\n    projects/components/src/utils/filter-builder.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Operators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    OR: ',',\n    AND: ';',\n    GT: '=gt=',\n    GE: '=ge=',\n    LT: '=lt=',\n    LE: '=le=',\n    EQ: '==',\n    NEQ: '!=',\n}\n                        \n                    \n\n                \n                    \n                        TODO: Remove FilterBuilder from VCD-UI https://jira.eng.vmware.com/browse/VDUCC-115\n\n                    \n                \n\n            \n        \n\n    projects/components/src/form/number-with-unit-input/number-with-unit-form-input.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UNLIMITED\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : -1\n                        \n                    \n\n                \n                    \n                        -1 is the number to specify a value of unlimited.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
